using fetchkptncook.Client;
using fetchkptncook.Model;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using OpenAPIDateConverter = fetchkptncook.Client.OpenAPIDateConverter;
using Polly;
using RestSharp;
using RestSharp.Serializers;
using RestSharpMethod = RestSharp.Method;
using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Group = fetchkptncook.Model.Group;
/*
* Django Recipes
*
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.4.4
* Generated by: https://github.com/openapitools/openapi-generator.git
*/
namespace fetchkptncook.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
      /// 
    public class Int : CustomValueType<Int, int>
    {
        private Int(int value) : base(value) { }
        public static implicit operator Int(int value) { return new Int(value); }
        public static implicit operator long(Int custom) { return custom._value; }
    }

    public class CustomValueType<TCustom, TValue>
    {
        protected readonly TValue _value;

        public CustomValueType(TValue value)
        {
            _value = value;
        }

        public override string ToString()
        {
            return _value.ToString();
        }

        public static bool operator <(CustomValueType<TCustom, TValue> a, CustomValueType<TCustom, TValue> b)
        {
            return Comparer<TValue>.Default.Compare(a._value, b._value) < 0;
        }

        public static bool operator >(CustomValueType<TCustom, TValue> a, CustomValueType<TCustom, TValue> b)
        {
            return !(a < b);
        }

        public static bool operator <=(CustomValueType<TCustom, TValue> a, CustomValueType<TCustom, TValue> b)
        {
            return (a < b) || (a == b);
        }

        public static bool operator >=(CustomValueType<TCustom, TValue> a, CustomValueType<TCustom, TValue> b)
        {
            return (a > b) || (a == b);
        }

        public static bool operator ==(CustomValueType<TCustom, TValue> a, CustomValueType<TCustom, TValue> b)
        {
            return a is null ? b is null : a.Equals((object)b);
        }

        public static bool operator !=(CustomValueType<TCustom, TValue> a, CustomValueType<TCustom, TValue> b)
        {
            return !(a == b);
        }

        public static TCustom operator +(CustomValueType<TCustom, TValue> a, CustomValueType<TCustom, TValue> b)
        {
            return (dynamic)a._value + b._value;
        }

        public static TCustom operator -(CustomValueType<TCustom, TValue> a, CustomValueType<TCustom, TValue> b)
        {
            return ((dynamic)a._value - b._value);
        }

        protected bool Equals(CustomValueType<TCustom, TValue> other)
        {
            return EqualityComparer<TValue>.Default.Equals(_value, other._value);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((CustomValueType<TCustom, TValue>)obj);
        }

        public override int GetHashCode()
        {
            return EqualityComparer<TValue>.Default.GetHashCode(_value);
        }
    }
    public interface IApiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        AccessToken CreateAccessToken(AccessToken accessToken = default(AccessToken), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        ApiResponse<AccessToken> CreateAccessTokenWithHttpInfo(AccessToken accessToken = default(AccessToken), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        Automation CreateAutomation(Automation automation = default(Automation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        ApiResponse<Automation> CreateAutomationWithHttpInfo(Automation automation = default(Automation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkletImport</returns>
        BookmarkletImport CreateBookmarkletImport(BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkletImport</returns>
        ApiResponse<BookmarkletImport> CreateBookmarkletImportWithHttpInfo(BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CookLog</returns>
        CookLog CreateCookLog(CookLog cookLog = default(CookLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CookLog</returns>
        ApiResponse<CookLog> CreateCookLogWithHttpInfo(CookLog cookLog = default(CookLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFilter</returns>
        CustomFilter CreateCustomFilter(CustomFilter customFilter = default(CustomFilter), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFilter</returns>
        ApiResponse<CustomFilter> CreateCustomFilterWithHttpInfo(CustomFilter customFilter = default(CustomFilter), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLog</returns>
        ExportLog CreateExportLog(ExportLog exportLog = default(ExportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLog</returns>
        ApiResponse<ExportLog> CreateExportLogWithHttpInfo(ExportLog exportLog = default(ExportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        Food CreateFood(Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        ApiResponse<Food> CreateFoodWithHttpInfo(Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportLog</returns>
        ImportLog CreateImportLog(ImportLog importLog = default(ImportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportLog</returns>
        ApiResponse<ImportLog> CreateImportLogWithHttpInfo(ImportLog importLog = default(ImportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Ingredient</returns>
        Ingredient CreateIngredient(Ingredient ingredient = default(Ingredient), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Ingredient</returns>
        ApiResponse<Ingredient> CreateIngredientWithHttpInfo(Ingredient ingredient = default(Ingredient), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteLink</returns>
        InviteLink CreateInviteLink(InviteLink inviteLink = default(InviteLink), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteLink</returns>
        ApiResponse<InviteLink> CreateInviteLinkWithHttpInfo(InviteLink inviteLink = default(InviteLink), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        Keyword CreateKeyword(Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        ApiResponse<Keyword> CreateKeywordWithHttpInfo(Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealPlan</returns>
        MealPlan CreateMealPlan(MealPlan mealPlan = default(MealPlan), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealPlan</returns>
        ApiResponse<MealPlan> CreateMealPlanWithHttpInfo(MealPlan mealPlan = default(MealPlan), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealType</returns>
        MealType CreateMealType(MealType mealType = default(MealType), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealType</returns>
        ApiResponse<MealType> CreateMealTypeWithHttpInfo(MealType mealType = default(MealType), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Recipe</returns>
        Recipe CreateRecipe(Recipe recipe = default(Recipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Recipe</returns>
        ApiResponse<Recipe> CreateRecipeWithHttpInfo(Recipe recipe = default(Recipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBook</returns>
        RecipeBook CreateRecipeBook(RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBook</returns>
        ApiResponse<RecipeBook> CreateRecipeBookWithHttpInfo(RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBookEntry</returns>
        RecipeBookEntry CreateRecipeBookEntry(RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBookEntry</returns>
        ApiResponse<RecipeBookEntry> CreateRecipeBookEntryWithHttpInfo(RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingList</returns>
        ShoppingList CreateShoppingList(ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingList</returns>
        ApiResponse<ShoppingList> CreateShoppingListWithHttpInfo(ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListEntry</returns>
        ShoppingListEntry CreateShoppingListEntry(ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListEntry</returns>
        ApiResponse<ShoppingListEntry> CreateShoppingListEntryWithHttpInfo(ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListRecipe</returns>
        ShoppingListRecipe CreateShoppingListRecipe(ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListRecipe</returns>
        ApiResponse<ShoppingListRecipe> CreateShoppingListRecipeWithHttpInfo(ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Step</returns>
        Step CreateStep(Step step = default(Step), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Step</returns>
        ApiResponse<Step> CreateStepWithHttpInfo(Step step = default(Step), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Storage</returns>
        Storage CreateStorage(Storage storage = default(Storage), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Storage</returns>
        ApiResponse<Storage> CreateStorageWithHttpInfo(Storage storage = default(Storage), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Supermarket</returns>
        Supermarket CreateSupermarket(Supermarket supermarket = default(Supermarket), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Supermarket</returns>
        ApiResponse<Supermarket> CreateSupermarketWithHttpInfo(Supermarket supermarket = default(Supermarket), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategory</returns>
        SupermarketCategory CreateSupermarketCategory(SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategory</returns>
        ApiResponse<SupermarketCategory> CreateSupermarketCategoryWithHttpInfo(SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategoryRelation</returns>
        SupermarketCategoryRelation CreateSupermarketCategoryRelation(SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategoryRelation</returns>
        ApiResponse<SupermarketCategoryRelation> CreateSupermarketCategoryRelationWithHttpInfo(SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Sync</returns>
        Sync CreateSync(Sync sync = default(Sync), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Sync</returns>
        ApiResponse<Sync> CreateSyncWithHttpInfo(Sync sync = default(Sync), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        Unit CreateUnit(Unit unit = default(Unit), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        ApiResponse<Unit> CreateUnitWithHttpInfo(Unit unit = default(Unit), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFile</returns>
        UserFile CreateUserFile(string name, System.IO.Stream file, int? id = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFile</returns>
        ApiResponse<UserFile> CreateUserFileWithHttpInfo(string name, System.IO.Stream file, int? id = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewLog</returns>
        ViewLog CreateViewLog(ViewLog viewLog = default(ViewLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewLog</returns>
        ApiResponse<ViewLog> CreateViewLogWithHttpInfo(ViewLog viewLog = default(ViewLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to handle files passed by application importer
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CreateimportFiles(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to handle files passed by application importer
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateimportFilesWithHttpInfo(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to retrieve a recipe from a given url or source string :param request: standard request with additional post parameters         - url: url to use for importing recipe         - data: if no url is given recipe is imported from provided source data         - (optional) bookmarklet: id of bookmarklet import to use, overrides URL and data attributes :return: JsonResponse containing the parsed json and images
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CreaterecipeFromSource(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to retrieve a recipe from a given url or source string :param request: standard request with additional post parameters         - url: url to use for importing recipe         - data: if no url is given recipe is imported from provided source data         - (optional) bookmarklet: id of bookmarklet import to use, overrides URL and data attributes :return: JsonResponse containing the parsed json and images
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreaterecipeFromSourceWithHttpInfo(Object body = default(Object), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyAccessToken(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyAccessTokenWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyAutomation(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyAutomationWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyBookmarkletImport(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyBookmarkletImportWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyCookLog(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyCookLogWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyCustomFilter(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyCustomFilterWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyExportLog(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyExportLogWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyFood(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyFoodWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyImportLog(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyImportLogWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyIngredient(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyIngredientWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyInviteLink(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyInviteLinkWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyKeyword(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyKeywordWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyMealPlan(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyMealPlanWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyMealType(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyMealTypeWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyRecipe(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyRecipeWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyRecipeBook(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyRecipeBookWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyRecipeBookEntry(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyRecipeBookEntryWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyShoppingList(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyShoppingListWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyShoppingListEntry(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyShoppingListEntryWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyShoppingListRecipe(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyShoppingListRecipeWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyStep(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyStepWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyStorage(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyStorageWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroySupermarket(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroySupermarketWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroySupermarketCategory(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroySupermarketCategoryWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroySupermarketCategoryRelation(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroySupermarketCategoryRelationWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroySync(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroySyncWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyUnit(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyUnitWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyUserFile(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyUserFileWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyUserSpace(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyUserSpaceWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DestroyViewLog(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyViewLogWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="image"> (optional)</param>
        /// <param name="imageUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeImage</returns>
        RecipeImage ImageRecipe(string id, System.IO.Stream image = default(System.IO.Stream), string imageUrl = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="image"> (optional)</param>
        /// <param name="imageUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeImage</returns>
        ApiResponse<RecipeImage> ImageRecipeWithHttpInfo(string id, System.IO.Stream image = default(System.IO.Stream), string imageUrl = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AccessToken&gt;</returns>
        List<AccessToken> ListAccessTokens(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AccessToken&gt;</returns>
        ApiResponse<List<AccessToken>> ListAccessTokensWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Automation&gt;</returns>
        List<Automation> ListAutomations(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Automation&gt;</returns>
        ApiResponse<List<Automation>> ListAutomationsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BookmarkletImportList&gt;</returns>
        List<BookmarkletImportList> ListBookmarkletImports(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BookmarkletImportList&gt;</returns>
        ApiResponse<List<BookmarkletImportList>> ListBookmarkletImportsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCookLogs200Response</returns>
        ListCookLogs200Response ListCookLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCookLogs200Response</returns>
        ApiResponse<ListCookLogs200Response> ListCookLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CustomFilter&gt;</returns>
        List<CustomFilter> ListCustomFilters(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CustomFilter&gt;</returns>
        ApiResponse<List<CustomFilter>> ListCustomFiltersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListExportLogs200Response</returns>
        ListExportLogs200Response ListExportLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListExportLogs200Response</returns>
        ApiResponse<ListExportLogs200Response> ListExportLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FoodInheritField&gt;</returns>
        List<FoodInheritField> ListFoodInheritFields(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FoodInheritField&gt;</returns>
        ApiResponse<List<FoodInheritField>> ListFoodInheritFieldsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against food name. (optional)</param>
        /// <param name="root">Return first level children of food with ID [int].  Integer 0 will return root foods. (optional)</param>
        /// <param name="tree">Return all self and children of food with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFoods200Response</returns>
        ListFoods200Response ListFoods(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against food name. (optional)</param>
        /// <param name="root">Return first level children of food with ID [int].  Integer 0 will return root foods. (optional)</param>
        /// <param name="tree">Return all self and children of food with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFoods200Response</returns>
        ApiResponse<ListFoods200Response> ListFoodsWithHttpInfo(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Group&gt;</returns>
        List<Group> ListGroups(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<List<Group>> ListGroupsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListImportLogs200Response</returns>
        ListImportLogs200Response ListImportLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListImportLogs200Response</returns>
        ApiResponse<ListImportLogs200Response> ListImportLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListIngredients200Response</returns>
        ListIngredients200Response ListIngredients(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListIngredients200Response</returns>
        ApiResponse<ListIngredients200Response> ListIngredientsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InviteLink&gt;</returns>
        List<InviteLink> ListInviteLinks(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InviteLink&gt;</returns>
        ApiResponse<List<InviteLink>> ListInviteLinksWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against keyword name. (optional)</param>
        /// <param name="root">Return first level children of keyword with ID [int].  Integer 0 will return root keywords. (optional)</param>
        /// <param name="tree">Return all self and children of keyword with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListKeywords200Response</returns>
        ListKeywords200Response ListKeywords(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against keyword name. (optional)</param>
        /// <param name="root">Return first level children of keyword with ID [int].  Integer 0 will return root keywords. (optional)</param>
        /// <param name="tree">Return all self and children of keyword with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListKeywords200Response</returns>
        ApiResponse<ListKeywords200Response> ListKeywordsWithHttpInfo(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **from_date**: filter from (inclusive) a certain date onward - **to_date**: filter upward to (inclusive) certain date
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MealPlan&gt;</returns>
        List<MealPlan> ListMealPlans(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **from_date**: filter from (inclusive) a certain date onward - **to_date**: filter upward to (inclusive) certain date
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MealPlan&gt;</returns>
        ApiResponse<List<MealPlan>> ListMealPlansWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MealType&gt;</returns>
        List<MealType> ListMealTypes(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MealType&gt;</returns>
        ApiResponse<List<MealType>> ListMealTypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **recipe**: id of recipe - only return books for that recipe - **book**: id of book - only return recipes in that book
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RecipeBookEntry&gt;</returns>
        List<RecipeBookEntry> ListRecipeBookEntrys(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **recipe**: id of recipe - only return books for that recipe - **book**: id of book - only return recipes in that book
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RecipeBookEntry&gt;</returns>
        ApiResponse<List<RecipeBookEntry>> ListRecipeBookEntrysWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RecipeBook&gt;</returns>
        List<RecipeBook> ListRecipeBooks(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RecipeBook&gt;</returns>
        ApiResponse<List<RecipeBook>> ListRecipeBooksWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched (fuzzy) against recipe name. In the future also fulltext search. (optional)</param>
        /// <param name="keywords">ID of keyword a recipe should have. For multiple repeat parameter. Equivalent to keywords_or (optional)</param>
        /// <param name="keywordsOr">Keyword IDs, repeat for multiple. Return recipes with any of the keywords (optional)</param>
        /// <param name="keywordsAnd">Keyword IDs, repeat for multiple. Return recipes with all of the keywords. (optional)</param>
        /// <param name="keywordsOrNot">Keyword IDs, repeat for multiple. Exclude recipes with any of the keywords. (optional)</param>
        /// <param name="keywordsAndNot">Keyword IDs, repeat for multiple. Exclude recipes with all of the keywords. (optional)</param>
        /// <param name="foods">ID of food a recipe should have. For multiple repeat parameter. (optional)</param>
        /// <param name="foodsOr">Food IDs, repeat for multiple. Return recipes with any of the foods (optional)</param>
        /// <param name="foodsAnd">Food IDs, repeat for multiple. Return recipes with all of the foods. (optional)</param>
        /// <param name="foodsOrNot">Food IDs, repeat for multiple. Exclude recipes with any of the foods. (optional)</param>
        /// <param name="foodsAndNot">Food IDs, repeat for multiple. Exclude recipes with all of the foods. (optional)</param>
        /// <param name="units">ID of unit a recipe should have. (optional)</param>
        /// <param name="rating">Rating a recipe should have or greater. [0 - 5] Negative value filters rating less than. (optional)</param>
        /// <param name="books">ID of book a recipe should be in. For multiple repeat parameter. (optional)</param>
        /// <param name="booksOr">Book IDs, repeat for multiple. Return recipes with any of the books (optional)</param>
        /// <param name="booksAnd">Book IDs, repeat for multiple. Return recipes with all of the books. (optional)</param>
        /// <param name="booksOrNot">Book IDs, repeat for multiple. Exclude recipes with any of the books. (optional)</param>
        /// <param name="booksAndNot">Book IDs, repeat for multiple. Exclude recipes with all of the books. (optional)</param>
        /// <param name="_internal">If only internal recipes should be returned. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="random">Returns the results in randomized order. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="_new">Returns new results first in search results. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="timescooked">Filter recipes cooked X times or more.  Negative values returns cooked less than X times (optional)</param>
        /// <param name="cookedon">Filter recipes last cooked on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="createdon">Filter recipes created on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="updatedon">Filter recipes updated on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="viewedon">Filter recipes lasts viewed on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="makenow">Filter recipes that can be made with OnHand food. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRecipes200Response</returns>
        ListRecipes200Response ListRecipes(string query = default(string), Int keywords = default(Int), Int keywordsOr = default(Int), Int keywordsAnd = default(Int), Int keywordsOrNot = default(Int), Int keywordsAndNot = default(Int), Int foods = default(Int), Int foodsOr = default(Int), Int foodsAnd = default(Int), Int foodsOrNot = default(Int), Int foodsAndNot = default(Int), Int units = default(Int), Int rating = default(Int), string books = default(string), Int booksOr = default(Int), Int booksAnd = default(Int), Int booksOrNot = default(Int), Int booksAndNot = default(Int), string _internal = default(string), string random = default(string), string _new = default(string), Int timescooked = default(Int), string cookedon = default(string), string createdon = default(string), string updatedon = default(string), string viewedon = default(string), string makenow = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched (fuzzy) against recipe name. In the future also fulltext search. (optional)</param>
        /// <param name="keywords">ID of keyword a recipe should have. For multiple repeat parameter. Equivalent to keywords_or (optional)</param>
        /// <param name="keywordsOr">Keyword IDs, repeat for multiple. Return recipes with any of the keywords (optional)</param>
        /// <param name="keywordsAnd">Keyword IDs, repeat for multiple. Return recipes with all of the keywords. (optional)</param>
        /// <param name="keywordsOrNot">Keyword IDs, repeat for multiple. Exclude recipes with any of the keywords. (optional)</param>
        /// <param name="keywordsAndNot">Keyword IDs, repeat for multiple. Exclude recipes with all of the keywords. (optional)</param>
        /// <param name="foods">ID of food a recipe should have. For multiple repeat parameter. (optional)</param>
        /// <param name="foodsOr">Food IDs, repeat for multiple. Return recipes with any of the foods (optional)</param>
        /// <param name="foodsAnd">Food IDs, repeat for multiple. Return recipes with all of the foods. (optional)</param>
        /// <param name="foodsOrNot">Food IDs, repeat for multiple. Exclude recipes with any of the foods. (optional)</param>
        /// <param name="foodsAndNot">Food IDs, repeat for multiple. Exclude recipes with all of the foods. (optional)</param>
        /// <param name="units">ID of unit a recipe should have. (optional)</param>
        /// <param name="rating">Rating a recipe should have or greater. [0 - 5] Negative value filters rating less than. (optional)</param>
        /// <param name="books">ID of book a recipe should be in. For multiple repeat parameter. (optional)</param>
        /// <param name="booksOr">Book IDs, repeat for multiple. Return recipes with any of the books (optional)</param>
        /// <param name="booksAnd">Book IDs, repeat for multiple. Return recipes with all of the books. (optional)</param>
        /// <param name="booksOrNot">Book IDs, repeat for multiple. Exclude recipes with any of the books. (optional)</param>
        /// <param name="booksAndNot">Book IDs, repeat for multiple. Exclude recipes with all of the books. (optional)</param>
        /// <param name="_internal">If only internal recipes should be returned. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="random">Returns the results in randomized order. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="_new">Returns new results first in search results. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="timescooked">Filter recipes cooked X times or more.  Negative values returns cooked less than X times (optional)</param>
        /// <param name="cookedon">Filter recipes last cooked on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="createdon">Filter recipes created on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="updatedon">Filter recipes updated on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="viewedon">Filter recipes lasts viewed on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="makenow">Filter recipes that can be made with OnHand food. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRecipes200Response</returns>
        ApiResponse<ListRecipes200Response> ListRecipesWithHttpInfo(string query = default(string), Int keywords = default(Int), Int keywordsOr = default(Int), Int keywordsAnd = default(Int), Int keywordsOrNot = default(Int), Int keywordsAndNot = default(Int), Int foods = default(Int), Int foodsOr = default(Int), Int foodsAnd = default(Int), Int foodsOrNot = default(Int), Int foodsAndNot = default(Int), Int units = default(Int), Int rating = default(Int), string books = default(string), Int booksOr = default(Int), Int booksAnd = default(Int), Int booksOrNot = default(Int), Int booksAndNot = default(Int), string _internal = default(string), string random = default(string), string _new = default(string), Int timescooked = default(Int), string cookedon = default(string), string createdon = default(string), string updatedon = default(string), string viewedon = default(string), string makenow = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Returns the shopping list entry with a primary key of id.  Multiple values allowed. (optional)</param>
        /// <param name="_checked">Filter shopping list entries on checked.  [true, false, both, &lt;b&gt;recent&lt;/b&gt;]&lt;br&gt;  - recent includes unchecked items and recently completed items. (optional)</param>
        /// <param name="supermarket">Returns the shopping list entries sorted by supermarket category order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShoppingListEntry&gt;</returns>
        List<ShoppingListEntry> ListShoppingListEntrys(Int id = default(Int), string _checked = default(string), Int supermarket = default(Int), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Returns the shopping list entry with a primary key of id.  Multiple values allowed. (optional)</param>
        /// <param name="_checked">Filter shopping list entries on checked.  [true, false, both, &lt;b&gt;recent&lt;/b&gt;]&lt;br&gt;  - recent includes unchecked items and recently completed items. (optional)</param>
        /// <param name="supermarket">Returns the shopping list entries sorted by supermarket category order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShoppingListEntry&gt;</returns>
        ApiResponse<List<ShoppingListEntry>> ListShoppingListEntrysWithHttpInfo(Int id = default(Int), string _checked = default(string), Int supermarket = default(Int), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShoppingListRecipe&gt;</returns>
        List<ShoppingListRecipe> ListShoppingListRecipes(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShoppingListRecipe&gt;</returns>
        ApiResponse<List<ShoppingListRecipe>> ListShoppingListRecipesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShoppingList&gt;</returns>
        List<ShoppingList> ListShoppingLists(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShoppingList&gt;</returns>
        ApiResponse<List<ShoppingList>> ListShoppingListsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Space&gt;</returns>
        List<Space> ListSpaces(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Space&gt;</returns>
        ApiResponse<List<Space>> ListSpacesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe">ID of recipe a step is part of. For multiple repeat parameter. (optional)</param>
        /// <param name="query">Query string matched (fuzzy) against object name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSteps200Response</returns>
        ListSteps200Response ListSteps(Int recipe = default(Int), string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe">ID of recipe a step is part of. For multiple repeat parameter. (optional)</param>
        /// <param name="query">Query string matched (fuzzy) against object name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSteps200Response</returns>
        ApiResponse<ListSteps200Response> ListStepsWithHttpInfo(Int recipe = default(Int), string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Storage&gt;</returns>
        List<Storage> ListStorages(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Storage&gt;</returns>
        ApiResponse<List<Storage>> ListStoragesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSupermarketCategoryRelations200Response</returns>
        ListSupermarketCategoryRelations200Response ListSupermarketCategoryRelations(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSupermarketCategoryRelations200Response</returns>
        ApiResponse<ListSupermarketCategoryRelations200Response> ListSupermarketCategoryRelationsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against supermarket-category name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SupermarketCategory&gt;</returns>
        List<SupermarketCategory> ListSupermarketCategorys(string query = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against supermarket-category name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SupermarketCategory&gt;</returns>
        ApiResponse<List<SupermarketCategory>> ListSupermarketCategorysWithHttpInfo(string query = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Supermarket&gt;</returns>
        List<Supermarket> ListSupermarkets(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Supermarket&gt;</returns>
        ApiResponse<List<Supermarket>> ListSupermarketsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSyncLogs200Response</returns>
        ListSyncLogs200Response ListSyncLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSyncLogs200Response</returns>
        ApiResponse<ListSyncLogs200Response> ListSyncLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Sync&gt;</returns>
        List<Sync> ListSyncs(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Sync&gt;</returns>
        ApiResponse<List<Sync>> ListSyncsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against unit name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUnits200Response</returns>
        ListUnits200Response ListUnits(string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against unit name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUnits200Response</returns>
        ApiResponse<ListUnits200Response> ListUnitsWithHttpInfo(string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserFile&gt;</returns>
        List<UserFile> ListUserFiles(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserFile&gt;</returns>
        ApiResponse<List<UserFile>> ListUserFilesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserPreference&gt;</returns>
        List<UserPreference> ListUserPreferences(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserPreference&gt;</returns>
        ApiResponse<List<UserPreference>> ListUserPreferencesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserSpace&gt;</returns>
        List<UserSpace> ListUserSpaces(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserSpace&gt;</returns>
        ApiResponse<List<UserSpace>> ListUserSpacesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **filter_list**: array of user id&#39;s to get names for
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> ListUsers(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **filter_list**: array of user id&#39;s to get names for
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> ListUsersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListViewLogs200Response</returns>
        ListViewLogs200Response ListViewLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListViewLogs200Response</returns>
        ApiResponse<ListViewLogs200Response> ListViewLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to reset inheritance from api, see food method for docs
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> ListresetFoodInheritances(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to reset inheritance from api, see food method for docs
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> ListresetFoodInheritancesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="target"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        Food MergeFood(string id, string target, Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="target"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        ApiResponse<Food> MergeFoodWithHttpInfo(string id, string target, Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="target"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        Keyword MergeKeyword(string id, string target, Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="target"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        ApiResponse<Keyword> MergeKeywordWithHttpInfo(string id, string target, Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="target"></param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        Unit MergeUnit(string id, string target, Unit unit = default(Unit), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="target"></param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        ApiResponse<Unit> MergeUnitWithHttpInfo(string id, string target, Unit unit = default(Unit), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="parent"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        Food MoveFood(string id, string parent, Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="parent"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        ApiResponse<Food> MoveFoodWithHttpInfo(string id, string parent, Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="parent"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        Keyword MoveKeyword(string id, string parent, Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="parent"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        ApiResponse<Keyword> MoveKeywordWithHttpInfo(string id, string parent, Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        AccessToken PartialUpdateAccessToken(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        ApiResponse<AccessToken> PartialUpdateAccessTokenWithHttpInfo(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        Automation PartialUpdateAutomation(string id, Automation automation = default(Automation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        ApiResponse<Automation> PartialUpdateAutomationWithHttpInfo(string id, Automation automation = default(Automation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkletImport</returns>
        BookmarkletImport PartialUpdateBookmarkletImport(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkletImport</returns>
        ApiResponse<BookmarkletImport> PartialUpdateBookmarkletImportWithHttpInfo(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CookLog</returns>
        CookLog PartialUpdateCookLog(string id, CookLog cookLog = default(CookLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CookLog</returns>
        ApiResponse<CookLog> PartialUpdateCookLogWithHttpInfo(string id, CookLog cookLog = default(CookLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFilter</returns>
        CustomFilter PartialUpdateCustomFilter(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFilter</returns>
        ApiResponse<CustomFilter> PartialUpdateCustomFilterWithHttpInfo(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLog</returns>
        ExportLog PartialUpdateExportLog(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLog</returns>
        ApiResponse<ExportLog> PartialUpdateExportLogWithHttpInfo(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        Food PartialUpdateFood(string id, Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        ApiResponse<Food> PartialUpdateFoodWithHttpInfo(string id, Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportLog</returns>
        ImportLog PartialUpdateImportLog(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportLog</returns>
        ApiResponse<ImportLog> PartialUpdateImportLogWithHttpInfo(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Ingredient</returns>
        Ingredient PartialUpdateIngredient(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Ingredient</returns>
        ApiResponse<Ingredient> PartialUpdateIngredientWithHttpInfo(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteLink</returns>
        InviteLink PartialUpdateInviteLink(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteLink</returns>
        ApiResponse<InviteLink> PartialUpdateInviteLinkWithHttpInfo(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        Keyword PartialUpdateKeyword(string id, Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        ApiResponse<Keyword> PartialUpdateKeywordWithHttpInfo(string id, Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealPlan</returns>
        MealPlan PartialUpdateMealPlan(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealPlan</returns>
        ApiResponse<MealPlan> PartialUpdateMealPlanWithHttpInfo(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealType</returns>
        MealType PartialUpdateMealType(string id, MealType mealType = default(MealType), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealType</returns>
        ApiResponse<MealType> PartialUpdateMealTypeWithHttpInfo(string id, MealType mealType = default(MealType), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Recipe</returns>
        Recipe PartialUpdateRecipe(string id, Recipe recipe = default(Recipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Recipe</returns>
        ApiResponse<Recipe> PartialUpdateRecipeWithHttpInfo(string id, Recipe recipe = default(Recipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBook</returns>
        RecipeBook PartialUpdateRecipeBook(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBook</returns>
        ApiResponse<RecipeBook> PartialUpdateRecipeBookWithHttpInfo(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBookEntry</returns>
        RecipeBookEntry PartialUpdateRecipeBookEntry(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBookEntry</returns>
        ApiResponse<RecipeBookEntry> PartialUpdateRecipeBookEntryWithHttpInfo(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingList</returns>
        ShoppingList PartialUpdateShoppingList(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingList</returns>
        ApiResponse<ShoppingList> PartialUpdateShoppingListWithHttpInfo(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListEntry</returns>
        ShoppingListEntry PartialUpdateShoppingListEntry(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListEntry</returns>
        ApiResponse<ShoppingListEntry> PartialUpdateShoppingListEntryWithHttpInfo(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListRecipe</returns>
        ShoppingListRecipe PartialUpdateShoppingListRecipe(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListRecipe</returns>
        ApiResponse<ShoppingListRecipe> PartialUpdateShoppingListRecipeWithHttpInfo(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="space"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Space</returns>
        Space PartialUpdateSpace(string id, Space space = default(Space), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="space"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Space</returns>
        ApiResponse<Space> PartialUpdateSpaceWithHttpInfo(string id, Space space = default(Space), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Step</returns>
        Step PartialUpdateStep(string id, Step step = default(Step), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Step</returns>
        ApiResponse<Step> PartialUpdateStepWithHttpInfo(string id, Step step = default(Step), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Storage</returns>
        Storage PartialUpdateStorage(string id, Storage storage = default(Storage), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Storage</returns>
        ApiResponse<Storage> PartialUpdateStorageWithHttpInfo(string id, Storage storage = default(Storage), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Supermarket</returns>
        Supermarket PartialUpdateSupermarket(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Supermarket</returns>
        ApiResponse<Supermarket> PartialUpdateSupermarketWithHttpInfo(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategory</returns>
        SupermarketCategory PartialUpdateSupermarketCategory(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategory</returns>
        ApiResponse<SupermarketCategory> PartialUpdateSupermarketCategoryWithHttpInfo(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategoryRelation</returns>
        SupermarketCategoryRelation PartialUpdateSupermarketCategoryRelation(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategoryRelation</returns>
        ApiResponse<SupermarketCategoryRelation> PartialUpdateSupermarketCategoryRelationWithHttpInfo(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Sync</returns>
        Sync PartialUpdateSync(string id, Sync sync = default(Sync), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Sync</returns>
        ApiResponse<Sync> PartialUpdateSyncWithHttpInfo(string id, Sync sync = default(Sync), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        Unit PartialUpdateUnit(string id, Unit unit = default(Unit), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        ApiResponse<Unit> PartialUpdateUnitWithHttpInfo(string id, Unit unit = default(Unit), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User PartialUpdateUser(string id, User user = default(User), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> PartialUpdateUserWithHttpInfo(string id, User user = default(User), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFile</returns>
        UserFile PartialUpdateUserFile(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFile</returns>
        ApiResponse<UserFile> PartialUpdateUserFileWithHttpInfo(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="userPreference"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserPreference</returns>
        UserPreference PartialUpdateUserPreference(string user, UserPreference userPreference = default(UserPreference), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="userPreference"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserPreference</returns>
        ApiResponse<UserPreference> PartialUpdateUserPreferenceWithHttpInfo(string user, UserPreference userPreference = default(UserPreference), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="userSpace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSpace</returns>
        UserSpace PartialUpdateUserSpace(string id, UserSpace userSpace = default(UserSpace), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="userSpace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSpace</returns>
        ApiResponse<UserSpace> PartialUpdateUserSpaceWithHttpInfo(string id, UserSpace userSpace = default(UserSpace), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewLog</returns>
        ViewLog PartialUpdateViewLog(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewLog</returns>
        ApiResponse<ViewLog> PartialUpdateViewLogWithHttpInfo(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeSimple</returns>
        RecipeSimple RelatedRecipe(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeSimple</returns>
        ApiResponse<RecipeSimple> RelatedRecipeWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        AccessToken RetrieveAccessToken(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        ApiResponse<AccessToken> RetrieveAccessTokenWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        Automation RetrieveAutomation(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        ApiResponse<Automation> RetrieveAutomationWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkletImport</returns>
        BookmarkletImport RetrieveBookmarkletImport(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkletImport</returns>
        ApiResponse<BookmarkletImport> RetrieveBookmarkletImportWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CookLog</returns>
        CookLog RetrieveCookLog(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CookLog</returns>
        ApiResponse<CookLog> RetrieveCookLogWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFilter</returns>
        CustomFilter RetrieveCustomFilter(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFilter</returns>
        ApiResponse<CustomFilter> RetrieveCustomFilterWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLog</returns>
        ExportLog RetrieveExportLog(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLog</returns>
        ApiResponse<ExportLog> RetrieveExportLogWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        Food RetrieveFood(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        ApiResponse<Food> RetrieveFoodWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food inherit field.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FoodInheritField</returns>
        FoodInheritField RetrieveFoodInheritField(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food inherit field.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FoodInheritField</returns>
        ApiResponse<FoodInheritField> RetrieveFoodInheritFieldWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        Group RetrieveGroup(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> RetrieveGroupWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportLog</returns>
        ImportLog RetrieveImportLog(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportLog</returns>
        ApiResponse<ImportLog> RetrieveImportLogWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Ingredient</returns>
        Ingredient RetrieveIngredient(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Ingredient</returns>
        ApiResponse<Ingredient> RetrieveIngredientWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteLink</returns>
        InviteLink RetrieveInviteLink(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteLink</returns>
        ApiResponse<InviteLink> RetrieveInviteLinkWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        Keyword RetrieveKeyword(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        ApiResponse<Keyword> RetrieveKeywordWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealPlan</returns>
        MealPlan RetrieveMealPlan(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealPlan</returns>
        ApiResponse<MealPlan> RetrieveMealPlanWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealType</returns>
        MealType RetrieveMealType(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealType</returns>
        ApiResponse<MealType> RetrieveMealTypeWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Recipe</returns>
        Recipe RetrieveRecipe(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Recipe</returns>
        ApiResponse<Recipe> RetrieveRecipeWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBook</returns>
        RecipeBook RetrieveRecipeBook(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBook</returns>
        ApiResponse<RecipeBook> RetrieveRecipeBookWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBookEntry</returns>
        RecipeBookEntry RetrieveRecipeBookEntry(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBookEntry</returns>
        ApiResponse<RecipeBookEntry> RetrieveRecipeBookEntryWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingList</returns>
        ShoppingList RetrieveShoppingList(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingList</returns>
        ApiResponse<ShoppingList> RetrieveShoppingListWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListEntry</returns>
        ShoppingListEntry RetrieveShoppingListEntry(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListEntry</returns>
        ApiResponse<ShoppingListEntry> RetrieveShoppingListEntryWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListRecipe</returns>
        ShoppingListRecipe RetrieveShoppingListRecipe(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListRecipe</returns>
        ApiResponse<ShoppingListRecipe> RetrieveShoppingListRecipeWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Space</returns>
        Space RetrieveSpace(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Space</returns>
        ApiResponse<Space> RetrieveSpaceWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Step</returns>
        Step RetrieveStep(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Step</returns>
        ApiResponse<Step> RetrieveStepWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Storage</returns>
        Storage RetrieveStorage(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Storage</returns>
        ApiResponse<Storage> RetrieveStorageWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Supermarket</returns>
        Supermarket RetrieveSupermarket(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Supermarket</returns>
        ApiResponse<Supermarket> RetrieveSupermarketWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategory</returns>
        SupermarketCategory RetrieveSupermarketCategory(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategory</returns>
        ApiResponse<SupermarketCategory> RetrieveSupermarketCategoryWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategoryRelation</returns>
        SupermarketCategoryRelation RetrieveSupermarketCategoryRelation(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategoryRelation</returns>
        ApiResponse<SupermarketCategoryRelation> RetrieveSupermarketCategoryRelationWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Sync</returns>
        Sync RetrieveSync(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Sync</returns>
        ApiResponse<Sync> RetrieveSyncWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SyncLog</returns>
        SyncLog RetrieveSyncLog(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SyncLog</returns>
        ApiResponse<SyncLog> RetrieveSyncLogWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        Unit RetrieveUnit(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        ApiResponse<Unit> RetrieveUnitWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User RetrieveUser(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> RetrieveUserWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFile</returns>
        UserFile RetrieveUserFile(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFile</returns>
        ApiResponse<UserFile> RetrieveUserFileWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserPreference</returns>
        UserPreference RetrieveUserPreference(string user, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserPreference</returns>
        ApiResponse<UserPreference> RetrieveUserPreferenceWithHttpInfo(string user, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSpace</returns>
        UserSpace RetrieveUserSpace(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSpace</returns>
        ApiResponse<UserSpace> RetrieveUserSpaceWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewLog</returns>
        ViewLog RetrieveViewLog(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewLog</returns>
        ApiResponse<ViewLog> RetrieveViewLogWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to download a user file securely (wrapping as zip to prevent any context based XSS problems) temporary solution until a real file manager is implemented
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RetrievedownloadFile(string fileId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to download a user file securely (wrapping as zip to prevent any context based XSS problems) temporary solution until a real file manager is implemented
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RetrievedownloadFileWithHttpInfo(string fileId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// api endpoint to switch space function
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RetrieveswitchActiveSpace(string spaceId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// api endpoint to switch space function
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RetrieveswitchActiveSpaceWithHttpInfo(string spaceId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="foodShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FoodShoppingUpdate</returns>
        FoodShoppingUpdate ShoppingFood(string id, FoodShoppingUpdate foodShoppingUpdate = default(FoodShoppingUpdate), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="foodShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FoodShoppingUpdate</returns>
        ApiResponse<FoodShoppingUpdate> ShoppingFoodWithHttpInfo(string id, FoodShoppingUpdate foodShoppingUpdate = default(FoodShoppingUpdate), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipeShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeShoppingUpdate</returns>
        RecipeShoppingUpdate ShoppingRecipe(string id, RecipeShoppingUpdate recipeShoppingUpdate = default(RecipeShoppingUpdate), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipeShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeShoppingUpdate</returns>
        ApiResponse<RecipeShoppingUpdate> ShoppingRecipeWithHttpInfo(string id, RecipeShoppingUpdate recipeShoppingUpdate = default(RecipeShoppingUpdate), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        AccessToken UpdateAccessToken(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        ApiResponse<AccessToken> UpdateAccessTokenWithHttpInfo(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        Automation UpdateAutomation(string id, Automation automation = default(Automation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        ApiResponse<Automation> UpdateAutomationWithHttpInfo(string id, Automation automation = default(Automation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkletImport</returns>
        BookmarkletImport UpdateBookmarkletImport(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkletImport</returns>
        ApiResponse<BookmarkletImport> UpdateBookmarkletImportWithHttpInfo(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CookLog</returns>
        CookLog UpdateCookLog(string id, CookLog cookLog = default(CookLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CookLog</returns>
        ApiResponse<CookLog> UpdateCookLogWithHttpInfo(string id, CookLog cookLog = default(CookLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFilter</returns>
        CustomFilter UpdateCustomFilter(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFilter</returns>
        ApiResponse<CustomFilter> UpdateCustomFilterWithHttpInfo(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLog</returns>
        ExportLog UpdateExportLog(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLog</returns>
        ApiResponse<ExportLog> UpdateExportLogWithHttpInfo(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        Food UpdateFood(string id, Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        ApiResponse<Food> UpdateFoodWithHttpInfo(string id, Food food = default(Food), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportLog</returns>
        ImportLog UpdateImportLog(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportLog</returns>
        ApiResponse<ImportLog> UpdateImportLogWithHttpInfo(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Ingredient</returns>
        Ingredient UpdateIngredient(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Ingredient</returns>
        ApiResponse<Ingredient> UpdateIngredientWithHttpInfo(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteLink</returns>
        InviteLink UpdateInviteLink(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteLink</returns>
        ApiResponse<InviteLink> UpdateInviteLinkWithHttpInfo(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        Keyword UpdateKeyword(string id, Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        ApiResponse<Keyword> UpdateKeywordWithHttpInfo(string id, Keyword keyword = default(Keyword), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealPlan</returns>
        MealPlan UpdateMealPlan(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealPlan</returns>
        ApiResponse<MealPlan> UpdateMealPlanWithHttpInfo(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealType</returns>
        MealType UpdateMealType(string id, MealType mealType = default(MealType), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealType</returns>
        ApiResponse<MealType> UpdateMealTypeWithHttpInfo(string id, MealType mealType = default(MealType), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Recipe</returns>
        Recipe UpdateRecipe(string id, Recipe recipe = default(Recipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Recipe</returns>
        ApiResponse<Recipe> UpdateRecipeWithHttpInfo(string id, Recipe recipe = default(Recipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBook</returns>
        RecipeBook UpdateRecipeBook(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBook</returns>
        ApiResponse<RecipeBook> UpdateRecipeBookWithHttpInfo(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBookEntry</returns>
        RecipeBookEntry UpdateRecipeBookEntry(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBookEntry</returns>
        ApiResponse<RecipeBookEntry> UpdateRecipeBookEntryWithHttpInfo(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingList</returns>
        ShoppingList UpdateShoppingList(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingList</returns>
        ApiResponse<ShoppingList> UpdateShoppingListWithHttpInfo(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListEntry</returns>
        ShoppingListEntry UpdateShoppingListEntry(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListEntry</returns>
        ApiResponse<ShoppingListEntry> UpdateShoppingListEntryWithHttpInfo(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListRecipe</returns>
        ShoppingListRecipe UpdateShoppingListRecipe(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListRecipe</returns>
        ApiResponse<ShoppingListRecipe> UpdateShoppingListRecipeWithHttpInfo(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Step</returns>
        Step UpdateStep(string id, Step step = default(Step), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Step</returns>
        ApiResponse<Step> UpdateStepWithHttpInfo(string id, Step step = default(Step), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Storage</returns>
        Storage UpdateStorage(string id, Storage storage = default(Storage), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Storage</returns>
        ApiResponse<Storage> UpdateStorageWithHttpInfo(string id, Storage storage = default(Storage), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Supermarket</returns>
        Supermarket UpdateSupermarket(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Supermarket</returns>
        ApiResponse<Supermarket> UpdateSupermarketWithHttpInfo(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategory</returns>
        SupermarketCategory UpdateSupermarketCategory(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategory</returns>
        ApiResponse<SupermarketCategory> UpdateSupermarketCategoryWithHttpInfo(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategoryRelation</returns>
        SupermarketCategoryRelation UpdateSupermarketCategoryRelation(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategoryRelation</returns>
        ApiResponse<SupermarketCategoryRelation> UpdateSupermarketCategoryRelationWithHttpInfo(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Sync</returns>
        Sync UpdateSync(string id, Sync sync = default(Sync), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Sync</returns>
        ApiResponse<Sync> UpdateSyncWithHttpInfo(string id, Sync sync = default(Sync), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        Unit UpdateUnit(string id, Unit unit = default(Unit), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        ApiResponse<Unit> UpdateUnitWithHttpInfo(string id, Unit unit = default(Unit), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFile</returns>
        UserFile UpdateUserFile(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFile</returns>
        ApiResponse<UserFile> UpdateUserFileWithHttpInfo(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewLog</returns>
        ViewLog UpdateViewLog(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewLog</returns>
        ApiResponse<ViewLog> UpdateViewLogWithHttpInfo(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0);
        #endregion Synchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        System.Threading.Tasks.Task<AccessToken> CreateAccessTokenAsync(AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessToken>> CreateAccessTokenWithHttpInfoAsync(AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        System.Threading.Tasks.Task<Automation> CreateAutomationAsync(Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Automation>> CreateAutomationWithHttpInfoAsync(Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkletImport</returns>
        System.Threading.Tasks.Task<BookmarkletImport> CreateBookmarkletImportAsync(BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkletImport)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookmarkletImport>> CreateBookmarkletImportWithHttpInfoAsync(BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CookLog</returns>
        System.Threading.Tasks.Task<CookLog> CreateCookLogAsync(CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CookLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<CookLog>> CreateCookLogWithHttpInfoAsync(CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFilter</returns>
        System.Threading.Tasks.Task<CustomFilter> CreateCustomFilterAsync(CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFilter>> CreateCustomFilterWithHttpInfoAsync(CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLog</returns>
        System.Threading.Tasks.Task<ExportLog> CreateExportLogAsync(ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportLog>> CreateExportLogWithHttpInfoAsync(ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        System.Threading.Tasks.Task<Food> CreateFoodAsync(Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        System.Threading.Tasks.Task<ApiResponse<Food>> CreateFoodWithHttpInfoAsync(Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportLog</returns>
        System.Threading.Tasks.Task<ImportLog> CreateImportLogAsync(ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportLog>> CreateImportLogWithHttpInfoAsync(ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ingredient</returns>
        System.Threading.Tasks.Task<Ingredient> CreateIngredientAsync(Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ingredient)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ingredient>> CreateIngredientWithHttpInfoAsync(Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteLink</returns>
        System.Threading.Tasks.Task<InviteLink> CreateInviteLinkAsync(InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteLink>> CreateInviteLinkWithHttpInfoAsync(InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        System.Threading.Tasks.Task<Keyword> CreateKeywordAsync(Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        System.Threading.Tasks.Task<ApiResponse<Keyword>> CreateKeywordWithHttpInfoAsync(Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealPlan</returns>
        System.Threading.Tasks.Task<MealPlan> CreateMealPlanAsync(MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<MealPlan>> CreateMealPlanWithHttpInfoAsync(MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealType</returns>
        System.Threading.Tasks.Task<MealType> CreateMealTypeAsync(MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealType)</returns>
        System.Threading.Tasks.Task<ApiResponse<MealType>> CreateMealTypeWithHttpInfoAsync(MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Recipe</returns>
        System.Threading.Tasks.Task<Recipe> CreateRecipeAsync(Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recipe>> CreateRecipeWithHttpInfoAsync(Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBook</returns>
        System.Threading.Tasks.Task<RecipeBook> CreateRecipeBookAsync(RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBook)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeBook>> CreateRecipeBookWithHttpInfoAsync(RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBookEntry</returns>
        System.Threading.Tasks.Task<RecipeBookEntry> CreateRecipeBookEntryAsync(RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBookEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeBookEntry>> CreateRecipeBookEntryWithHttpInfoAsync(RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingList</returns>
        System.Threading.Tasks.Task<ShoppingList> CreateShoppingListAsync(ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingList>> CreateShoppingListWithHttpInfoAsync(ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListEntry</returns>
        System.Threading.Tasks.Task<ShoppingListEntry> CreateShoppingListEntryAsync(ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingListEntry>> CreateShoppingListEntryWithHttpInfoAsync(ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListRecipe</returns>
        System.Threading.Tasks.Task<ShoppingListRecipe> CreateShoppingListRecipeAsync(ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListRecipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingListRecipe>> CreateShoppingListRecipeWithHttpInfoAsync(ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Step</returns>
        System.Threading.Tasks.Task<Step> CreateStepAsync(Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Step)</returns>
        System.Threading.Tasks.Task<ApiResponse<Step>> CreateStepWithHttpInfoAsync(Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Storage</returns>
        System.Threading.Tasks.Task<Storage> CreateStorageAsync(Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Storage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Storage>> CreateStorageWithHttpInfoAsync(Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Supermarket</returns>
        System.Threading.Tasks.Task<Supermarket> CreateSupermarketAsync(Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Supermarket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Supermarket>> CreateSupermarketWithHttpInfoAsync(Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategory</returns>
        System.Threading.Tasks.Task<SupermarketCategory> CreateSupermarketCategoryAsync(SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupermarketCategory>> CreateSupermarketCategoryWithHttpInfoAsync(SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategoryRelation</returns>
        System.Threading.Tasks.Task<SupermarketCategoryRelation> CreateSupermarketCategoryRelationAsync(SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategoryRelation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupermarketCategoryRelation>> CreateSupermarketCategoryRelationWithHttpInfoAsync(SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sync</returns>
        System.Threading.Tasks.Task<Sync> CreateSyncAsync(Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sync)</returns>
        System.Threading.Tasks.Task<ApiResponse<Sync>> CreateSyncWithHttpInfoAsync(Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        System.Threading.Tasks.Task<Unit> CreateUnitAsync(Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Unit>> CreateUnitWithHttpInfoAsync(Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFile</returns>
        System.Threading.Tasks.Task<UserFile> CreateUserFileAsync(string name, System.IO.Stream file, int? id = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFile>> CreateUserFileWithHttpInfoAsync(string name, System.IO.Stream file, int? id = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewLog</returns>
        System.Threading.Tasks.Task<ViewLog> CreateViewLogAsync(ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewLog>> CreateViewLogWithHttpInfoAsync(ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to handle files passed by application importer
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateimportFilesAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to handle files passed by application importer
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateimportFilesWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to retrieve a recipe from a given url or source string :param request: standard request with additional post parameters         - url: url to use for importing recipe         - data: if no url is given recipe is imported from provided source data         - (optional) bookmarklet: id of bookmarklet import to use, overrides URL and data attributes :return: JsonResponse containing the parsed json and images
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreaterecipeFromSourceAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to retrieve a recipe from a given url or source string :param request: standard request with additional post parameters         - url: url to use for importing recipe         - data: if no url is given recipe is imported from provided source data         - (optional) bookmarklet: id of bookmarklet import to use, overrides URL and data attributes :return: JsonResponse containing the parsed json and images
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreaterecipeFromSourceWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyAccessTokenAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyAccessTokenWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyAutomationAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyAutomationWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyBookmarkletImportAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyBookmarkletImportWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyCookLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyCookLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyCustomFilterAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyCustomFilterWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyExportLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyExportLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyFoodAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyFoodWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyImportLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyImportLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyIngredientAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyIngredientWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyInviteLinkAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyInviteLinkWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyKeywordAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyKeywordWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyMealPlanAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyMealPlanWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyMealTypeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyMealTypeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyRecipeBookAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyRecipeBookWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyRecipeBookEntryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyRecipeBookEntryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyShoppingListAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyShoppingListWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyShoppingListEntryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyShoppingListEntryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyShoppingListRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyShoppingListRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyStepAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyStepWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyStorageAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyStorageWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroySupermarketAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroySupermarketWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroySupermarketCategoryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroySupermarketCategoryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroySupermarketCategoryRelationAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroySupermarketCategoryRelationWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroySyncAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroySyncWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyUnitAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyUnitWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyUserFileAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyUserFileWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyUserSpaceAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyUserSpaceWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyViewLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyViewLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="image"> (optional)</param>
        /// <param name="imageUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeImage</returns>
        System.Threading.Tasks.Task<RecipeImage> ImageRecipeAsync(string id, System.IO.Stream image = default(System.IO.Stream), string imageUrl = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="image"> (optional)</param>
        /// <param name="imageUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeImage)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeImage>> ImageRecipeWithHttpInfoAsync(string id, System.IO.Stream image = default(System.IO.Stream), string imageUrl = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AccessToken&gt;</returns>
        System.Threading.Tasks.Task<List<AccessToken>> ListAccessTokensAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AccessToken&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AccessToken>>> ListAccessTokensWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Automation&gt;</returns>
        System.Threading.Tasks.Task<List<Automation>> ListAutomationsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Automation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Automation>>> ListAutomationsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BookmarkletImportList&gt;</returns>
        System.Threading.Tasks.Task<List<BookmarkletImportList>> ListBookmarkletImportsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BookmarkletImportList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BookmarkletImportList>>> ListBookmarkletImportsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCookLogs200Response</returns>
        System.Threading.Tasks.Task<ListCookLogs200Response> ListCookLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCookLogs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCookLogs200Response>> ListCookLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomFilter&gt;</returns>
        System.Threading.Tasks.Task<List<CustomFilter>> ListCustomFiltersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomFilter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomFilter>>> ListCustomFiltersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListExportLogs200Response</returns>
        System.Threading.Tasks.Task<ListExportLogs200Response> ListExportLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListExportLogs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListExportLogs200Response>> ListExportLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FoodInheritField&gt;</returns>
        System.Threading.Tasks.Task<List<FoodInheritField>> ListFoodInheritFieldsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FoodInheritField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FoodInheritField>>> ListFoodInheritFieldsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against food name. (optional)</param>
        /// <param name="root">Return first level children of food with ID [int].  Integer 0 will return root foods. (optional)</param>
        /// <param name="tree">Return all self and children of food with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFoods200Response</returns>
        System.Threading.Tasks.Task<ListFoods200Response> ListFoodsAsync(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against food name. (optional)</param>
        /// <param name="root">Return first level children of food with ID [int].  Integer 0 will return root foods. (optional)</param>
        /// <param name="tree">Return all self and children of food with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFoods200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFoods200Response>> ListFoodsWithHttpInfoAsync(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<List<Group>> ListGroupsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Group>>> ListGroupsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListImportLogs200Response</returns>
        System.Threading.Tasks.Task<ListImportLogs200Response> ListImportLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListImportLogs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListImportLogs200Response>> ListImportLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListIngredients200Response</returns>
        System.Threading.Tasks.Task<ListIngredients200Response> ListIngredientsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListIngredients200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListIngredients200Response>> ListIngredientsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InviteLink&gt;</returns>
        System.Threading.Tasks.Task<List<InviteLink>> ListInviteLinksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InviteLink&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InviteLink>>> ListInviteLinksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against keyword name. (optional)</param>
        /// <param name="root">Return first level children of keyword with ID [int].  Integer 0 will return root keywords. (optional)</param>
        /// <param name="tree">Return all self and children of keyword with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListKeywords200Response</returns>
        System.Threading.Tasks.Task<ListKeywords200Response> ListKeywordsAsync(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against keyword name. (optional)</param>
        /// <param name="root">Return first level children of keyword with ID [int].  Integer 0 will return root keywords. (optional)</param>
        /// <param name="tree">Return all self and children of keyword with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListKeywords200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListKeywords200Response>> ListKeywordsWithHttpInfoAsync(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **from_date**: filter from (inclusive) a certain date onward - **to_date**: filter upward to (inclusive) certain date
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MealPlan&gt;</returns>
        System.Threading.Tasks.Task<List<MealPlan>> ListMealPlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **from_date**: filter from (inclusive) a certain date onward - **to_date**: filter upward to (inclusive) certain date
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MealPlan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MealPlan>>> ListMealPlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MealType&gt;</returns>
        System.Threading.Tasks.Task<List<MealType>> ListMealTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MealType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MealType>>> ListMealTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **recipe**: id of recipe - only return books for that recipe - **book**: id of book - only return recipes in that book
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipeBookEntry&gt;</returns>
        System.Threading.Tasks.Task<List<RecipeBookEntry>> ListRecipeBookEntrysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **recipe**: id of recipe - only return books for that recipe - **book**: id of book - only return recipes in that book
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipeBookEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecipeBookEntry>>> ListRecipeBookEntrysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipeBook&gt;</returns>
        System.Threading.Tasks.Task<List<RecipeBook>> ListRecipeBooksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipeBook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecipeBook>>> ListRecipeBooksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched (fuzzy) against recipe name. In the future also fulltext search. (optional)</param>
        /// <param name="keywords">ID of keyword a recipe should have. For multiple repeat parameter. Equivalent to keywords_or (optional)</param>
        /// <param name="keywordsOr">Keyword IDs, repeat for multiple. Return recipes with any of the keywords (optional)</param>
        /// <param name="keywordsAnd">Keyword IDs, repeat for multiple. Return recipes with all of the keywords. (optional)</param>
        /// <param name="keywordsOrNot">Keyword IDs, repeat for multiple. Exclude recipes with any of the keywords. (optional)</param>
        /// <param name="keywordsAndNot">Keyword IDs, repeat for multiple. Exclude recipes with all of the keywords. (optional)</param>
        /// <param name="foods">ID of food a recipe should have. For multiple repeat parameter. (optional)</param>
        /// <param name="foodsOr">Food IDs, repeat for multiple. Return recipes with any of the foods (optional)</param>
        /// <param name="foodsAnd">Food IDs, repeat for multiple. Return recipes with all of the foods. (optional)</param>
        /// <param name="foodsOrNot">Food IDs, repeat for multiple. Exclude recipes with any of the foods. (optional)</param>
        /// <param name="foodsAndNot">Food IDs, repeat for multiple. Exclude recipes with all of the foods. (optional)</param>
        /// <param name="units">ID of unit a recipe should have. (optional)</param>
        /// <param name="rating">Rating a recipe should have or greater. [0 - 5] Negative value filters rating less than. (optional)</param>
        /// <param name="books">ID of book a recipe should be in. For multiple repeat parameter. (optional)</param>
        /// <param name="booksOr">Book IDs, repeat for multiple. Return recipes with any of the books (optional)</param>
        /// <param name="booksAnd">Book IDs, repeat for multiple. Return recipes with all of the books. (optional)</param>
        /// <param name="booksOrNot">Book IDs, repeat for multiple. Exclude recipes with any of the books. (optional)</param>
        /// <param name="booksAndNot">Book IDs, repeat for multiple. Exclude recipes with all of the books. (optional)</param>
        /// <param name="_internal">If only internal recipes should be returned. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="random">Returns the results in randomized order. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="_new">Returns new results first in search results. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="timescooked">Filter recipes cooked X times or more.  Negative values returns cooked less than X times (optional)</param>
        /// <param name="cookedon">Filter recipes last cooked on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="createdon">Filter recipes created on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="updatedon">Filter recipes updated on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="viewedon">Filter recipes lasts viewed on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="makenow">Filter recipes that can be made with OnHand food. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRecipes200Response</returns>
        System.Threading.Tasks.Task<ListRecipes200Response> ListRecipesAsync(string query = default(string), Int keywords = default(Int), Int keywordsOr = default(Int), Int keywordsAnd = default(Int), Int keywordsOrNot = default(Int), Int keywordsAndNot = default(Int), Int foods = default(Int), Int foodsOr = default(Int), Int foodsAnd = default(Int), Int foodsOrNot = default(Int), Int foodsAndNot = default(Int), Int units = default(Int), Int rating = default(Int), string books = default(string), Int booksOr = default(Int), Int booksAnd = default(Int), Int booksOrNot = default(Int), Int booksAndNot = default(Int), string _internal = default(string), string random = default(string), string _new = default(string), Int timescooked = default(Int), string cookedon = default(string), string createdon = default(string), string updatedon = default(string), string viewedon = default(string), string makenow = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched (fuzzy) against recipe name. In the future also fulltext search. (optional)</param>
        /// <param name="keywords">ID of keyword a recipe should have. For multiple repeat parameter. Equivalent to keywords_or (optional)</param>
        /// <param name="keywordsOr">Keyword IDs, repeat for multiple. Return recipes with any of the keywords (optional)</param>
        /// <param name="keywordsAnd">Keyword IDs, repeat for multiple. Return recipes with all of the keywords. (optional)</param>
        /// <param name="keywordsOrNot">Keyword IDs, repeat for multiple. Exclude recipes with any of the keywords. (optional)</param>
        /// <param name="keywordsAndNot">Keyword IDs, repeat for multiple. Exclude recipes with all of the keywords. (optional)</param>
        /// <param name="foods">ID of food a recipe should have. For multiple repeat parameter. (optional)</param>
        /// <param name="foodsOr">Food IDs, repeat for multiple. Return recipes with any of the foods (optional)</param>
        /// <param name="foodsAnd">Food IDs, repeat for multiple. Return recipes with all of the foods. (optional)</param>
        /// <param name="foodsOrNot">Food IDs, repeat for multiple. Exclude recipes with any of the foods. (optional)</param>
        /// <param name="foodsAndNot">Food IDs, repeat for multiple. Exclude recipes with all of the foods. (optional)</param>
        /// <param name="units">ID of unit a recipe should have. (optional)</param>
        /// <param name="rating">Rating a recipe should have or greater. [0 - 5] Negative value filters rating less than. (optional)</param>
        /// <param name="books">ID of book a recipe should be in. For multiple repeat parameter. (optional)</param>
        /// <param name="booksOr">Book IDs, repeat for multiple. Return recipes with any of the books (optional)</param>
        /// <param name="booksAnd">Book IDs, repeat for multiple. Return recipes with all of the books. (optional)</param>
        /// <param name="booksOrNot">Book IDs, repeat for multiple. Exclude recipes with any of the books. (optional)</param>
        /// <param name="booksAndNot">Book IDs, repeat for multiple. Exclude recipes with all of the books. (optional)</param>
        /// <param name="_internal">If only internal recipes should be returned. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="random">Returns the results in randomized order. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="_new">Returns new results first in search results. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="timescooked">Filter recipes cooked X times or more.  Negative values returns cooked less than X times (optional)</param>
        /// <param name="cookedon">Filter recipes last cooked on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="createdon">Filter recipes created on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="updatedon">Filter recipes updated on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="viewedon">Filter recipes lasts viewed on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="makenow">Filter recipes that can be made with OnHand food. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRecipes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRecipes200Response>> ListRecipesWithHttpInfoAsync(string query = default(string), Int keywords = default(Int), Int keywordsOr = default(Int), Int keywordsAnd = default(Int), Int keywordsOrNot = default(Int), Int keywordsAndNot = default(Int), Int foods = default(Int), Int foodsOr = default(Int), Int foodsAnd = default(Int), Int foodsOrNot = default(Int), Int foodsAndNot = default(Int), Int units = default(Int), Int rating = default(Int), string books = default(string), Int booksOr = default(Int), Int booksAnd = default(Int), Int booksOrNot = default(Int), Int booksAndNot = default(Int), string _internal = default(string), string random = default(string), string _new = default(string), Int timescooked = default(Int), string cookedon = default(string), string createdon = default(string), string updatedon = default(string), string viewedon = default(string), string makenow = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Returns the shopping list entry with a primary key of id.  Multiple values allowed. (optional)</param>
        /// <param name="_checked">Filter shopping list entries on checked.  [true, false, both, &lt;b&gt;recent&lt;/b&gt;]&lt;br&gt;  - recent includes unchecked items and recently completed items. (optional)</param>
        /// <param name="supermarket">Returns the shopping list entries sorted by supermarket category order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShoppingListEntry&gt;</returns>
        System.Threading.Tasks.Task<List<ShoppingListEntry>> ListShoppingListEntrysAsync(Int id = default(Int), string _checked = default(string), Int supermarket = default(Int), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Returns the shopping list entry with a primary key of id.  Multiple values allowed. (optional)</param>
        /// <param name="_checked">Filter shopping list entries on checked.  [true, false, both, &lt;b&gt;recent&lt;/b&gt;]&lt;br&gt;  - recent includes unchecked items and recently completed items. (optional)</param>
        /// <param name="supermarket">Returns the shopping list entries sorted by supermarket category order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShoppingListEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ShoppingListEntry>>> ListShoppingListEntrysWithHttpInfoAsync(Int id = default(Int), string _checked = default(string), Int supermarket = default(Int), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShoppingListRecipe&gt;</returns>
        System.Threading.Tasks.Task<List<ShoppingListRecipe>> ListShoppingListRecipesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShoppingListRecipe&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ShoppingListRecipe>>> ListShoppingListRecipesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShoppingList&gt;</returns>
        System.Threading.Tasks.Task<List<ShoppingList>> ListShoppingListsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShoppingList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ShoppingList>>> ListShoppingListsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Space&gt;</returns>
        System.Threading.Tasks.Task<List<Space>> ListSpacesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Space&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Space>>> ListSpacesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe">ID of recipe a step is part of. For multiple repeat parameter. (optional)</param>
        /// <param name="query">Query string matched (fuzzy) against object name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSteps200Response</returns>
        System.Threading.Tasks.Task<ListSteps200Response> ListStepsAsync(Int recipe = default(Int), string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe">ID of recipe a step is part of. For multiple repeat parameter. (optional)</param>
        /// <param name="query">Query string matched (fuzzy) against object name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSteps200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSteps200Response>> ListStepsWithHttpInfoAsync(Int recipe = default(Int), string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Storage&gt;</returns>
        System.Threading.Tasks.Task<List<Storage>> ListStoragesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Storage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Storage>>> ListStoragesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSupermarketCategoryRelations200Response</returns>
        System.Threading.Tasks.Task<ListSupermarketCategoryRelations200Response> ListSupermarketCategoryRelationsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSupermarketCategoryRelations200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSupermarketCategoryRelations200Response>> ListSupermarketCategoryRelationsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against supermarket-category name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SupermarketCategory&gt;</returns>
        System.Threading.Tasks.Task<List<SupermarketCategory>> ListSupermarketCategorysAsync(string query = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against supermarket-category name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SupermarketCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SupermarketCategory>>> ListSupermarketCategorysWithHttpInfoAsync(string query = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Supermarket&gt;</returns>
        System.Threading.Tasks.Task<List<Supermarket>> ListSupermarketsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Supermarket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Supermarket>>> ListSupermarketsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSyncLogs200Response</returns>
        System.Threading.Tasks.Task<ListSyncLogs200Response> ListSyncLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSyncLogs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSyncLogs200Response>> ListSyncLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Sync&gt;</returns>
        System.Threading.Tasks.Task<List<Sync>> ListSyncsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Sync&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Sync>>> ListSyncsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against unit name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUnits200Response</returns>
        System.Threading.Tasks.Task<ListUnits200Response> ListUnitsAsync(string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against unit name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUnits200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUnits200Response>> ListUnitsWithHttpInfoAsync(string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFile&gt;</returns>
        System.Threading.Tasks.Task<List<UserFile>> ListUserFilesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserFile>>> ListUserFilesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserPreference&gt;</returns>
        System.Threading.Tasks.Task<List<UserPreference>> ListUserPreferencesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserPreference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserPreference>>> ListUserPreferencesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserSpace&gt;</returns>
        System.Threading.Tasks.Task<List<UserSpace>> ListUserSpacesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserSpace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSpace>>> ListUserSpacesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **filter_list**: array of user id&#39;s to get names for
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> ListUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// optional parameters  - **filter_list**: array of user id&#39;s to get names for
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> ListUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListViewLogs200Response</returns>
        System.Threading.Tasks.Task<ListViewLogs200Response> ListViewLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListViewLogs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListViewLogs200Response>> ListViewLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to reset inheritance from api, see food method for docs
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> ListresetFoodInheritancesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to reset inheritance from api, see food method for docs
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> ListresetFoodInheritancesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="target"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        System.Threading.Tasks.Task<Food> MergeFoodAsync(string id, string target, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="target"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        System.Threading.Tasks.Task<ApiResponse<Food>> MergeFoodWithHttpInfoAsync(string id, string target, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="target"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        System.Threading.Tasks.Task<Keyword> MergeKeywordAsync(string id, string target, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="target"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        System.Threading.Tasks.Task<ApiResponse<Keyword>> MergeKeywordWithHttpInfoAsync(string id, string target, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="target"></param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        System.Threading.Tasks.Task<Unit> MergeUnitAsync(string id, string target, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="target"></param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Unit>> MergeUnitWithHttpInfoAsync(string id, string target, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="parent"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        System.Threading.Tasks.Task<Food> MoveFoodAsync(string id, string parent, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="parent"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        System.Threading.Tasks.Task<ApiResponse<Food>> MoveFoodWithHttpInfoAsync(string id, string parent, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="parent"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        System.Threading.Tasks.Task<Keyword> MoveKeywordAsync(string id, string parent, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="parent"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        System.Threading.Tasks.Task<ApiResponse<Keyword>> MoveKeywordWithHttpInfoAsync(string id, string parent, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        System.Threading.Tasks.Task<AccessToken> PartialUpdateAccessTokenAsync(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessToken>> PartialUpdateAccessTokenWithHttpInfoAsync(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        System.Threading.Tasks.Task<Automation> PartialUpdateAutomationAsync(string id, Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Automation>> PartialUpdateAutomationWithHttpInfoAsync(string id, Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkletImport</returns>
        System.Threading.Tasks.Task<BookmarkletImport> PartialUpdateBookmarkletImportAsync(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkletImport)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookmarkletImport>> PartialUpdateBookmarkletImportWithHttpInfoAsync(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CookLog</returns>
        System.Threading.Tasks.Task<CookLog> PartialUpdateCookLogAsync(string id, CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CookLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<CookLog>> PartialUpdateCookLogWithHttpInfoAsync(string id, CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFilter</returns>
        System.Threading.Tasks.Task<CustomFilter> PartialUpdateCustomFilterAsync(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFilter>> PartialUpdateCustomFilterWithHttpInfoAsync(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLog</returns>
        System.Threading.Tasks.Task<ExportLog> PartialUpdateExportLogAsync(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportLog>> PartialUpdateExportLogWithHttpInfoAsync(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        System.Threading.Tasks.Task<Food> PartialUpdateFoodAsync(string id, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        System.Threading.Tasks.Task<ApiResponse<Food>> PartialUpdateFoodWithHttpInfoAsync(string id, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportLog</returns>
        System.Threading.Tasks.Task<ImportLog> PartialUpdateImportLogAsync(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportLog>> PartialUpdateImportLogWithHttpInfoAsync(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ingredient</returns>
        System.Threading.Tasks.Task<Ingredient> PartialUpdateIngredientAsync(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ingredient)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ingredient>> PartialUpdateIngredientWithHttpInfoAsync(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteLink</returns>
        System.Threading.Tasks.Task<InviteLink> PartialUpdateInviteLinkAsync(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteLink>> PartialUpdateInviteLinkWithHttpInfoAsync(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        System.Threading.Tasks.Task<Keyword> PartialUpdateKeywordAsync(string id, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        System.Threading.Tasks.Task<ApiResponse<Keyword>> PartialUpdateKeywordWithHttpInfoAsync(string id, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealPlan</returns>
        System.Threading.Tasks.Task<MealPlan> PartialUpdateMealPlanAsync(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<MealPlan>> PartialUpdateMealPlanWithHttpInfoAsync(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealType</returns>
        System.Threading.Tasks.Task<MealType> PartialUpdateMealTypeAsync(string id, MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealType)</returns>
        System.Threading.Tasks.Task<ApiResponse<MealType>> PartialUpdateMealTypeWithHttpInfoAsync(string id, MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Recipe</returns>
        System.Threading.Tasks.Task<Recipe> PartialUpdateRecipeAsync(string id, Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recipe>> PartialUpdateRecipeWithHttpInfoAsync(string id, Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBook</returns>
        System.Threading.Tasks.Task<RecipeBook> PartialUpdateRecipeBookAsync(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBook)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeBook>> PartialUpdateRecipeBookWithHttpInfoAsync(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBookEntry</returns>
        System.Threading.Tasks.Task<RecipeBookEntry> PartialUpdateRecipeBookEntryAsync(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBookEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeBookEntry>> PartialUpdateRecipeBookEntryWithHttpInfoAsync(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingList</returns>
        System.Threading.Tasks.Task<ShoppingList> PartialUpdateShoppingListAsync(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingList>> PartialUpdateShoppingListWithHttpInfoAsync(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListEntry</returns>
        System.Threading.Tasks.Task<ShoppingListEntry> PartialUpdateShoppingListEntryAsync(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingListEntry>> PartialUpdateShoppingListEntryWithHttpInfoAsync(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListRecipe</returns>
        System.Threading.Tasks.Task<ShoppingListRecipe> PartialUpdateShoppingListRecipeAsync(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListRecipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingListRecipe>> PartialUpdateShoppingListRecipeWithHttpInfoAsync(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="space"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Space</returns>
        System.Threading.Tasks.Task<Space> PartialUpdateSpaceAsync(string id, Space space = default(Space), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="space"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Space)</returns>
        System.Threading.Tasks.Task<ApiResponse<Space>> PartialUpdateSpaceWithHttpInfoAsync(string id, Space space = default(Space), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Step</returns>
        System.Threading.Tasks.Task<Step> PartialUpdateStepAsync(string id, Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Step)</returns>
        System.Threading.Tasks.Task<ApiResponse<Step>> PartialUpdateStepWithHttpInfoAsync(string id, Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Storage</returns>
        System.Threading.Tasks.Task<Storage> PartialUpdateStorageAsync(string id, Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Storage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Storage>> PartialUpdateStorageWithHttpInfoAsync(string id, Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Supermarket</returns>
        System.Threading.Tasks.Task<Supermarket> PartialUpdateSupermarketAsync(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Supermarket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Supermarket>> PartialUpdateSupermarketWithHttpInfoAsync(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategory</returns>
        System.Threading.Tasks.Task<SupermarketCategory> PartialUpdateSupermarketCategoryAsync(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupermarketCategory>> PartialUpdateSupermarketCategoryWithHttpInfoAsync(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategoryRelation</returns>
        System.Threading.Tasks.Task<SupermarketCategoryRelation> PartialUpdateSupermarketCategoryRelationAsync(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategoryRelation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupermarketCategoryRelation>> PartialUpdateSupermarketCategoryRelationWithHttpInfoAsync(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sync</returns>
        System.Threading.Tasks.Task<Sync> PartialUpdateSyncAsync(string id, Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sync)</returns>
        System.Threading.Tasks.Task<ApiResponse<Sync>> PartialUpdateSyncWithHttpInfoAsync(string id, Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        System.Threading.Tasks.Task<Unit> PartialUpdateUnitAsync(string id, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Unit>> PartialUpdateUnitWithHttpInfoAsync(string id, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> PartialUpdateUserAsync(string id, User user = default(User), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> PartialUpdateUserWithHttpInfoAsync(string id, User user = default(User), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFile</returns>
        System.Threading.Tasks.Task<UserFile> PartialUpdateUserFileAsync(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFile>> PartialUpdateUserFileWithHttpInfoAsync(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="userPreference"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPreference</returns>
        System.Threading.Tasks.Task<UserPreference> PartialUpdateUserPreferenceAsync(string user, UserPreference userPreference = default(UserPreference), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="userPreference"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPreference>> PartialUpdateUserPreferenceWithHttpInfoAsync(string user, UserPreference userPreference = default(UserPreference), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="userSpace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSpace</returns>
        System.Threading.Tasks.Task<UserSpace> PartialUpdateUserSpaceAsync(string id, UserSpace userSpace = default(UserSpace), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="userSpace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSpace)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSpace>> PartialUpdateUserSpaceWithHttpInfoAsync(string id, UserSpace userSpace = default(UserSpace), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewLog</returns>
        System.Threading.Tasks.Task<ViewLog> PartialUpdateViewLogAsync(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewLog>> PartialUpdateViewLogWithHttpInfoAsync(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeSimple</returns>
        System.Threading.Tasks.Task<RecipeSimple> RelatedRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeSimple)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeSimple>> RelatedRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        System.Threading.Tasks.Task<AccessToken> RetrieveAccessTokenAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessToken>> RetrieveAccessTokenWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        System.Threading.Tasks.Task<Automation> RetrieveAutomationAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Automation>> RetrieveAutomationWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkletImport</returns>
        System.Threading.Tasks.Task<BookmarkletImport> RetrieveBookmarkletImportAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkletImport)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookmarkletImport>> RetrieveBookmarkletImportWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CookLog</returns>
        System.Threading.Tasks.Task<CookLog> RetrieveCookLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CookLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<CookLog>> RetrieveCookLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFilter</returns>
        System.Threading.Tasks.Task<CustomFilter> RetrieveCustomFilterAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFilter>> RetrieveCustomFilterWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLog</returns>
        System.Threading.Tasks.Task<ExportLog> RetrieveExportLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportLog>> RetrieveExportLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        System.Threading.Tasks.Task<Food> RetrieveFoodAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        System.Threading.Tasks.Task<ApiResponse<Food>> RetrieveFoodWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food inherit field.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FoodInheritField</returns>
        System.Threading.Tasks.Task<FoodInheritField> RetrieveFoodInheritFieldAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food inherit field.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FoodInheritField)</returns>
        System.Threading.Tasks.Task<ApiResponse<FoodInheritField>> RetrieveFoodInheritFieldWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> RetrieveGroupAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> RetrieveGroupWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportLog</returns>
        System.Threading.Tasks.Task<ImportLog> RetrieveImportLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportLog>> RetrieveImportLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ingredient</returns>
        System.Threading.Tasks.Task<Ingredient> RetrieveIngredientAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ingredient)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ingredient>> RetrieveIngredientWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteLink</returns>
        System.Threading.Tasks.Task<InviteLink> RetrieveInviteLinkAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteLink>> RetrieveInviteLinkWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        System.Threading.Tasks.Task<Keyword> RetrieveKeywordAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        System.Threading.Tasks.Task<ApiResponse<Keyword>> RetrieveKeywordWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealPlan</returns>
        System.Threading.Tasks.Task<MealPlan> RetrieveMealPlanAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<MealPlan>> RetrieveMealPlanWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealType</returns>
        System.Threading.Tasks.Task<MealType> RetrieveMealTypeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealType)</returns>
        System.Threading.Tasks.Task<ApiResponse<MealType>> RetrieveMealTypeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Recipe</returns>
        System.Threading.Tasks.Task<Recipe> RetrieveRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recipe>> RetrieveRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBook</returns>
        System.Threading.Tasks.Task<RecipeBook> RetrieveRecipeBookAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBook)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeBook>> RetrieveRecipeBookWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBookEntry</returns>
        System.Threading.Tasks.Task<RecipeBookEntry> RetrieveRecipeBookEntryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBookEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeBookEntry>> RetrieveRecipeBookEntryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingList</returns>
        System.Threading.Tasks.Task<ShoppingList> RetrieveShoppingListAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingList>> RetrieveShoppingListWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListEntry</returns>
        System.Threading.Tasks.Task<ShoppingListEntry> RetrieveShoppingListEntryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingListEntry>> RetrieveShoppingListEntryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListRecipe</returns>
        System.Threading.Tasks.Task<ShoppingListRecipe> RetrieveShoppingListRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListRecipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingListRecipe>> RetrieveShoppingListRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Space</returns>
        System.Threading.Tasks.Task<Space> RetrieveSpaceAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Space)</returns>
        System.Threading.Tasks.Task<ApiResponse<Space>> RetrieveSpaceWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Step</returns>
        System.Threading.Tasks.Task<Step> RetrieveStepAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Step)</returns>
        System.Threading.Tasks.Task<ApiResponse<Step>> RetrieveStepWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Storage</returns>
        System.Threading.Tasks.Task<Storage> RetrieveStorageAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Storage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Storage>> RetrieveStorageWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Supermarket</returns>
        System.Threading.Tasks.Task<Supermarket> RetrieveSupermarketAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Supermarket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Supermarket>> RetrieveSupermarketWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategory</returns>
        System.Threading.Tasks.Task<SupermarketCategory> RetrieveSupermarketCategoryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupermarketCategory>> RetrieveSupermarketCategoryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategoryRelation</returns>
        System.Threading.Tasks.Task<SupermarketCategoryRelation> RetrieveSupermarketCategoryRelationAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategoryRelation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupermarketCategoryRelation>> RetrieveSupermarketCategoryRelationWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sync</returns>
        System.Threading.Tasks.Task<Sync> RetrieveSyncAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sync)</returns>
        System.Threading.Tasks.Task<ApiResponse<Sync>> RetrieveSyncWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncLog</returns>
        System.Threading.Tasks.Task<SyncLog> RetrieveSyncLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyncLog>> RetrieveSyncLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        System.Threading.Tasks.Task<Unit> RetrieveUnitAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Unit>> RetrieveUnitWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> RetrieveUserAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> RetrieveUserWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFile</returns>
        System.Threading.Tasks.Task<UserFile> RetrieveUserFileAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFile>> RetrieveUserFileWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPreference</returns>
        System.Threading.Tasks.Task<UserPreference> RetrieveUserPreferenceAsync(string user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPreference>> RetrieveUserPreferenceWithHttpInfoAsync(string user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSpace</returns>
        System.Threading.Tasks.Task<UserSpace> RetrieveUserSpaceAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSpace)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSpace>> RetrieveUserSpaceWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewLog</returns>
        System.Threading.Tasks.Task<ViewLog> RetrieveViewLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewLog>> RetrieveViewLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to download a user file securely (wrapping as zip to prevent any context based XSS problems) temporary solution until a real file manager is implemented
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RetrievedownloadFileAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// function to download a user file securely (wrapping as zip to prevent any context based XSS problems) temporary solution until a real file manager is implemented
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RetrievedownloadFileWithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// api endpoint to switch space function
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RetrieveswitchActiveSpaceAsync(string spaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// api endpoint to switch space function
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RetrieveswitchActiveSpaceWithHttpInfoAsync(string spaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="foodShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FoodShoppingUpdate</returns>
        System.Threading.Tasks.Task<FoodShoppingUpdate> ShoppingFoodAsync(string id, FoodShoppingUpdate foodShoppingUpdate = default(FoodShoppingUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="foodShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FoodShoppingUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<FoodShoppingUpdate>> ShoppingFoodWithHttpInfoAsync(string id, FoodShoppingUpdate foodShoppingUpdate = default(FoodShoppingUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipeShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeShoppingUpdate</returns>
        System.Threading.Tasks.Task<RecipeShoppingUpdate> ShoppingRecipeAsync(string id, RecipeShoppingUpdate recipeShoppingUpdate = default(RecipeShoppingUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipeShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeShoppingUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeShoppingUpdate>> ShoppingRecipeWithHttpInfoAsync(string id, RecipeShoppingUpdate recipeShoppingUpdate = default(RecipeShoppingUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        System.Threading.Tasks.Task<AccessToken> UpdateAccessTokenAsync(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessToken>> UpdateAccessTokenWithHttpInfoAsync(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        System.Threading.Tasks.Task<Automation> UpdateAutomationAsync(string id, Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Automation>> UpdateAutomationWithHttpInfoAsync(string id, Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkletImport</returns>
        System.Threading.Tasks.Task<BookmarkletImport> UpdateBookmarkletImportAsync(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkletImport)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookmarkletImport>> UpdateBookmarkletImportWithHttpInfoAsync(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CookLog</returns>
        System.Threading.Tasks.Task<CookLog> UpdateCookLogAsync(string id, CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CookLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<CookLog>> UpdateCookLogWithHttpInfoAsync(string id, CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFilter</returns>
        System.Threading.Tasks.Task<CustomFilter> UpdateCustomFilterAsync(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFilter>> UpdateCustomFilterWithHttpInfoAsync(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLog</returns>
        System.Threading.Tasks.Task<ExportLog> UpdateExportLogAsync(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportLog>> UpdateExportLogWithHttpInfoAsync(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        System.Threading.Tasks.Task<Food> UpdateFoodAsync(string id, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        System.Threading.Tasks.Task<ApiResponse<Food>> UpdateFoodWithHttpInfoAsync(string id, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportLog</returns>
        System.Threading.Tasks.Task<ImportLog> UpdateImportLogAsync(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportLog>> UpdateImportLogWithHttpInfoAsync(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ingredient</returns>
        System.Threading.Tasks.Task<Ingredient> UpdateIngredientAsync(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ingredient)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ingredient>> UpdateIngredientWithHttpInfoAsync(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteLink</returns>
        System.Threading.Tasks.Task<InviteLink> UpdateInviteLinkAsync(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteLink>> UpdateInviteLinkWithHttpInfoAsync(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        System.Threading.Tasks.Task<Keyword> UpdateKeywordAsync(string id, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        System.Threading.Tasks.Task<ApiResponse<Keyword>> UpdateKeywordWithHttpInfoAsync(string id, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealPlan</returns>
        System.Threading.Tasks.Task<MealPlan> UpdateMealPlanAsync(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<MealPlan>> UpdateMealPlanWithHttpInfoAsync(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealType</returns>
        System.Threading.Tasks.Task<MealType> UpdateMealTypeAsync(string id, MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns list of meal types created by the requesting user ordered by the order field.
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealType)</returns>
        System.Threading.Tasks.Task<ApiResponse<MealType>> UpdateMealTypeWithHttpInfoAsync(string id, MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Recipe</returns>
        System.Threading.Tasks.Task<Recipe> UpdateRecipeAsync(string id, Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recipe>> UpdateRecipeWithHttpInfoAsync(string id, Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBook</returns>
        System.Threading.Tasks.Task<RecipeBook> UpdateRecipeBookAsync(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBook)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeBook>> UpdateRecipeBookWithHttpInfoAsync(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBookEntry</returns>
        System.Threading.Tasks.Task<RecipeBookEntry> UpdateRecipeBookEntryAsync(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBookEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipeBookEntry>> UpdateRecipeBookEntryWithHttpInfoAsync(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingList</returns>
        System.Threading.Tasks.Task<ShoppingList> UpdateShoppingListAsync(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingList>> UpdateShoppingListWithHttpInfoAsync(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListEntry</returns>
        System.Threading.Tasks.Task<ShoppingListEntry> UpdateShoppingListEntryAsync(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingListEntry>> UpdateShoppingListEntryWithHttpInfoAsync(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListRecipe</returns>
        System.Threading.Tasks.Task<ShoppingListRecipe> UpdateShoppingListRecipeAsync(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListRecipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShoppingListRecipe>> UpdateShoppingListRecipeWithHttpInfoAsync(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Step</returns>
        System.Threading.Tasks.Task<Step> UpdateStepAsync(string id, Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Step)</returns>
        System.Threading.Tasks.Task<ApiResponse<Step>> UpdateStepWithHttpInfoAsync(string id, Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Storage</returns>
        System.Threading.Tasks.Task<Storage> UpdateStorageAsync(string id, Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Storage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Storage>> UpdateStorageWithHttpInfoAsync(string id, Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Supermarket</returns>
        System.Threading.Tasks.Task<Supermarket> UpdateSupermarketAsync(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Supermarket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Supermarket>> UpdateSupermarketWithHttpInfoAsync(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategory</returns>
        System.Threading.Tasks.Task<SupermarketCategory> UpdateSupermarketCategoryAsync(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupermarketCategory>> UpdateSupermarketCategoryWithHttpInfoAsync(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategoryRelation</returns>
        System.Threading.Tasks.Task<SupermarketCategoryRelation> UpdateSupermarketCategoryRelationAsync(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategoryRelation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupermarketCategoryRelation>> UpdateSupermarketCategoryRelationWithHttpInfoAsync(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sync</returns>
        System.Threading.Tasks.Task<Sync> UpdateSyncAsync(string id, Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sync)</returns>
        System.Threading.Tasks.Task<ApiResponse<Sync>> UpdateSyncWithHttpInfoAsync(string id, Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        System.Threading.Tasks.Task<Unit> UpdateUnitAsync(string id, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Unit>> UpdateUnitWithHttpInfoAsync(string id, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFile</returns>
        System.Threading.Tasks.Task<UserFile> UpdateUserFileAsync(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFile>> UpdateUserFileWithHttpInfoAsync(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewLog</returns>
        System.Threading.Tasks.Task<ViewLog> UpdateViewLogAsync(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewLog>> UpdateViewLogWithHttpInfoAsync(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiApi : IApiApiSync, IApiApiAsync
    {
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiApi : IApiApi
    {
        private fetchkptncook.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiApi() : this((string)null)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiApi(string basePath)
        {
            this.Configuration = fetchkptncook.Client.Configuration.MergeConfigurations(
                fetchkptncook.Client.GlobalConfiguration.Instance,
                new fetchkptncook.Client.Configuration { BasePath = basePath }
            );
            this.Client = new fetchkptncook.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new fetchkptncook.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = fetchkptncook.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiApi(fetchkptncook.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            this.Configuration = fetchkptncook.Client.Configuration.MergeConfigurations(
                fetchkptncook.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new fetchkptncook.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new fetchkptncook.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = fetchkptncook.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApiApi(fetchkptncook.Client.ISynchronousClient client, fetchkptncook.Client.IAsynchronousClient asyncClient, fetchkptncook.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");
            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = fetchkptncook.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public fetchkptncook.Client.IAsynchronousClient AsynchronousClient { get; set; }
        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public fetchkptncook.Client.ISynchronousClient Client { get; set; }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public fetchkptncook.Client.IReadableConfiguration Configuration { get; set; }
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public fetchkptncook.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        public AccessToken CreateAccessToken(AccessToken accessToken = default(AccessToken), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<AccessToken> localVarResponse = CreateAccessTokenWithHttpInfo(accessToken);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        public fetchkptncook.Client.ApiResponse<AccessToken> CreateAccessTokenWithHttpInfo(AccessToken accessToken = default(AccessToken), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = accessToken;
            localVarRequestOptions.Operation = "ApiApi.CreateAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<AccessToken>("/api/access-token/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        public async System.Threading.Tasks.Task<AccessToken> CreateAccessTokenAsync(AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<AccessToken> localVarResponse = await CreateAccessTokenWithHttpInfoAsync(accessToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<AccessToken>> CreateAccessTokenWithHttpInfoAsync(AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = accessToken;
            localVarRequestOptions.Operation = "ApiApi.CreateAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccessToken>("/api/access-token/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        public Automation CreateAutomation(Automation automation = default(Automation), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Automation> localVarResponse = CreateAutomationWithHttpInfo(automation);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        public fetchkptncook.Client.ApiResponse<Automation> CreateAutomationWithHttpInfo(Automation automation = default(Automation), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = automation;
            localVarRequestOptions.Operation = "ApiApi.CreateAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Automation>("/api/automation/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        public async System.Threading.Tasks.Task<Automation> CreateAutomationAsync(Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Automation> localVarResponse = await CreateAutomationWithHttpInfoAsync(automation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Automation>> CreateAutomationWithHttpInfoAsync(Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = automation;
            localVarRequestOptions.Operation = "ApiApi.CreateAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Automation>("/api/automation/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkletImport</returns>
        public BookmarkletImport CreateBookmarkletImport(BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<BookmarkletImport> localVarResponse = CreateBookmarkletImportWithHttpInfo(bookmarkletImport);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkletImport</returns>
        public fetchkptncook.Client.ApiResponse<BookmarkletImport> CreateBookmarkletImportWithHttpInfo(BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = bookmarkletImport;
            localVarRequestOptions.Operation = "ApiApi.CreateBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<BookmarkletImport>("/api/bookmarklet-import/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkletImport</returns>
        public async System.Threading.Tasks.Task<BookmarkletImport> CreateBookmarkletImportAsync(BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<BookmarkletImport> localVarResponse = await CreateBookmarkletImportWithHttpInfoAsync(bookmarkletImport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkletImport)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<BookmarkletImport>> CreateBookmarkletImportWithHttpInfoAsync(BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = bookmarkletImport;
            localVarRequestOptions.Operation = "ApiApi.CreateBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BookmarkletImport>("/api/bookmarklet-import/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CookLog</returns>
        public CookLog CreateCookLog(CookLog cookLog = default(CookLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<CookLog> localVarResponse = CreateCookLogWithHttpInfo(cookLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CookLog</returns>
        public fetchkptncook.Client.ApiResponse<CookLog> CreateCookLogWithHttpInfo(CookLog cookLog = default(CookLog), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = cookLog;
            localVarRequestOptions.Operation = "ApiApi.CreateCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<CookLog>("/api/cook-log/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CookLog</returns>
        public async System.Threading.Tasks.Task<CookLog> CreateCookLogAsync(CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<CookLog> localVarResponse = await CreateCookLogWithHttpInfoAsync(cookLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CookLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<CookLog>> CreateCookLogWithHttpInfoAsync(CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = cookLog;
            localVarRequestOptions.Operation = "ApiApi.CreateCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CookLog>("/api/cook-log/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFilter</returns>
        public CustomFilter CreateCustomFilter(CustomFilter customFilter = default(CustomFilter), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<CustomFilter> localVarResponse = CreateCustomFilterWithHttpInfo(customFilter);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFilter</returns>
        public fetchkptncook.Client.ApiResponse<CustomFilter> CreateCustomFilterWithHttpInfo(CustomFilter customFilter = default(CustomFilter), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = customFilter;
            localVarRequestOptions.Operation = "ApiApi.CreateCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomFilter>("/api/custom-filter/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFilter</returns>
        public async System.Threading.Tasks.Task<CustomFilter> CreateCustomFilterAsync(CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<CustomFilter> localVarResponse = await CreateCustomFilterWithHttpInfoAsync(customFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFilter)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<CustomFilter>> CreateCustomFilterWithHttpInfoAsync(CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = customFilter;
            localVarRequestOptions.Operation = "ApiApi.CreateCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomFilter>("/api/custom-filter/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLog</returns>
        public ExportLog CreateExportLog(ExportLog exportLog = default(ExportLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ExportLog> localVarResponse = CreateExportLogWithHttpInfo(exportLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLog</returns>
        public fetchkptncook.Client.ApiResponse<ExportLog> CreateExportLogWithHttpInfo(ExportLog exportLog = default(ExportLog), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = exportLog;
            localVarRequestOptions.Operation = "ApiApi.CreateExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<ExportLog>("/api/export-log/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLog</returns>
        public async System.Threading.Tasks.Task<ExportLog> CreateExportLogAsync(ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ExportLog> localVarResponse = await CreateExportLogWithHttpInfoAsync(exportLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ExportLog>> CreateExportLogWithHttpInfoAsync(ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = exportLog;
            localVarRequestOptions.Operation = "ApiApi.CreateExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExportLog>("/api/export-log/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        public Food CreateFood(Food food = default(Food), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = CreateFoodWithHttpInfo(food);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        public fetchkptncook.Client.ApiResponse<Food> CreateFoodWithHttpInfo(Food food = default(Food), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.CreateFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Food>("/api/food/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        public async System.Threading.Tasks.Task<Food> CreateFoodAsync(Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = await CreateFoodWithHttpInfoAsync(food, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Food>> CreateFoodWithHttpInfoAsync(Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.CreateFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Food>("/api/food/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportLog</returns>
        public ImportLog CreateImportLog(ImportLog importLog = default(ImportLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ImportLog> localVarResponse = CreateImportLogWithHttpInfo(importLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportLog</returns>
        public fetchkptncook.Client.ApiResponse<ImportLog> CreateImportLogWithHttpInfo(ImportLog importLog = default(ImportLog), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = importLog;
            localVarRequestOptions.Operation = "ApiApi.CreateImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<ImportLog>("/api/import-log/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportLog</returns>
        public async System.Threading.Tasks.Task<ImportLog> CreateImportLogAsync(ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ImportLog> localVarResponse = await CreateImportLogWithHttpInfoAsync(importLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ImportLog>> CreateImportLogWithHttpInfoAsync(ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = importLog;
            localVarRequestOptions.Operation = "ApiApi.CreateImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImportLog>("/api/import-log/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Ingredient</returns>
        public Ingredient CreateIngredient(Ingredient ingredient = default(Ingredient), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Ingredient> localVarResponse = CreateIngredientWithHttpInfo(ingredient);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Ingredient</returns>
        public fetchkptncook.Client.ApiResponse<Ingredient> CreateIngredientWithHttpInfo(Ingredient ingredient = default(Ingredient), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = ingredient;
            localVarRequestOptions.Operation = "ApiApi.CreateIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Ingredient>("/api/ingredient/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ingredient</returns>
        public async System.Threading.Tasks.Task<Ingredient> CreateIngredientAsync(Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Ingredient> localVarResponse = await CreateIngredientWithHttpInfoAsync(ingredient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ingredient)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Ingredient>> CreateIngredientWithHttpInfoAsync(Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = ingredient;
            localVarRequestOptions.Operation = "ApiApi.CreateIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Ingredient>("/api/ingredient/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteLink</returns>
        public InviteLink CreateInviteLink(InviteLink inviteLink = default(InviteLink), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<InviteLink> localVarResponse = CreateInviteLinkWithHttpInfo(inviteLink);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteLink</returns>
        public fetchkptncook.Client.ApiResponse<InviteLink> CreateInviteLinkWithHttpInfo(InviteLink inviteLink = default(InviteLink), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = inviteLink;
            localVarRequestOptions.Operation = "ApiApi.CreateInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<InviteLink>("/api/invite-link/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteLink</returns>
        public async System.Threading.Tasks.Task<InviteLink> CreateInviteLinkAsync(InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<InviteLink> localVarResponse = await CreateInviteLinkWithHttpInfoAsync(inviteLink, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteLink)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<InviteLink>> CreateInviteLinkWithHttpInfoAsync(InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = inviteLink;
            localVarRequestOptions.Operation = "ApiApi.CreateInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InviteLink>("/api/invite-link/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        public Keyword CreateKeyword(Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = CreateKeywordWithHttpInfo(keyword);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        public fetchkptncook.Client.ApiResponse<Keyword> CreateKeywordWithHttpInfo(Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.CreateKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Keyword>("/api/keyword/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        public async System.Threading.Tasks.Task<Keyword> CreateKeywordAsync(Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = await CreateKeywordWithHttpInfoAsync(keyword, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Keyword>> CreateKeywordWithHttpInfoAsync(Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.CreateKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Keyword>("/api/keyword/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealPlan</returns>
        public MealPlan CreateMealPlan(MealPlan mealPlan = default(MealPlan), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<MealPlan> localVarResponse = CreateMealPlanWithHttpInfo(mealPlan);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealPlan</returns>
        public fetchkptncook.Client.ApiResponse<MealPlan> CreateMealPlanWithHttpInfo(MealPlan mealPlan = default(MealPlan), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = mealPlan;
            localVarRequestOptions.Operation = "ApiApi.CreateMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<MealPlan>("/api/meal-plan/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealPlan</returns>
        public async System.Threading.Tasks.Task<MealPlan> CreateMealPlanAsync(MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<MealPlan> localVarResponse = await CreateMealPlanWithHttpInfoAsync(mealPlan, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealPlan)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<MealPlan>> CreateMealPlanWithHttpInfoAsync(MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = mealPlan;
            localVarRequestOptions.Operation = "ApiApi.CreateMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MealPlan>("/api/meal-plan/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealType</returns>
        public MealType CreateMealType(MealType mealType = default(MealType), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<MealType> localVarResponse = CreateMealTypeWithHttpInfo(mealType);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealType</returns>
        public fetchkptncook.Client.ApiResponse<MealType> CreateMealTypeWithHttpInfo(MealType mealType = default(MealType), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = mealType;
            localVarRequestOptions.Operation = "ApiApi.CreateMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<MealType>("/api/meal-type/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealType</returns>
        public async System.Threading.Tasks.Task<MealType> CreateMealTypeAsync(MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<MealType> localVarResponse = await CreateMealTypeWithHttpInfoAsync(mealType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealType)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<MealType>> CreateMealTypeWithHttpInfoAsync(MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = mealType;
            localVarRequestOptions.Operation = "ApiApi.CreateMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MealType>("/api/meal-type/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Recipe</returns>
        public Recipe CreateRecipe(Recipe recipe = default(Recipe), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Recipe> localVarResponse = CreateRecipeWithHttpInfo(recipe);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Recipe</returns>
        public fetchkptncook.Client.ApiResponse<Recipe> CreateRecipeWithHttpInfo(Recipe recipe = default(Recipe), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = recipe;
            localVarRequestOptions.Operation = "ApiApi.CreateRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Recipe>("/api/recipe/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Recipe</returns>
        public async System.Threading.Tasks.Task<Recipe> CreateRecipeAsync(Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Recipe> localVarResponse = await CreateRecipeWithHttpInfoAsync(recipe, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Recipe>> CreateRecipeWithHttpInfoAsync(Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = recipe;
            localVarRequestOptions.Operation = "ApiApi.CreateRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Recipe>("/api/recipe/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBook</returns>
        public RecipeBook CreateRecipeBook(RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeBook> localVarResponse = CreateRecipeBookWithHttpInfo(recipeBook);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBook</returns>
        public fetchkptncook.Client.ApiResponse<RecipeBook> CreateRecipeBookWithHttpInfo(RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = recipeBook;
            localVarRequestOptions.Operation = "ApiApi.CreateRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<RecipeBook>("/api/recipe-book/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBook</returns>
        public async System.Threading.Tasks.Task<RecipeBook> CreateRecipeBookAsync(RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeBook> localVarResponse = await CreateRecipeBookWithHttpInfoAsync(recipeBook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBook)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeBook>> CreateRecipeBookWithHttpInfoAsync(RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = recipeBook;
            localVarRequestOptions.Operation = "ApiApi.CreateRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RecipeBook>("/api/recipe-book/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBookEntry</returns>
        public RecipeBookEntry CreateRecipeBookEntry(RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeBookEntry> localVarResponse = CreateRecipeBookEntryWithHttpInfo(recipeBookEntry);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBookEntry</returns>
        public fetchkptncook.Client.ApiResponse<RecipeBookEntry> CreateRecipeBookEntryWithHttpInfo(RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = recipeBookEntry;
            localVarRequestOptions.Operation = "ApiApi.CreateRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<RecipeBookEntry>("/api/recipe-book-entry/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBookEntry</returns>
        public async System.Threading.Tasks.Task<RecipeBookEntry> CreateRecipeBookEntryAsync(RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeBookEntry> localVarResponse = await CreateRecipeBookEntryWithHttpInfoAsync(recipeBookEntry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBookEntry)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeBookEntry>> CreateRecipeBookEntryWithHttpInfoAsync(RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = recipeBookEntry;
            localVarRequestOptions.Operation = "ApiApi.CreateRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RecipeBookEntry>("/api/recipe-book-entry/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingList</returns>
        public ShoppingList CreateShoppingList(ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingList> localVarResponse = CreateShoppingListWithHttpInfo(shoppingList);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingList</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingList> CreateShoppingListWithHttpInfo(ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = shoppingList;
            localVarRequestOptions.Operation = "ApiApi.CreateShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<ShoppingList>("/api/shopping-list/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingList</returns>
        public async System.Threading.Tasks.Task<ShoppingList> CreateShoppingListAsync(ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingList> localVarResponse = await CreateShoppingListWithHttpInfoAsync(shoppingList, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingList)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingList>> CreateShoppingListWithHttpInfoAsync(ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = shoppingList;
            localVarRequestOptions.Operation = "ApiApi.CreateShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ShoppingList>("/api/shopping-list/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListEntry</returns>
        public ShoppingListEntry CreateShoppingListEntry(ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingListEntry> localVarResponse = CreateShoppingListEntryWithHttpInfo(shoppingListEntry);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListEntry</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingListEntry> CreateShoppingListEntryWithHttpInfo(ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = shoppingListEntry;
            localVarRequestOptions.Operation = "ApiApi.CreateShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<ShoppingListEntry>("/api/shopping-list-entry/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListEntry</returns>
        public async System.Threading.Tasks.Task<ShoppingListEntry> CreateShoppingListEntryAsync(ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingListEntry> localVarResponse = await CreateShoppingListEntryWithHttpInfoAsync(shoppingListEntry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListEntry)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingListEntry>> CreateShoppingListEntryWithHttpInfoAsync(ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = shoppingListEntry;
            localVarRequestOptions.Operation = "ApiApi.CreateShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ShoppingListEntry>("/api/shopping-list-entry/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListRecipe</returns>
        public ShoppingListRecipe CreateShoppingListRecipe(ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingListRecipe> localVarResponse = CreateShoppingListRecipeWithHttpInfo(shoppingListRecipe);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListRecipe</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingListRecipe> CreateShoppingListRecipeWithHttpInfo(ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = shoppingListRecipe;
            localVarRequestOptions.Operation = "ApiApi.CreateShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<ShoppingListRecipe>("/api/shopping-list-recipe/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListRecipe</returns>
        public async System.Threading.Tasks.Task<ShoppingListRecipe> CreateShoppingListRecipeAsync(ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingListRecipe> localVarResponse = await CreateShoppingListRecipeWithHttpInfoAsync(shoppingListRecipe, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListRecipe)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingListRecipe>> CreateShoppingListRecipeWithHttpInfoAsync(ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = shoppingListRecipe;
            localVarRequestOptions.Operation = "ApiApi.CreateShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ShoppingListRecipe>("/api/shopping-list-recipe/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Step</returns>
        public Step CreateStep(Step step = default(Step), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Step> localVarResponse = CreateStepWithHttpInfo(step);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Step</returns>
        public fetchkptncook.Client.ApiResponse<Step> CreateStepWithHttpInfo(Step step = default(Step), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = step;
            localVarRequestOptions.Operation = "ApiApi.CreateStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Step>("/api/step/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Step</returns>
        public async System.Threading.Tasks.Task<Step> CreateStepAsync(Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Step> localVarResponse = await CreateStepWithHttpInfoAsync(step, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Step)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Step>> CreateStepWithHttpInfoAsync(Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = step;
            localVarRequestOptions.Operation = "ApiApi.CreateStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Step>("/api/step/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Storage</returns>
        public Storage CreateStorage(Storage storage = default(Storage), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Storage> localVarResponse = CreateStorageWithHttpInfo(storage);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Storage</returns>
        public fetchkptncook.Client.ApiResponse<Storage> CreateStorageWithHttpInfo(Storage storage = default(Storage), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = storage;
            localVarRequestOptions.Operation = "ApiApi.CreateStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Storage>("/api/storage/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Storage</returns>
        public async System.Threading.Tasks.Task<Storage> CreateStorageAsync(Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Storage> localVarResponse = await CreateStorageWithHttpInfoAsync(storage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Storage)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Storage>> CreateStorageWithHttpInfoAsync(Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = storage;
            localVarRequestOptions.Operation = "ApiApi.CreateStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Storage>("/api/storage/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Supermarket</returns>
        public Supermarket CreateSupermarket(Supermarket supermarket = default(Supermarket), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Supermarket> localVarResponse = CreateSupermarketWithHttpInfo(supermarket);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Supermarket</returns>
        public fetchkptncook.Client.ApiResponse<Supermarket> CreateSupermarketWithHttpInfo(Supermarket supermarket = default(Supermarket), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = supermarket;
            localVarRequestOptions.Operation = "ApiApi.CreateSupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Supermarket>("/api/supermarket/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Supermarket</returns>
        public async System.Threading.Tasks.Task<Supermarket> CreateSupermarketAsync(Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Supermarket> localVarResponse = await CreateSupermarketWithHttpInfoAsync(supermarket, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Supermarket)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Supermarket>> CreateSupermarketWithHttpInfoAsync(Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = supermarket;
            localVarRequestOptions.Operation = "ApiApi.CreateSupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Supermarket>("/api/supermarket/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategory</returns>
        public SupermarketCategory CreateSupermarketCategory(SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategory> localVarResponse = CreateSupermarketCategoryWithHttpInfo(supermarketCategory);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategory</returns>
        public fetchkptncook.Client.ApiResponse<SupermarketCategory> CreateSupermarketCategoryWithHttpInfo(SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = supermarketCategory;
            localVarRequestOptions.Operation = "ApiApi.CreateSupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<SupermarketCategory>("/api/supermarket-category/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategory</returns>
        public async System.Threading.Tasks.Task<SupermarketCategory> CreateSupermarketCategoryAsync(SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategory> localVarResponse = await CreateSupermarketCategoryWithHttpInfoAsync(supermarketCategory, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategory)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<SupermarketCategory>> CreateSupermarketCategoryWithHttpInfoAsync(SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = supermarketCategory;
            localVarRequestOptions.Operation = "ApiApi.CreateSupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SupermarketCategory>("/api/supermarket-category/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategoryRelation</returns>
        public SupermarketCategoryRelation CreateSupermarketCategoryRelation(SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> localVarResponse = CreateSupermarketCategoryRelationWithHttpInfo(supermarketCategoryRelation);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategoryRelation</returns>
        public fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> CreateSupermarketCategoryRelationWithHttpInfo(SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = supermarketCategoryRelation;
            localVarRequestOptions.Operation = "ApiApi.CreateSupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<SupermarketCategoryRelation>("/api/supermarket-category-relation/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategoryRelation</returns>
        public async System.Threading.Tasks.Task<SupermarketCategoryRelation> CreateSupermarketCategoryRelationAsync(SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> localVarResponse = await CreateSupermarketCategoryRelationWithHttpInfoAsync(supermarketCategoryRelation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategoryRelation)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation>> CreateSupermarketCategoryRelationWithHttpInfoAsync(SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = supermarketCategoryRelation;
            localVarRequestOptions.Operation = "ApiApi.CreateSupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SupermarketCategoryRelation>("/api/supermarket-category-relation/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Sync</returns>
        public Sync CreateSync(Sync sync = default(Sync), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Sync> localVarResponse = CreateSyncWithHttpInfo(sync);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Sync</returns>
        public fetchkptncook.Client.ApiResponse<Sync> CreateSyncWithHttpInfo(Sync sync = default(Sync), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = sync;
            localVarRequestOptions.Operation = "ApiApi.CreateSync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Sync>("/api/sync/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sync</returns>
        public async System.Threading.Tasks.Task<Sync> CreateSyncAsync(Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Sync> localVarResponse = await CreateSyncWithHttpInfoAsync(sync, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sync)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Sync>> CreateSyncWithHttpInfoAsync(Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = sync;
            localVarRequestOptions.Operation = "ApiApi.CreateSync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Sync>("/api/sync/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        public Unit CreateUnit(Unit unit = default(Unit), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = CreateUnitWithHttpInfo(unit);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        public fetchkptncook.Client.ApiResponse<Unit> CreateUnitWithHttpInfo(Unit unit = default(Unit), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = unit;
            localVarRequestOptions.Operation = "ApiApi.CreateUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Unit>("/api/unit/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        public async System.Threading.Tasks.Task<Unit> CreateUnitAsync(Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = await CreateUnitWithHttpInfoAsync(unit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Unit>> CreateUnitWithHttpInfoAsync(Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = unit;
            localVarRequestOptions.Operation = "ApiApi.CreateUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Unit>("/api/unit/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFile</returns>
        public UserFile CreateUserFile(string name, System.IO.Stream file, int? id = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<UserFile> localVarResponse = CreateUserFileWithHttpInfo(name, file, id, fileDownload, preview, fileSizeKb);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFile</returns>
        public fetchkptncook.Client.ApiResponse<UserFile> CreateUserFileWithHttpInfo(string name, System.IO.Stream file, int? id = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'name' when calling ApiApi->CreateUserFile");
            }
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'file' when calling ApiApi->CreateUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (id != null)
            {
                localVarRequestOptions.FormParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("name", fetchkptncook.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            if (fileDownload != null)
            {
                localVarRequestOptions.FormParameters.Add("file_download", fetchkptncook.Client.ClientUtils.ParameterToString(fileDownload)); // form parameter
            }
            if (preview != null)
            {
                localVarRequestOptions.FormParameters.Add("preview", fetchkptncook.Client.ClientUtils.ParameterToString(preview)); // form parameter
            }
            if (fileSizeKb != null)
            {
                localVarRequestOptions.FormParameters.Add("file_size_kb", fetchkptncook.Client.ClientUtils.ParameterToString(fileSizeKb)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiApi.CreateUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<UserFile>("/api/user-file/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFile</returns>
        public async System.Threading.Tasks.Task<UserFile> CreateUserFileAsync(string name, System.IO.Stream file, int? id = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<UserFile> localVarResponse = await CreateUserFileWithHttpInfoAsync(name, file, id, fileDownload, preview, fileSizeKb, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFile)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<UserFile>> CreateUserFileWithHttpInfoAsync(string name, System.IO.Stream file, int? id = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'name' when calling ApiApi->CreateUserFile");
            }
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'file' when calling ApiApi->CreateUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (id != null)
            {
                localVarRequestOptions.FormParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("name", fetchkptncook.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            if (fileDownload != null)
            {
                localVarRequestOptions.FormParameters.Add("file_download", fetchkptncook.Client.ClientUtils.ParameterToString(fileDownload)); // form parameter
            }
            if (preview != null)
            {
                localVarRequestOptions.FormParameters.Add("preview", fetchkptncook.Client.ClientUtils.ParameterToString(preview)); // form parameter
            }
            if (fileSizeKb != null)
            {
                localVarRequestOptions.FormParameters.Add("file_size_kb", fetchkptncook.Client.ClientUtils.ParameterToString(fileSizeKb)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiApi.CreateUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserFile>("/api/user-file/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewLog</returns>
        public ViewLog CreateViewLog(ViewLog viewLog = default(ViewLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ViewLog> localVarResponse = CreateViewLogWithHttpInfo(viewLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewLog</returns>
        public fetchkptncook.Client.ApiResponse<ViewLog> CreateViewLogWithHttpInfo(ViewLog viewLog = default(ViewLog), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = viewLog;
            localVarRequestOptions.Operation = "ApiApi.CreateViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<ViewLog>("/api/view-log/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewLog</returns>
        public async System.Threading.Tasks.Task<ViewLog> CreateViewLogAsync(ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ViewLog> localVarResponse = await CreateViewLogWithHttpInfoAsync(viewLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ViewLog>> CreateViewLogWithHttpInfoAsync(ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = viewLog;
            localVarRequestOptions.Operation = "ApiApi.CreateViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ViewLog>("/api/view-log/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  function to handle files passed by application importer
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CreateimportFiles(Object body = default(Object), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Object> localVarResponse = CreateimportFilesWithHttpInfo(body);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  function to handle files passed by application importer
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public fetchkptncook.Client.ApiResponse<Object> CreateimportFilesWithHttpInfo(Object body = default(Object), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = body;
            localVarRequestOptions.Operation = "ApiApi.CreateimportFiles";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/import/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateimportFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  function to handle files passed by application importer
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateimportFilesAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Object> localVarResponse = await CreateimportFilesWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  function to handle files passed by application importer
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> CreateimportFilesWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = body;
            localVarRequestOptions.Operation = "ApiApi.CreateimportFiles";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/import/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateimportFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  function to retrieve a recipe from a given url or source string :param request: standard request with additional post parameters         - url: url to use for importing recipe         - data: if no url is given recipe is imported from provided source data         - (optional) bookmarklet: id of bookmarklet import to use, overrides URL and data attributes :return: JsonResponse containing the parsed json and images
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CreaterecipeFromSource(Object body = default(Object), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Object> localVarResponse = CreaterecipeFromSourceWithHttpInfo(body);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  function to retrieve a recipe from a given url or source string :param request: standard request with additional post parameters         - url: url to use for importing recipe         - data: if no url is given recipe is imported from provided source data         - (optional) bookmarklet: id of bookmarklet import to use, overrides URL and data attributes :return: JsonResponse containing the parsed json and images
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public fetchkptncook.Client.ApiResponse<Object> CreaterecipeFromSourceWithHttpInfo(Object body = default(Object), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = body;
            localVarRequestOptions.Operation = "ApiApi.CreaterecipeFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/recipe-from-source/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreaterecipeFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  function to retrieve a recipe from a given url or source string :param request: standard request with additional post parameters         - url: url to use for importing recipe         - data: if no url is given recipe is imported from provided source data         - (optional) bookmarklet: id of bookmarklet import to use, overrides URL and data attributes :return: JsonResponse containing the parsed json and images
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreaterecipeFromSourceAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Object> localVarResponse = await CreaterecipeFromSourceWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  function to retrieve a recipe from a given url or source string :param request: standard request with additional post parameters         - url: url to use for importing recipe         - data: if no url is given recipe is imported from provided source data         - (optional) bookmarklet: id of bookmarklet import to use, overrides URL and data attributes :return: JsonResponse containing the parsed json and images
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> CreaterecipeFromSourceWithHttpInfoAsync(Object body = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = body;
            localVarRequestOptions.Operation = "ApiApi.CreaterecipeFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/recipe-from-source/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreaterecipeFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyAccessToken(string id, int operationIndex = 0)
        {
            DestroyAccessTokenWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyAccessTokenWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyAccessToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/access-token/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyAccessTokenAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyAccessTokenWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyAccessTokenWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyAccessToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/access-token/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyAutomation(string id, int operationIndex = 0)
        {
            DestroyAutomationWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyAutomationWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyAutomation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/automation/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyAutomationAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyAutomationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyAutomationWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyAutomation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/automation/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyBookmarkletImport(string id, int operationIndex = 0)
        {
            DestroyBookmarkletImportWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyBookmarkletImportWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyBookmarkletImport");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/bookmarklet-import/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyBookmarkletImportAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyBookmarkletImportWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyBookmarkletImportWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyBookmarkletImport");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/bookmarklet-import/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyCookLog(string id, int operationIndex = 0)
        {
            DestroyCookLogWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyCookLogWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyCookLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/cook-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyCookLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyCookLogWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyCookLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyCookLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/cook-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyCustomFilter(string id, int operationIndex = 0)
        {
            DestroyCustomFilterWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyCustomFilterWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyCustomFilter");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/custom-filter/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyCustomFilterAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyCustomFilterWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyCustomFilterWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyCustomFilter");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/custom-filter/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyExportLog(string id, int operationIndex = 0)
        {
            DestroyExportLogWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyExportLogWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyExportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/export-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyExportLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyExportLogWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyExportLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyExportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/export-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyFood(string id, int operationIndex = 0)
        {
            DestroyFoodWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyFoodWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/food/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyFoodAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyFoodWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyFoodWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/food/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyImportLog(string id, int operationIndex = 0)
        {
            DestroyImportLogWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyImportLogWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyImportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/import-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyImportLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyImportLogWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyImportLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyImportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/import-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyIngredient(string id, int operationIndex = 0)
        {
            DestroyIngredientWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyIngredientWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyIngredient");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/ingredient/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyIngredientAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyIngredientWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyIngredientWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyIngredient");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/ingredient/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyInviteLink(string id, int operationIndex = 0)
        {
            DestroyInviteLinkWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyInviteLinkWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyInviteLink");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/invite-link/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyInviteLinkAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyInviteLinkWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyInviteLinkWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyInviteLink");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/invite-link/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyKeyword(string id, int operationIndex = 0)
        {
            DestroyKeywordWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyKeywordWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/keyword/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyKeywordAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyKeywordWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyKeywordWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/keyword/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyMealPlan(string id, int operationIndex = 0)
        {
            DestroyMealPlanWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyMealPlanWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyMealPlan");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/meal-plan/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyMealPlanAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyMealPlanWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyMealPlanWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyMealPlan");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/meal-plan/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyMealType(string id, int operationIndex = 0)
        {
            DestroyMealTypeWithHttpInfo(id);
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyMealTypeWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyMealType");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/meal-type/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyMealTypeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyMealTypeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyMealTypeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyMealType");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/meal-type/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyRecipe(string id, int operationIndex = 0)
        {
            DestroyRecipeWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyRecipeWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/recipe/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyRecipeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/recipe/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyRecipeBook(string id, int operationIndex = 0)
        {
            DestroyRecipeBookWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyRecipeBookWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyRecipeBook");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/recipe-book/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyRecipeBookAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyRecipeBookWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyRecipeBookWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyRecipeBook");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/recipe-book/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyRecipeBookEntry(string id, int operationIndex = 0)
        {
            DestroyRecipeBookEntryWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyRecipeBookEntryWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyRecipeBookEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/recipe-book-entry/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyRecipeBookEntryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyRecipeBookEntryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyRecipeBookEntryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyRecipeBookEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/recipe-book-entry/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyShoppingList(string id, int operationIndex = 0)
        {
            DestroyShoppingListWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyShoppingListWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyShoppingList");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/shopping-list/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyShoppingListAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyShoppingListWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyShoppingListWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyShoppingList");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/shopping-list/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyShoppingListEntry(string id, int operationIndex = 0)
        {
            DestroyShoppingListEntryWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyShoppingListEntryWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyShoppingListEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/shopping-list-entry/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyShoppingListEntryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyShoppingListEntryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyShoppingListEntryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyShoppingListEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/shopping-list-entry/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyShoppingListRecipe(string id, int operationIndex = 0)
        {
            DestroyShoppingListRecipeWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyShoppingListRecipeWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyShoppingListRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/shopping-list-recipe/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyShoppingListRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyShoppingListRecipeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyShoppingListRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyShoppingListRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/shopping-list-recipe/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyStep(string id, int operationIndex = 0)
        {
            DestroyStepWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyStepWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyStep");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/step/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyStepAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyStepWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyStepWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyStep");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/step/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyStorage(string id, int operationIndex = 0)
        {
            DestroyStorageWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyStorageWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyStorage");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/storage/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyStorageAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyStorageWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyStorageWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyStorage");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/storage/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroySupermarket(string id, int operationIndex = 0)
        {
            DestroySupermarketWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroySupermarketWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroySupermarket");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroySupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/supermarket/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroySupermarketAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroySupermarketWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroySupermarketWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroySupermarket");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroySupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/supermarket/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroySupermarketCategory(string id, int operationIndex = 0)
        {
            DestroySupermarketCategoryWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroySupermarketCategoryWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroySupermarketCategory");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroySupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/supermarket-category/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroySupermarketCategoryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroySupermarketCategoryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroySupermarketCategoryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroySupermarketCategory");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroySupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/supermarket-category/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroySupermarketCategoryRelation(string id, int operationIndex = 0)
        {
            DestroySupermarketCategoryRelationWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroySupermarketCategoryRelationWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroySupermarketCategoryRelation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroySupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/supermarket-category-relation/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroySupermarketCategoryRelationAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroySupermarketCategoryRelationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroySupermarketCategoryRelationWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroySupermarketCategoryRelation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroySupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/supermarket-category-relation/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroySync(string id, int operationIndex = 0)
        {
            DestroySyncWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroySyncWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroySync");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroySync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/sync/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroySyncAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroySyncWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroySyncWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroySync");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroySync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/sync/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroySync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyUnit(string id, int operationIndex = 0)
        {
            DestroyUnitWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyUnitWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/unit/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyUnitAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyUnitWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyUnitWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/unit/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyUserFile(string id, int operationIndex = 0)
        {
            DestroyUserFileWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyUserFileWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/user-file/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyUserFileAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyUserFileWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyUserFileWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/user-file/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyUserSpace(string id, int operationIndex = 0)
        {
            DestroyUserSpaceWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyUserSpaceWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyUserSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyUserSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/user-space/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyUserSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyUserSpaceAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyUserSpaceWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyUserSpaceWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyUserSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyUserSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/user-space/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyUserSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DestroyViewLog(string id, int operationIndex = 0)
        {
            DestroyViewLogWithHttpInfo(id);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public fetchkptncook.Client.ApiResponse<Object> DestroyViewLogWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyViewLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/view-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyViewLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyViewLogWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> DestroyViewLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->DestroyViewLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.DestroyViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/view-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="image"> (optional)</param>
        /// <param name="imageUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeImage</returns>
        public RecipeImage ImageRecipe(string id, System.IO.Stream image = default(System.IO.Stream), string imageUrl = default(string), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeImage> localVarResponse = ImageRecipeWithHttpInfo(id, image, imageUrl);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="image"> (optional)</param>
        /// <param name="imageUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeImage</returns>
        public fetchkptncook.Client.ApiResponse<RecipeImage> ImageRecipeWithHttpInfo(string id, System.IO.Stream image = default(System.IO.Stream), string imageUrl = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->ImageRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (image != null)
            {
                localVarRequestOptions.FileParameters.Add("image", image);
            }
            if (imageUrl != null)
            {
                localVarRequestOptions.FormParameters.Add("image_url", fetchkptncook.Client.ClientUtils.ParameterToString(imageUrl)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiApi.ImageRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<RecipeImage>("/api/recipe/{id}/image/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="image"> (optional)</param>
        /// <param name="imageUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeImage</returns>
        public async System.Threading.Tasks.Task<RecipeImage> ImageRecipeAsync(string id, System.IO.Stream image = default(System.IO.Stream), string imageUrl = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeImage> localVarResponse = await ImageRecipeWithHttpInfoAsync(id, image, imageUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="image"> (optional)</param>
        /// <param name="imageUrl"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeImage)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeImage>> ImageRecipeWithHttpInfoAsync(string id, System.IO.Stream image = default(System.IO.Stream), string imageUrl = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->ImageRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (image != null)
            {
                localVarRequestOptions.FileParameters.Add("image", image);
            }
            if (imageUrl != null)
            {
                localVarRequestOptions.FormParameters.Add("image_url", fetchkptncook.Client.ClientUtils.ParameterToString(imageUrl)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiApi.ImageRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RecipeImage>("/api/recipe/{id}/image/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AccessToken&gt;</returns>
        public List<AccessToken> ListAccessTokens(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<AccessToken>> localVarResponse = ListAccessTokensWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AccessToken&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<AccessToken>> ListAccessTokensWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListAccessTokens";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AccessToken>>("/api/access-token/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccessTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AccessToken&gt;</returns>
        public async System.Threading.Tasks.Task<List<AccessToken>> ListAccessTokensAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<AccessToken>> localVarResponse = await ListAccessTokensWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AccessToken&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<AccessToken>>> ListAccessTokensWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListAccessTokens";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AccessToken>>("/api/access-token/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccessTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Automation&gt;</returns>
        public List<Automation> ListAutomations(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<Automation>> localVarResponse = ListAutomationsWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Automation&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<Automation>> ListAutomationsWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListAutomations";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Automation>>("/api/automation/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAutomations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Automation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Automation>> ListAutomationsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<Automation>> localVarResponse = await ListAutomationsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Automation&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<Automation>>> ListAutomationsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListAutomations";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Automation>>("/api/automation/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAutomations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BookmarkletImportList&gt;</returns>
        public List<BookmarkletImportList> ListBookmarkletImports(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<BookmarkletImportList>> localVarResponse = ListBookmarkletImportsWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BookmarkletImportList&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<BookmarkletImportList>> ListBookmarkletImportsWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListBookmarkletImports";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BookmarkletImportList>>("/api/bookmarklet-import/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBookmarkletImports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BookmarkletImportList&gt;</returns>
        public async System.Threading.Tasks.Task<List<BookmarkletImportList>> ListBookmarkletImportsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<BookmarkletImportList>> localVarResponse = await ListBookmarkletImportsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BookmarkletImportList&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<BookmarkletImportList>>> ListBookmarkletImportsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListBookmarkletImports";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BookmarkletImportList>>("/api/bookmarklet-import/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBookmarkletImports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCookLogs200Response</returns>
        public ListCookLogs200Response ListCookLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListCookLogs200Response> localVarResponse = ListCookLogsWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCookLogs200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListCookLogs200Response> ListCookLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListCookLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCookLogs200Response>("/api/cook-log/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCookLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCookLogs200Response</returns>
        public async System.Threading.Tasks.Task<ListCookLogs200Response> ListCookLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListCookLogs200Response> localVarResponse = await ListCookLogsWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCookLogs200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListCookLogs200Response>> ListCookLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListCookLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCookLogs200Response>("/api/cook-log/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCookLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CustomFilter&gt;</returns>
        public List<CustomFilter> ListCustomFilters(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<CustomFilter>> localVarResponse = ListCustomFiltersWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CustomFilter&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<CustomFilter>> ListCustomFiltersWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListCustomFilters";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CustomFilter>>("/api/custom-filter/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomFilter&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomFilter>> ListCustomFiltersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<CustomFilter>> localVarResponse = await ListCustomFiltersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomFilter&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<CustomFilter>>> ListCustomFiltersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListCustomFilters";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CustomFilter>>("/api/custom-filter/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListExportLogs200Response</returns>
        public ListExportLogs200Response ListExportLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListExportLogs200Response> localVarResponse = ListExportLogsWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListExportLogs200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListExportLogs200Response> ListExportLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListExportLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListExportLogs200Response>("/api/export-log/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListExportLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListExportLogs200Response</returns>
        public async System.Threading.Tasks.Task<ListExportLogs200Response> ListExportLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListExportLogs200Response> localVarResponse = await ListExportLogsWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListExportLogs200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListExportLogs200Response>> ListExportLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListExportLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListExportLogs200Response>("/api/export-log/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListExportLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FoodInheritField&gt;</returns>
        public List<FoodInheritField> ListFoodInheritFields(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<FoodInheritField>> localVarResponse = ListFoodInheritFieldsWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FoodInheritField&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<FoodInheritField>> ListFoodInheritFieldsWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListFoodInheritFields";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FoodInheritField>>("/api/food-inherit-field/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFoodInheritFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FoodInheritField&gt;</returns>
        public async System.Threading.Tasks.Task<List<FoodInheritField>> ListFoodInheritFieldsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<FoodInheritField>> localVarResponse = await ListFoodInheritFieldsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FoodInheritField&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<FoodInheritField>>> ListFoodInheritFieldsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListFoodInheritFields";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FoodInheritField>>("/api/food-inherit-field/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFoodInheritFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against food name. (optional)</param>
        /// <param name="root">Return first level children of food with ID [int].  Integer 0 will return root foods. (optional)</param>
        /// <param name="tree">Return all self and children of food with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFoods200Response</returns>
        public ListFoods200Response ListFoods(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListFoods200Response> localVarResponse = ListFoodsWithHttpInfo(query, root, tree, page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against food name. (optional)</param>
        /// <param name="root">Return first level children of food with ID [int].  Integer 0 will return root foods. (optional)</param>
        /// <param name="tree">Return all self and children of food with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFoods200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListFoods200Response> ListFoodsWithHttpInfo(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (root != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "root", root));
            }
            if (tree != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "tree", tree));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListFoods";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFoods200Response>("/api/food/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFoods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against food name. (optional)</param>
        /// <param name="root">Return first level children of food with ID [int].  Integer 0 will return root foods. (optional)</param>
        /// <param name="tree">Return all self and children of food with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFoods200Response</returns>
        public async System.Threading.Tasks.Task<ListFoods200Response> ListFoodsAsync(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListFoods200Response> localVarResponse = await ListFoodsWithHttpInfoAsync(query, root, tree, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against food name. (optional)</param>
        /// <param name="root">Return first level children of food with ID [int].  Integer 0 will return root foods. (optional)</param>
        /// <param name="tree">Return all self and children of food with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFoods200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListFoods200Response>> ListFoodsWithHttpInfoAsync(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (root != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "root", root));
            }
            if (tree != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "tree", tree));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListFoods";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFoods200Response>("/api/food/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFoods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Group&gt;</returns>
        public List<Group> ListGroups(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<Group>> localVarResponse = ListGroupsWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<Group>> ListGroupsWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListGroups";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Group>>("/api/group/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<List<Group>> ListGroupsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<Group>> localVarResponse = await ListGroupsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<Group>>> ListGroupsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListGroups";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Group>>("/api/group/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListImportLogs200Response</returns>
        public ListImportLogs200Response ListImportLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListImportLogs200Response> localVarResponse = ListImportLogsWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListImportLogs200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListImportLogs200Response> ListImportLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListImportLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListImportLogs200Response>("/api/import-log/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListImportLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListImportLogs200Response</returns>
        public async System.Threading.Tasks.Task<ListImportLogs200Response> ListImportLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListImportLogs200Response> localVarResponse = await ListImportLogsWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListImportLogs200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListImportLogs200Response>> ListImportLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListImportLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListImportLogs200Response>("/api/import-log/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListImportLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListIngredients200Response</returns>
        public ListIngredients200Response ListIngredients(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListIngredients200Response> localVarResponse = ListIngredientsWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListIngredients200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListIngredients200Response> ListIngredientsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListIngredients";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListIngredients200Response>("/api/ingredient/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListIngredients200Response</returns>
        public async System.Threading.Tasks.Task<ListIngredients200Response> ListIngredientsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListIngredients200Response> localVarResponse = await ListIngredientsWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListIngredients200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListIngredients200Response>> ListIngredientsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListIngredients";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListIngredients200Response>("/api/ingredient/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InviteLink&gt;</returns>
        public List<InviteLink> ListInviteLinks(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<InviteLink>> localVarResponse = ListInviteLinksWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InviteLink&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<InviteLink>> ListInviteLinksWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListInviteLinks";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InviteLink>>("/api/invite-link/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInviteLinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InviteLink&gt;</returns>
        public async System.Threading.Tasks.Task<List<InviteLink>> ListInviteLinksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<InviteLink>> localVarResponse = await ListInviteLinksWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InviteLink&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<InviteLink>>> ListInviteLinksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListInviteLinks";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InviteLink>>("/api/invite-link/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInviteLinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against keyword name. (optional)</param>
        /// <param name="root">Return first level children of keyword with ID [int].  Integer 0 will return root keywords. (optional)</param>
        /// <param name="tree">Return all self and children of keyword with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListKeywords200Response</returns>
        public ListKeywords200Response ListKeywords(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListKeywords200Response> localVarResponse = ListKeywordsWithHttpInfo(query, root, tree, page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against keyword name. (optional)</param>
        /// <param name="root">Return first level children of keyword with ID [int].  Integer 0 will return root keywords. (optional)</param>
        /// <param name="tree">Return all self and children of keyword with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListKeywords200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListKeywords200Response> ListKeywordsWithHttpInfo(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (root != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "root", root));
            }
            if (tree != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "tree", tree));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListKeywords";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListKeywords200Response>("/api/keyword/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListKeywords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against keyword name. (optional)</param>
        /// <param name="root">Return first level children of keyword with ID [int].  Integer 0 will return root keywords. (optional)</param>
        /// <param name="tree">Return all self and children of keyword with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListKeywords200Response</returns>
        public async System.Threading.Tasks.Task<ListKeywords200Response> ListKeywordsAsync(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListKeywords200Response> localVarResponse = await ListKeywordsWithHttpInfoAsync(query, root, tree, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against keyword name. (optional)</param>
        /// <param name="root">Return first level children of keyword with ID [int].  Integer 0 will return root keywords. (optional)</param>
        /// <param name="tree">Return all self and children of keyword with ID [int]. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListKeywords200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListKeywords200Response>> ListKeywordsWithHttpInfoAsync(string query = default(string), Int root = default(Int), Int tree = default(Int), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (root != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "root", root));
            }
            if (tree != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "tree", tree));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListKeywords";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListKeywords200Response>("/api/keyword/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListKeywords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  optional parameters  - **from_date**: filter from (inclusive) a certain date onward - **to_date**: filter upward to (inclusive) certain date
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MealPlan&gt;</returns>
        public List<MealPlan> ListMealPlans(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<MealPlan>> localVarResponse = ListMealPlansWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  optional parameters  - **from_date**: filter from (inclusive) a certain date onward - **to_date**: filter upward to (inclusive) certain date
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MealPlan&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<MealPlan>> ListMealPlansWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListMealPlans";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MealPlan>>("/api/meal-plan/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMealPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  optional parameters  - **from_date**: filter from (inclusive) a certain date onward - **to_date**: filter upward to (inclusive) certain date
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MealPlan&gt;</returns>
        public async System.Threading.Tasks.Task<List<MealPlan>> ListMealPlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<MealPlan>> localVarResponse = await ListMealPlansWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  optional parameters  - **from_date**: filter from (inclusive) a certain date onward - **to_date**: filter upward to (inclusive) certain date
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MealPlan&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<MealPlan>>> ListMealPlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListMealPlans";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MealPlan>>("/api/meal-plan/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMealPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MealType&gt;</returns>
        public List<MealType> ListMealTypes(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<MealType>> localVarResponse = ListMealTypesWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MealType&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<MealType>> ListMealTypesWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListMealTypes";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MealType>>("/api/meal-type/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMealTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MealType&gt;</returns>
        public async System.Threading.Tasks.Task<List<MealType>> ListMealTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<MealType>> localVarResponse = await ListMealTypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MealType&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<MealType>>> ListMealTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListMealTypes";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MealType>>("/api/meal-type/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMealTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  optional parameters  - **recipe**: id of recipe - only return books for that recipe - **book**: id of book - only return recipes in that book
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RecipeBookEntry&gt;</returns>
        public List<RecipeBookEntry> ListRecipeBookEntrys(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<RecipeBookEntry>> localVarResponse = ListRecipeBookEntrysWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  optional parameters  - **recipe**: id of recipe - only return books for that recipe - **book**: id of book - only return recipes in that book
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RecipeBookEntry&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<RecipeBookEntry>> ListRecipeBookEntrysWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListRecipeBookEntrys";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RecipeBookEntry>>("/api/recipe-book-entry/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecipeBookEntrys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  optional parameters  - **recipe**: id of recipe - only return books for that recipe - **book**: id of book - only return recipes in that book
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipeBookEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecipeBookEntry>> ListRecipeBookEntrysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<RecipeBookEntry>> localVarResponse = await ListRecipeBookEntrysWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  optional parameters  - **recipe**: id of recipe - only return books for that recipe - **book**: id of book - only return recipes in that book
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipeBookEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<RecipeBookEntry>>> ListRecipeBookEntrysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListRecipeBookEntrys";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecipeBookEntry>>("/api/recipe-book-entry/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecipeBookEntrys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RecipeBook&gt;</returns>
        public List<RecipeBook> ListRecipeBooks(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<RecipeBook>> localVarResponse = ListRecipeBooksWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RecipeBook&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<RecipeBook>> ListRecipeBooksWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListRecipeBooks";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RecipeBook>>("/api/recipe-book/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecipeBooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipeBook&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecipeBook>> ListRecipeBooksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<RecipeBook>> localVarResponse = await ListRecipeBooksWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipeBook&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<RecipeBook>>> ListRecipeBooksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListRecipeBooks";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecipeBook>>("/api/recipe-book/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecipeBooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched (fuzzy) against recipe name. In the future also fulltext search. (optional)</param>
        /// <param name="keywords">ID of keyword a recipe should have. For multiple repeat parameter. Equivalent to keywords_or (optional)</param>
        /// <param name="keywordsOr">Keyword IDs, repeat for multiple. Return recipes with any of the keywords (optional)</param>
        /// <param name="keywordsAnd">Keyword IDs, repeat for multiple. Return recipes with all of the keywords. (optional)</param>
        /// <param name="keywordsOrNot">Keyword IDs, repeat for multiple. Exclude recipes with any of the keywords. (optional)</param>
        /// <param name="keywordsAndNot">Keyword IDs, repeat for multiple. Exclude recipes with all of the keywords. (optional)</param>
        /// <param name="foods">ID of food a recipe should have. For multiple repeat parameter. (optional)</param>
        /// <param name="foodsOr">Food IDs, repeat for multiple. Return recipes with any of the foods (optional)</param>
        /// <param name="foodsAnd">Food IDs, repeat for multiple. Return recipes with all of the foods. (optional)</param>
        /// <param name="foodsOrNot">Food IDs, repeat for multiple. Exclude recipes with any of the foods. (optional)</param>
        /// <param name="foodsAndNot">Food IDs, repeat for multiple. Exclude recipes with all of the foods. (optional)</param>
        /// <param name="units">ID of unit a recipe should have. (optional)</param>
        /// <param name="rating">Rating a recipe should have or greater. [0 - 5] Negative value filters rating less than. (optional)</param>
        /// <param name="books">ID of book a recipe should be in. For multiple repeat parameter. (optional)</param>
        /// <param name="booksOr">Book IDs, repeat for multiple. Return recipes with any of the books (optional)</param>
        /// <param name="booksAnd">Book IDs, repeat for multiple. Return recipes with all of the books. (optional)</param>
        /// <param name="booksOrNot">Book IDs, repeat for multiple. Exclude recipes with any of the books. (optional)</param>
        /// <param name="booksAndNot">Book IDs, repeat for multiple. Exclude recipes with all of the books. (optional)</param>
        /// <param name="_internal">If only internal recipes should be returned. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="random">Returns the results in randomized order. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="_new">Returns new results first in search results. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="timescooked">Filter recipes cooked X times or more.  Negative values returns cooked less than X times (optional)</param>
        /// <param name="cookedon">Filter recipes last cooked on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="createdon">Filter recipes created on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="updatedon">Filter recipes updated on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="viewedon">Filter recipes lasts viewed on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="makenow">Filter recipes that can be made with OnHand food. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRecipes200Response</returns>
        public ListRecipes200Response ListRecipes(string query = default(string), Int keywords = default(Int), Int keywordsOr = default(Int), Int keywordsAnd = default(Int), Int keywordsOrNot = default(Int), Int keywordsAndNot = default(Int), Int foods = default(Int), Int foodsOr = default(Int), Int foodsAnd = default(Int), Int foodsOrNot = default(Int), Int foodsAndNot = default(Int), Int units = default(Int), Int rating = default(Int), string books = default(string), Int booksOr = default(Int), Int booksAnd = default(Int), Int booksOrNot = default(Int), Int booksAndNot = default(Int), string _internal = default(string), string random = default(string), string _new = default(string), Int timescooked = default(Int), string cookedon = default(string), string createdon = default(string), string updatedon = default(string), string viewedon = default(string), string makenow = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListRecipes200Response> localVarResponse = ListRecipesWithHttpInfo(query, keywords, keywordsOr, keywordsAnd, keywordsOrNot, keywordsAndNot, foods, foodsOr, foodsAnd, foodsOrNot, foodsAndNot, units, rating, books, booksOr, booksAnd, booksOrNot, booksAndNot, _internal, random, _new, timescooked, cookedon, createdon, updatedon, viewedon, makenow, page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched (fuzzy) against recipe name. In the future also fulltext search. (optional)</param>
        /// <param name="keywords">ID of keyword a recipe should have. For multiple repeat parameter. Equivalent to keywords_or (optional)</param>
        /// <param name="keywordsOr">Keyword IDs, repeat for multiple. Return recipes with any of the keywords (optional)</param>
        /// <param name="keywordsAnd">Keyword IDs, repeat for multiple. Return recipes with all of the keywords. (optional)</param>
        /// <param name="keywordsOrNot">Keyword IDs, repeat for multiple. Exclude recipes with any of the keywords. (optional)</param>
        /// <param name="keywordsAndNot">Keyword IDs, repeat for multiple. Exclude recipes with all of the keywords. (optional)</param>
        /// <param name="foods">ID of food a recipe should have. For multiple repeat parameter. (optional)</param>
        /// <param name="foodsOr">Food IDs, repeat for multiple. Return recipes with any of the foods (optional)</param>
        /// <param name="foodsAnd">Food IDs, repeat for multiple. Return recipes with all of the foods. (optional)</param>
        /// <param name="foodsOrNot">Food IDs, repeat for multiple. Exclude recipes with any of the foods. (optional)</param>
        /// <param name="foodsAndNot">Food IDs, repeat for multiple. Exclude recipes with all of the foods. (optional)</param>
        /// <param name="units">ID of unit a recipe should have. (optional)</param>
        /// <param name="rating">Rating a recipe should have or greater. [0 - 5] Negative value filters rating less than. (optional)</param>
        /// <param name="books">ID of book a recipe should be in. For multiple repeat parameter. (optional)</param>
        /// <param name="booksOr">Book IDs, repeat for multiple. Return recipes with any of the books (optional)</param>
        /// <param name="booksAnd">Book IDs, repeat for multiple. Return recipes with all of the books. (optional)</param>
        /// <param name="booksOrNot">Book IDs, repeat for multiple. Exclude recipes with any of the books. (optional)</param>
        /// <param name="booksAndNot">Book IDs, repeat for multiple. Exclude recipes with all of the books. (optional)</param>
        /// <param name="_internal">If only internal recipes should be returned. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="random">Returns the results in randomized order. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="_new">Returns new results first in search results. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="timescooked">Filter recipes cooked X times or more.  Negative values returns cooked less than X times (optional)</param>
        /// <param name="cookedon">Filter recipes last cooked on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="createdon">Filter recipes created on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="updatedon">Filter recipes updated on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="viewedon">Filter recipes lasts viewed on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="makenow">Filter recipes that can be made with OnHand food. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRecipes200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListRecipes200Response> ListRecipesWithHttpInfo(string query = default(string), Int keywords = default(Int), Int keywordsOr = default(Int), Int keywordsAnd = default(Int), Int keywordsOrNot = default(Int), Int keywordsAndNot = default(Int), Int foods = default(Int), Int foodsOr = default(Int), Int foodsAnd = default(Int), Int foodsOrNot = default(Int), Int foodsAndNot = default(Int), Int units = default(Int), Int rating = default(Int), string books = default(string), Int booksOr = default(Int), Int booksAnd = default(Int), Int booksOrNot = default(Int), Int booksAndNot = default(Int), string _internal = default(string), string random = default(string), string _new = default(string), Int timescooked = default(Int), string cookedon = default(string), string createdon = default(string), string updatedon = default(string), string viewedon = default(string), string makenow = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsOr != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords_or", keywordsOr));
            }
            if (keywordsAnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords_and", keywordsAnd));
            }
            if (keywordsOrNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords_or_not", keywordsOrNot));
            }
            if (keywordsAndNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords_and_not", keywordsAndNot));
            }
            if (foods != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods", foods));
            }
            if (foodsOr != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods_or", foodsOr));
            }
            if (foodsAnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods_and", foodsAnd));
            }
            if (foodsOrNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods_or_not", foodsOrNot));
            }
            if (foodsAndNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods_and_not", foodsAndNot));
            }
            if (units != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "units", units));
            }
            if (rating != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "rating", rating));
            }
            if (books != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books", books));
            }
            if (booksOr != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books_or", booksOr));
            }
            if (booksAnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books_and", booksAnd));
            }
            if (booksOrNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books_or_not", booksOrNot));
            }
            if (booksAndNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books_and_not", booksAndNot));
            }
            if (_internal != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "internal", _internal));
            }
            if (random != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "random", random));
            }
            if (_new != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "new", _new));
            }
            if (timescooked != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "timescooked", timescooked));
            }
            if (cookedon != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "cookedon", cookedon));
            }
            if (createdon != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "createdon", createdon));
            }
            if (updatedon != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "updatedon", updatedon));
            }
            if (viewedon != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "viewedon", viewedon));
            }
            if (makenow != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "makenow", makenow));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRecipes200Response>("/api/recipe/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched (fuzzy) against recipe name. In the future also fulltext search. (optional)</param>
        /// <param name="keywords">ID of keyword a recipe should have. For multiple repeat parameter. Equivalent to keywords_or (optional)</param>
        /// <param name="keywordsOr">Keyword IDs, repeat for multiple. Return recipes with any of the keywords (optional)</param>
        /// <param name="keywordsAnd">Keyword IDs, repeat for multiple. Return recipes with all of the keywords. (optional)</param>
        /// <param name="keywordsOrNot">Keyword IDs, repeat for multiple. Exclude recipes with any of the keywords. (optional)</param>
        /// <param name="keywordsAndNot">Keyword IDs, repeat for multiple. Exclude recipes with all of the keywords. (optional)</param>
        /// <param name="foods">ID of food a recipe should have. For multiple repeat parameter. (optional)</param>
        /// <param name="foodsOr">Food IDs, repeat for multiple. Return recipes with any of the foods (optional)</param>
        /// <param name="foodsAnd">Food IDs, repeat for multiple. Return recipes with all of the foods. (optional)</param>
        /// <param name="foodsOrNot">Food IDs, repeat for multiple. Exclude recipes with any of the foods. (optional)</param>
        /// <param name="foodsAndNot">Food IDs, repeat for multiple. Exclude recipes with all of the foods. (optional)</param>
        /// <param name="units">ID of unit a recipe should have. (optional)</param>
        /// <param name="rating">Rating a recipe should have or greater. [0 - 5] Negative value filters rating less than. (optional)</param>
        /// <param name="books">ID of book a recipe should be in. For multiple repeat parameter. (optional)</param>
        /// <param name="booksOr">Book IDs, repeat for multiple. Return recipes with any of the books (optional)</param>
        /// <param name="booksAnd">Book IDs, repeat for multiple. Return recipes with all of the books. (optional)</param>
        /// <param name="booksOrNot">Book IDs, repeat for multiple. Exclude recipes with any of the books. (optional)</param>
        /// <param name="booksAndNot">Book IDs, repeat for multiple. Exclude recipes with all of the books. (optional)</param>
        /// <param name="_internal">If only internal recipes should be returned. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="random">Returns the results in randomized order. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="_new">Returns new results first in search results. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="timescooked">Filter recipes cooked X times or more.  Negative values returns cooked less than X times (optional)</param>
        /// <param name="cookedon">Filter recipes last cooked on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="createdon">Filter recipes created on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="updatedon">Filter recipes updated on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="viewedon">Filter recipes lasts viewed on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="makenow">Filter recipes that can be made with OnHand food. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRecipes200Response</returns>
        public async System.Threading.Tasks.Task<ListRecipes200Response> ListRecipesAsync(string query = default(string), Int keywords = default(Int), Int keywordsOr = default(Int), Int keywordsAnd = default(Int), Int keywordsOrNot = default(Int), Int keywordsAndNot = default(Int), Int foods = default(Int), Int foodsOr = default(Int), Int foodsAnd = default(Int), Int foodsOrNot = default(Int), Int foodsAndNot = default(Int), Int units = default(Int), Int rating = default(Int), string books = default(string), Int booksOr = default(Int), Int booksAnd = default(Int), Int booksOrNot = default(Int), Int booksAndNot = default(Int), string _internal = default(string), string random = default(string), string _new = default(string), Int timescooked = default(Int), string cookedon = default(string), string createdon = default(string), string updatedon = default(string), string viewedon = default(string), string makenow = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListRecipes200Response> localVarResponse = await ListRecipesWithHttpInfoAsync(query, keywords, keywordsOr, keywordsAnd, keywordsOrNot, keywordsAndNot, foods, foodsOr, foodsAnd, foodsOrNot, foodsAndNot, units, rating, books, booksOr, booksAnd, booksOrNot, booksAndNot, _internal, random, _new, timescooked, cookedon, createdon, updatedon, viewedon, makenow, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched (fuzzy) against recipe name. In the future also fulltext search. (optional)</param>
        /// <param name="keywords">ID of keyword a recipe should have. For multiple repeat parameter. Equivalent to keywords_or (optional)</param>
        /// <param name="keywordsOr">Keyword IDs, repeat for multiple. Return recipes with any of the keywords (optional)</param>
        /// <param name="keywordsAnd">Keyword IDs, repeat for multiple. Return recipes with all of the keywords. (optional)</param>
        /// <param name="keywordsOrNot">Keyword IDs, repeat for multiple. Exclude recipes with any of the keywords. (optional)</param>
        /// <param name="keywordsAndNot">Keyword IDs, repeat for multiple. Exclude recipes with all of the keywords. (optional)</param>
        /// <param name="foods">ID of food a recipe should have. For multiple repeat parameter. (optional)</param>
        /// <param name="foodsOr">Food IDs, repeat for multiple. Return recipes with any of the foods (optional)</param>
        /// <param name="foodsAnd">Food IDs, repeat for multiple. Return recipes with all of the foods. (optional)</param>
        /// <param name="foodsOrNot">Food IDs, repeat for multiple. Exclude recipes with any of the foods. (optional)</param>
        /// <param name="foodsAndNot">Food IDs, repeat for multiple. Exclude recipes with all of the foods. (optional)</param>
        /// <param name="units">ID of unit a recipe should have. (optional)</param>
        /// <param name="rating">Rating a recipe should have or greater. [0 - 5] Negative value filters rating less than. (optional)</param>
        /// <param name="books">ID of book a recipe should be in. For multiple repeat parameter. (optional)</param>
        /// <param name="booksOr">Book IDs, repeat for multiple. Return recipes with any of the books (optional)</param>
        /// <param name="booksAnd">Book IDs, repeat for multiple. Return recipes with all of the books. (optional)</param>
        /// <param name="booksOrNot">Book IDs, repeat for multiple. Exclude recipes with any of the books. (optional)</param>
        /// <param name="booksAndNot">Book IDs, repeat for multiple. Exclude recipes with all of the books. (optional)</param>
        /// <param name="_internal">If only internal recipes should be returned. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="random">Returns the results in randomized order. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="_new">Returns new results first in search results. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="timescooked">Filter recipes cooked X times or more.  Negative values returns cooked less than X times (optional)</param>
        /// <param name="cookedon">Filter recipes last cooked on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="createdon">Filter recipes created on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="updatedon">Filter recipes updated on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="viewedon">Filter recipes lasts viewed on or after YYYY-MM-DD. Prepending - filters on or before date. (optional)</param>
        /// <param name="makenow">Filter recipes that can be made with OnHand food. [true/&lt;b&gt;false&lt;/b&gt;] (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRecipes200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListRecipes200Response>> ListRecipesWithHttpInfoAsync(string query = default(string), Int keywords = default(Int), Int keywordsOr = default(Int), Int keywordsAnd = default(Int), Int keywordsOrNot = default(Int), Int keywordsAndNot = default(Int), Int foods = default(Int), Int foodsOr = default(Int), Int foodsAnd = default(Int), Int foodsOrNot = default(Int), Int foodsAndNot = default(Int), Int units = default(Int), Int rating = default(Int), string books = default(string), Int booksOr = default(Int), Int booksAnd = default(Int), Int booksOrNot = default(Int), Int booksAndNot = default(Int), string _internal = default(string), string random = default(string), string _new = default(string), Int timescooked = default(Int), string cookedon = default(string), string createdon = default(string), string updatedon = default(string), string viewedon = default(string), string makenow = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsOr != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords_or", keywordsOr));
            }
            if (keywordsAnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords_and", keywordsAnd));
            }
            if (keywordsOrNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords_or_not", keywordsOrNot));
            }
            if (keywordsAndNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "keywords_and_not", keywordsAndNot));
            }
            if (foods != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods", foods));
            }
            if (foodsOr != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods_or", foodsOr));
            }
            if (foodsAnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods_and", foodsAnd));
            }
            if (foodsOrNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods_or_not", foodsOrNot));
            }
            if (foodsAndNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "foods_and_not", foodsAndNot));
            }
            if (units != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "units", units));
            }
            if (rating != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "rating", rating));
            }
            if (books != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books", books));
            }
            if (booksOr != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books_or", booksOr));
            }
            if (booksAnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books_and", booksAnd));
            }
            if (booksOrNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books_or_not", booksOrNot));
            }
            if (booksAndNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "books_and_not", booksAndNot));
            }
            if (_internal != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "internal", _internal));
            }
            if (random != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "random", random));
            }
            if (_new != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "new", _new));
            }
            if (timescooked != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "timescooked", timescooked));
            }
            if (cookedon != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "cookedon", cookedon));
            }
            if (createdon != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "createdon", createdon));
            }
            if (updatedon != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "updatedon", updatedon));
            }
            if (viewedon != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "viewedon", viewedon));
            }
            if (makenow != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "makenow", makenow));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRecipes200Response>("/api/recipe/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Returns the shopping list entry with a primary key of id.  Multiple values allowed. (optional)</param>
        /// <param name="_checked">Filter shopping list entries on checked.  [true, false, both, &lt;b&gt;recent&lt;/b&gt;]&lt;br&gt;  - recent includes unchecked items and recently completed items. (optional)</param>
        /// <param name="supermarket">Returns the shopping list entries sorted by supermarket category order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShoppingListEntry&gt;</returns>
        public List<ShoppingListEntry> ListShoppingListEntrys(Int id = default(Int), string _checked = default(string), Int supermarket = default(Int), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<ShoppingListEntry>> localVarResponse = ListShoppingListEntrysWithHttpInfo(id, _checked, supermarket);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Returns the shopping list entry with a primary key of id.  Multiple values allowed. (optional)</param>
        /// <param name="_checked">Filter shopping list entries on checked.  [true, false, both, &lt;b&gt;recent&lt;/b&gt;]&lt;br&gt;  - recent includes unchecked items and recently completed items. (optional)</param>
        /// <param name="supermarket">Returns the shopping list entries sorted by supermarket category order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShoppingListEntry&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<ShoppingListEntry>> ListShoppingListEntrysWithHttpInfo(Int id = default(Int), string _checked = default(string), Int supermarket = default(Int), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (_checked != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "checked", _checked));
            }
            if (supermarket != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "supermarket", supermarket));
            }
            localVarRequestOptions.Operation = "ApiApi.ListShoppingListEntrys";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ShoppingListEntry>>("/api/shopping-list-entry/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListShoppingListEntrys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Returns the shopping list entry with a primary key of id.  Multiple values allowed. (optional)</param>
        /// <param name="_checked">Filter shopping list entries on checked.  [true, false, both, &lt;b&gt;recent&lt;/b&gt;]&lt;br&gt;  - recent includes unchecked items and recently completed items. (optional)</param>
        /// <param name="supermarket">Returns the shopping list entries sorted by supermarket category order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShoppingListEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<ShoppingListEntry>> ListShoppingListEntrysAsync(Int id = default(Int), string _checked = default(string), Int supermarket = default(Int), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<ShoppingListEntry>> localVarResponse = await ListShoppingListEntrysWithHttpInfoAsync(id, _checked, supermarket, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Returns the shopping list entry with a primary key of id.  Multiple values allowed. (optional)</param>
        /// <param name="_checked">Filter shopping list entries on checked.  [true, false, both, &lt;b&gt;recent&lt;/b&gt;]&lt;br&gt;  - recent includes unchecked items and recently completed items. (optional)</param>
        /// <param name="supermarket">Returns the shopping list entries sorted by supermarket category order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShoppingListEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<ShoppingListEntry>>> ListShoppingListEntrysWithHttpInfoAsync(Int id = default(Int), string _checked = default(string), Int supermarket = default(Int), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (_checked != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "checked", _checked));
            }
            if (supermarket != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "supermarket", supermarket));
            }
            localVarRequestOptions.Operation = "ApiApi.ListShoppingListEntrys";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ShoppingListEntry>>("/api/shopping-list-entry/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListShoppingListEntrys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShoppingListRecipe&gt;</returns>
        public List<ShoppingListRecipe> ListShoppingListRecipes(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<ShoppingListRecipe>> localVarResponse = ListShoppingListRecipesWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShoppingListRecipe&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<ShoppingListRecipe>> ListShoppingListRecipesWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListShoppingListRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ShoppingListRecipe>>("/api/shopping-list-recipe/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListShoppingListRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShoppingListRecipe&gt;</returns>
        public async System.Threading.Tasks.Task<List<ShoppingListRecipe>> ListShoppingListRecipesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<ShoppingListRecipe>> localVarResponse = await ListShoppingListRecipesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShoppingListRecipe&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<ShoppingListRecipe>>> ListShoppingListRecipesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListShoppingListRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ShoppingListRecipe>>("/api/shopping-list-recipe/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListShoppingListRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShoppingList&gt;</returns>
        public List<ShoppingList> ListShoppingLists(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<ShoppingList>> localVarResponse = ListShoppingListsWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShoppingList&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<ShoppingList>> ListShoppingListsWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListShoppingLists";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ShoppingList>>("/api/shopping-list/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListShoppingLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShoppingList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ShoppingList>> ListShoppingListsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<ShoppingList>> localVarResponse = await ListShoppingListsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShoppingList&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<ShoppingList>>> ListShoppingListsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListShoppingLists";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ShoppingList>>("/api/shopping-list/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListShoppingLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Space&gt;</returns>
        public List<Space> ListSpaces(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<Space>> localVarResponse = ListSpacesWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Space&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<Space>> ListSpacesWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListSpaces";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Space>>("/api/space/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Space&gt;</returns>
        public async System.Threading.Tasks.Task<List<Space>> ListSpacesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<Space>> localVarResponse = await ListSpacesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Space&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<Space>>> ListSpacesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListSpaces";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Space>>("/api/space/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe">ID of recipe a step is part of. For multiple repeat parameter. (optional)</param>
        /// <param name="query">Query string matched (fuzzy) against object name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSteps200Response</returns>
        public ListSteps200Response ListSteps(Int recipe = default(Int), string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListSteps200Response> localVarResponse = ListStepsWithHttpInfo(recipe, query, page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe">ID of recipe a step is part of. For multiple repeat parameter. (optional)</param>
        /// <param name="query">Query string matched (fuzzy) against object name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSteps200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListSteps200Response> ListStepsWithHttpInfo(Int recipe = default(Int), string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (recipe != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "recipe", recipe));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListSteps";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSteps200Response>("/api/step/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSteps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe">ID of recipe a step is part of. For multiple repeat parameter. (optional)</param>
        /// <param name="query">Query string matched (fuzzy) against object name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSteps200Response</returns>
        public async System.Threading.Tasks.Task<ListSteps200Response> ListStepsAsync(Int recipe = default(Int), string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListSteps200Response> localVarResponse = await ListStepsWithHttpInfoAsync(recipe, query, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipe">ID of recipe a step is part of. For multiple repeat parameter. (optional)</param>
        /// <param name="query">Query string matched (fuzzy) against object name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSteps200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListSteps200Response>> ListStepsWithHttpInfoAsync(Int recipe = default(Int), string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (recipe != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "recipe", recipe));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListSteps";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSteps200Response>("/api/step/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSteps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Storage&gt;</returns>
        public List<Storage> ListStorages(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<Storage>> localVarResponse = ListStoragesWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Storage&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<Storage>> ListStoragesWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListStorages";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Storage>>("/api/storage/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStorages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Storage&gt;</returns>
        public async System.Threading.Tasks.Task<List<Storage>> ListStoragesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<Storage>> localVarResponse = await ListStoragesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Storage&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<Storage>>> ListStoragesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListStorages";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Storage>>("/api/storage/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStorages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSupermarketCategoryRelations200Response</returns>
        public ListSupermarketCategoryRelations200Response ListSupermarketCategoryRelations(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListSupermarketCategoryRelations200Response> localVarResponse = ListSupermarketCategoryRelationsWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSupermarketCategoryRelations200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListSupermarketCategoryRelations200Response> ListSupermarketCategoryRelationsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListSupermarketCategoryRelations";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSupermarketCategoryRelations200Response>("/api/supermarket-category-relation/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupermarketCategoryRelations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSupermarketCategoryRelations200Response</returns>
        public async System.Threading.Tasks.Task<ListSupermarketCategoryRelations200Response> ListSupermarketCategoryRelationsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListSupermarketCategoryRelations200Response> localVarResponse = await ListSupermarketCategoryRelationsWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSupermarketCategoryRelations200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListSupermarketCategoryRelations200Response>> ListSupermarketCategoryRelationsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListSupermarketCategoryRelations";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSupermarketCategoryRelations200Response>("/api/supermarket-category-relation/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupermarketCategoryRelations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against supermarket-category name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SupermarketCategory&gt;</returns>
        public List<SupermarketCategory> ListSupermarketCategorys(string query = default(string), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<SupermarketCategory>> localVarResponse = ListSupermarketCategorysWithHttpInfo(query);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against supermarket-category name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SupermarketCategory&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<SupermarketCategory>> ListSupermarketCategorysWithHttpInfo(string query = default(string), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            localVarRequestOptions.Operation = "ApiApi.ListSupermarketCategorys";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SupermarketCategory>>("/api/supermarket-category/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupermarketCategorys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against supermarket-category name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SupermarketCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<SupermarketCategory>> ListSupermarketCategorysAsync(string query = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<SupermarketCategory>> localVarResponse = await ListSupermarketCategorysWithHttpInfoAsync(query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against supermarket-category name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SupermarketCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<SupermarketCategory>>> ListSupermarketCategorysWithHttpInfoAsync(string query = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            localVarRequestOptions.Operation = "ApiApi.ListSupermarketCategorys";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SupermarketCategory>>("/api/supermarket-category/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupermarketCategorys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Supermarket&gt;</returns>
        public List<Supermarket> ListSupermarkets(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<Supermarket>> localVarResponse = ListSupermarketsWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Supermarket&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<Supermarket>> ListSupermarketsWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListSupermarkets";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Supermarket>>("/api/supermarket/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupermarkets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Supermarket&gt;</returns>
        public async System.Threading.Tasks.Task<List<Supermarket>> ListSupermarketsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<Supermarket>> localVarResponse = await ListSupermarketsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Supermarket&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<Supermarket>>> ListSupermarketsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListSupermarkets";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Supermarket>>("/api/supermarket/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupermarkets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSyncLogs200Response</returns>
        public ListSyncLogs200Response ListSyncLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListSyncLogs200Response> localVarResponse = ListSyncLogsWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSyncLogs200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListSyncLogs200Response> ListSyncLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListSyncLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSyncLogs200Response>("/api/sync-log/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSyncLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSyncLogs200Response</returns>
        public async System.Threading.Tasks.Task<ListSyncLogs200Response> ListSyncLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListSyncLogs200Response> localVarResponse = await ListSyncLogsWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSyncLogs200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListSyncLogs200Response>> ListSyncLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListSyncLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSyncLogs200Response>("/api/sync-log/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSyncLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Sync&gt;</returns>
        public List<Sync> ListSyncs(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<Sync>> localVarResponse = ListSyncsWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Sync&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<Sync>> ListSyncsWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListSyncs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Sync>>("/api/sync/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSyncs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Sync&gt;</returns>
        public async System.Threading.Tasks.Task<List<Sync>> ListSyncsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<Sync>> localVarResponse = await ListSyncsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Sync&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<Sync>>> ListSyncsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListSyncs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Sync>>("/api/sync/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSyncs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against unit name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUnits200Response</returns>
        public ListUnits200Response ListUnits(string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListUnits200Response> localVarResponse = ListUnitsWithHttpInfo(query, page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against unit name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUnits200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListUnits200Response> ListUnitsWithHttpInfo(string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListUnits";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListUnits200Response>("/api/unit/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against unit name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUnits200Response</returns>
        public async System.Threading.Tasks.Task<ListUnits200Response> ListUnitsAsync(string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListUnits200Response> localVarResponse = await ListUnitsWithHttpInfoAsync(query, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query string matched against unit name. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUnits200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListUnits200Response>> ListUnitsWithHttpInfoAsync(string query = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListUnits";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListUnits200Response>("/api/unit/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserFile&gt;</returns>
        public List<UserFile> ListUserFiles(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<UserFile>> localVarResponse = ListUserFilesWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserFile&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<UserFile>> ListUserFilesWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListUserFiles";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserFile>>("/api/user-file/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserFile>> ListUserFilesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<UserFile>> localVarResponse = await ListUserFilesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFile&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<UserFile>>> ListUserFilesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListUserFiles";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserFile>>("/api/user-file/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserPreference&gt;</returns>
        public List<UserPreference> ListUserPreferences(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<UserPreference>> localVarResponse = ListUserPreferencesWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserPreference&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<UserPreference>> ListUserPreferencesWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListUserPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserPreference>>("/api/user-preference/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserPreference&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserPreference>> ListUserPreferencesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<UserPreference>> localVarResponse = await ListUserPreferencesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserPreference&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<UserPreference>>> ListUserPreferencesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListUserPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserPreference>>("/api/user-preference/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserSpace&gt;</returns>
        public List<UserSpace> ListUserSpaces(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<UserSpace>> localVarResponse = ListUserSpacesWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserSpace&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<UserSpace>> ListUserSpacesWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListUserSpaces";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserSpace>>("/api/user-space/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserSpaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserSpace&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSpace>> ListUserSpacesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<UserSpace>> localVarResponse = await ListUserSpacesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserSpace&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<UserSpace>>> ListUserSpacesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListUserSpaces";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserSpace>>("/api/user-space/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserSpaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  optional parameters  - **filter_list**: array of user id&#39;s to get names for
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> ListUsers(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<User>> localVarResponse = ListUsersWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  optional parameters  - **filter_list**: array of user id&#39;s to get names for
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<User>> ListUsersWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListUsers";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/api/user/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  optional parameters  - **filter_list**: array of user id&#39;s to get names for
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> ListUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<User>> localVarResponse = await ListUsersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  optional parameters  - **filter_list**: array of user id&#39;s to get names for
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<User>>> ListUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListUsers";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/api/user/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListViewLogs200Response</returns>
        public ListViewLogs200Response ListViewLogs(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ListViewLogs200Response> localVarResponse = ListViewLogsWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListViewLogs200Response</returns>
        public fetchkptncook.Client.ApiResponse<ListViewLogs200Response> ListViewLogsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListViewLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ListViewLogs200Response>("/api/view-log/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListViewLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListViewLogs200Response</returns>
        public async System.Threading.Tasks.Task<ListViewLogs200Response> ListViewLogsAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ListViewLogs200Response> localVarResponse = await ListViewLogsWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListViewLogs200Response)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ListViewLogs200Response>> ListViewLogsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(fetchkptncook.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            localVarRequestOptions.Operation = "ApiApi.ListViewLogs";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListViewLogs200Response>("/api/view-log/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListViewLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  function to reset inheritance from api, see food method for docs
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> ListresetFoodInheritances(int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<List<Object>> localVarResponse = ListresetFoodInheritancesWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        ///  function to reset inheritance from api, see food method for docs
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public fetchkptncook.Client.ApiResponse<List<Object>> ListresetFoodInheritancesWithHttpInfo(int operationIndex = 0)
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListresetFoodInheritances";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Object>>("/api/reset-food-inheritance/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListresetFoodInheritances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  function to reset inheritance from api, see food method for docs
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> ListresetFoodInheritancesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<List<Object>> localVarResponse = await ListresetFoodInheritancesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  function to reset inheritance from api, see food method for docs
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<List<Object>>> ListresetFoodInheritancesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "ApiApi.ListresetFoodInheritances";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Object>>("/api/reset-food-inheritance/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListresetFoodInheritances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="target"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        public Food MergeFood(string id, string target, Food food = default(Food), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = MergeFoodWithHttpInfo(id, target, food);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="target"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        public fetchkptncook.Client.ApiResponse<Food> MergeFoodWithHttpInfo(string id, string target, Food food = default(Food), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MergeFood");
            }
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'target' when calling ApiApi->MergeFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", fetchkptncook.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.MergeFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Food>("/api/food/{id}/merge/{target}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="target"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        public async System.Threading.Tasks.Task<Food> MergeFoodAsync(string id, string target, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = await MergeFoodWithHttpInfoAsync(id, target, food, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="target"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Food>> MergeFoodWithHttpInfoAsync(string id, string target, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MergeFood");
            }
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'target' when calling ApiApi->MergeFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", fetchkptncook.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.MergeFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Food>("/api/food/{id}/merge/{target}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="target"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        public Keyword MergeKeyword(string id, string target, Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = MergeKeywordWithHttpInfo(id, target, keyword);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="target"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        public fetchkptncook.Client.ApiResponse<Keyword> MergeKeywordWithHttpInfo(string id, string target, Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MergeKeyword");
            }
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'target' when calling ApiApi->MergeKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", fetchkptncook.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.MergeKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Keyword>("/api/keyword/{id}/merge/{target}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="target"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        public async System.Threading.Tasks.Task<Keyword> MergeKeywordAsync(string id, string target, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = await MergeKeywordWithHttpInfoAsync(id, target, keyword, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="target"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Keyword>> MergeKeywordWithHttpInfoAsync(string id, string target, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MergeKeyword");
            }
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'target' when calling ApiApi->MergeKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", fetchkptncook.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.MergeKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Keyword>("/api/keyword/{id}/merge/{target}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="target"></param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        public Unit MergeUnit(string id, string target, Unit unit = default(Unit), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = MergeUnitWithHttpInfo(id, target, unit);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="target"></param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        public fetchkptncook.Client.ApiResponse<Unit> MergeUnitWithHttpInfo(string id, string target, Unit unit = default(Unit), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MergeUnit");
            }
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'target' when calling ApiApi->MergeUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", fetchkptncook.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = unit;
            localVarRequestOptions.Operation = "ApiApi.MergeUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Unit>("/api/unit/{id}/merge/{target}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="target"></param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        public async System.Threading.Tasks.Task<Unit> MergeUnitAsync(string id, string target, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = await MergeUnitWithHttpInfoAsync(id, target, unit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="target"></param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Unit>> MergeUnitWithHttpInfoAsync(string id, string target, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MergeUnit");
            }
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'target' when calling ApiApi->MergeUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", fetchkptncook.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = unit;
            localVarRequestOptions.Operation = "ApiApi.MergeUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Unit>("/api/unit/{id}/merge/{target}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="parent"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        public Food MoveFood(string id, string parent, Food food = default(Food), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = MoveFoodWithHttpInfo(id, parent, food);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="parent"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        public fetchkptncook.Client.ApiResponse<Food> MoveFoodWithHttpInfo(string id, string parent, Food food = default(Food), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MoveFood");
            }
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'parent' when calling ApiApi->MoveFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent", fetchkptncook.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.MoveFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Food>("/api/food/{id}/move/{parent}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="parent"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        public async System.Threading.Tasks.Task<Food> MoveFoodAsync(string id, string parent, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = await MoveFoodWithHttpInfoAsync(id, parent, food, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="parent"></param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Food>> MoveFoodWithHttpInfoAsync(string id, string parent, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MoveFood");
            }
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'parent' when calling ApiApi->MoveFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent", fetchkptncook.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.MoveFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Food>("/api/food/{id}/move/{parent}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="parent"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        public Keyword MoveKeyword(string id, string parent, Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = MoveKeywordWithHttpInfo(id, parent, keyword);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="parent"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        public fetchkptncook.Client.ApiResponse<Keyword> MoveKeywordWithHttpInfo(string id, string parent, Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MoveKeyword");
            }
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'parent' when calling ApiApi->MoveKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent", fetchkptncook.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.MoveKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Keyword>("/api/keyword/{id}/move/{parent}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="parent"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        public async System.Threading.Tasks.Task<Keyword> MoveKeywordAsync(string id, string parent, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = await MoveKeywordWithHttpInfoAsync(id, parent, keyword, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="parent"></param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Keyword>> MoveKeywordWithHttpInfoAsync(string id, string parent, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->MoveKeyword");
            }
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'parent' when calling ApiApi->MoveKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent", fetchkptncook.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.MoveKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Keyword>("/api/keyword/{id}/move/{parent}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        public AccessToken PartialUpdateAccessToken(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<AccessToken> localVarResponse = PartialUpdateAccessTokenWithHttpInfo(id, accessToken);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        public fetchkptncook.Client.ApiResponse<AccessToken> PartialUpdateAccessTokenWithHttpInfo(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateAccessToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = accessToken;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<AccessToken>("/api/access-token/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        public async System.Threading.Tasks.Task<AccessToken> PartialUpdateAccessTokenAsync(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<AccessToken> localVarResponse = await PartialUpdateAccessTokenWithHttpInfoAsync(id, accessToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<AccessToken>> PartialUpdateAccessTokenWithHttpInfoAsync(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateAccessToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = accessToken;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AccessToken>("/api/access-token/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        public Automation PartialUpdateAutomation(string id, Automation automation = default(Automation), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Automation> localVarResponse = PartialUpdateAutomationWithHttpInfo(id, automation);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        public fetchkptncook.Client.ApiResponse<Automation> PartialUpdateAutomationWithHttpInfo(string id, Automation automation = default(Automation), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateAutomation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = automation;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Automation>("/api/automation/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        public async System.Threading.Tasks.Task<Automation> PartialUpdateAutomationAsync(string id, Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Automation> localVarResponse = await PartialUpdateAutomationWithHttpInfoAsync(id, automation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Automation>> PartialUpdateAutomationWithHttpInfoAsync(string id, Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateAutomation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = automation;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Automation>("/api/automation/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkletImport</returns>
        public BookmarkletImport PartialUpdateBookmarkletImport(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<BookmarkletImport> localVarResponse = PartialUpdateBookmarkletImportWithHttpInfo(id, bookmarkletImport);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkletImport</returns>
        public fetchkptncook.Client.ApiResponse<BookmarkletImport> PartialUpdateBookmarkletImportWithHttpInfo(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateBookmarkletImport");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bookmarkletImport;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<BookmarkletImport>("/api/bookmarklet-import/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkletImport</returns>
        public async System.Threading.Tasks.Task<BookmarkletImport> PartialUpdateBookmarkletImportAsync(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<BookmarkletImport> localVarResponse = await PartialUpdateBookmarkletImportWithHttpInfoAsync(id, bookmarkletImport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkletImport)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<BookmarkletImport>> PartialUpdateBookmarkletImportWithHttpInfoAsync(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateBookmarkletImport");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bookmarkletImport;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<BookmarkletImport>("/api/bookmarklet-import/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CookLog</returns>
        public CookLog PartialUpdateCookLog(string id, CookLog cookLog = default(CookLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<CookLog> localVarResponse = PartialUpdateCookLogWithHttpInfo(id, cookLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CookLog</returns>
        public fetchkptncook.Client.ApiResponse<CookLog> PartialUpdateCookLogWithHttpInfo(string id, CookLog cookLog = default(CookLog), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateCookLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = cookLog;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<CookLog>("/api/cook-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CookLog</returns>
        public async System.Threading.Tasks.Task<CookLog> PartialUpdateCookLogAsync(string id, CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<CookLog> localVarResponse = await PartialUpdateCookLogWithHttpInfoAsync(id, cookLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CookLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<CookLog>> PartialUpdateCookLogWithHttpInfoAsync(string id, CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateCookLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = cookLog;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CookLog>("/api/cook-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFilter</returns>
        public CustomFilter PartialUpdateCustomFilter(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<CustomFilter> localVarResponse = PartialUpdateCustomFilterWithHttpInfo(id, customFilter);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFilter</returns>
        public fetchkptncook.Client.ApiResponse<CustomFilter> PartialUpdateCustomFilterWithHttpInfo(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateCustomFilter");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customFilter;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFilter>("/api/custom-filter/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFilter</returns>
        public async System.Threading.Tasks.Task<CustomFilter> PartialUpdateCustomFilterAsync(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<CustomFilter> localVarResponse = await PartialUpdateCustomFilterWithHttpInfoAsync(id, customFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFilter)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<CustomFilter>> PartialUpdateCustomFilterWithHttpInfoAsync(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateCustomFilter");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customFilter;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFilter>("/api/custom-filter/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLog</returns>
        public ExportLog PartialUpdateExportLog(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ExportLog> localVarResponse = PartialUpdateExportLogWithHttpInfo(id, exportLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLog</returns>
        public fetchkptncook.Client.ApiResponse<ExportLog> PartialUpdateExportLogWithHttpInfo(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateExportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = exportLog;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<ExportLog>("/api/export-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLog</returns>
        public async System.Threading.Tasks.Task<ExportLog> PartialUpdateExportLogAsync(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ExportLog> localVarResponse = await PartialUpdateExportLogWithHttpInfoAsync(id, exportLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ExportLog>> PartialUpdateExportLogWithHttpInfoAsync(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateExportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = exportLog;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ExportLog>("/api/export-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        public Food PartialUpdateFood(string id, Food food = default(Food), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = PartialUpdateFoodWithHttpInfo(id, food);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        public fetchkptncook.Client.ApiResponse<Food> PartialUpdateFoodWithHttpInfo(string id, Food food = default(Food), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Food>("/api/food/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        public async System.Threading.Tasks.Task<Food> PartialUpdateFoodAsync(string id, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = await PartialUpdateFoodWithHttpInfoAsync(id, food, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Food>> PartialUpdateFoodWithHttpInfoAsync(string id, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Food>("/api/food/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportLog</returns>
        public ImportLog PartialUpdateImportLog(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ImportLog> localVarResponse = PartialUpdateImportLogWithHttpInfo(id, importLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportLog</returns>
        public fetchkptncook.Client.ApiResponse<ImportLog> PartialUpdateImportLogWithHttpInfo(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateImportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = importLog;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<ImportLog>("/api/import-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportLog</returns>
        public async System.Threading.Tasks.Task<ImportLog> PartialUpdateImportLogAsync(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ImportLog> localVarResponse = await PartialUpdateImportLogWithHttpInfoAsync(id, importLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ImportLog>> PartialUpdateImportLogWithHttpInfoAsync(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateImportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = importLog;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ImportLog>("/api/import-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Ingredient</returns>
        public Ingredient PartialUpdateIngredient(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Ingredient> localVarResponse = PartialUpdateIngredientWithHttpInfo(id, ingredient);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Ingredient</returns>
        public fetchkptncook.Client.ApiResponse<Ingredient> PartialUpdateIngredientWithHttpInfo(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateIngredient");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = ingredient;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Ingredient>("/api/ingredient/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ingredient</returns>
        public async System.Threading.Tasks.Task<Ingredient> PartialUpdateIngredientAsync(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Ingredient> localVarResponse = await PartialUpdateIngredientWithHttpInfoAsync(id, ingredient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ingredient)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Ingredient>> PartialUpdateIngredientWithHttpInfoAsync(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateIngredient");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = ingredient;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Ingredient>("/api/ingredient/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteLink</returns>
        public InviteLink PartialUpdateInviteLink(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<InviteLink> localVarResponse = PartialUpdateInviteLinkWithHttpInfo(id, inviteLink);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteLink</returns>
        public fetchkptncook.Client.ApiResponse<InviteLink> PartialUpdateInviteLinkWithHttpInfo(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateInviteLink");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inviteLink;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<InviteLink>("/api/invite-link/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteLink</returns>
        public async System.Threading.Tasks.Task<InviteLink> PartialUpdateInviteLinkAsync(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<InviteLink> localVarResponse = await PartialUpdateInviteLinkWithHttpInfoAsync(id, inviteLink, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteLink)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<InviteLink>> PartialUpdateInviteLinkWithHttpInfoAsync(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateInviteLink");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inviteLink;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<InviteLink>("/api/invite-link/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        public Keyword PartialUpdateKeyword(string id, Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = PartialUpdateKeywordWithHttpInfo(id, keyword);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        public fetchkptncook.Client.ApiResponse<Keyword> PartialUpdateKeywordWithHttpInfo(string id, Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Keyword>("/api/keyword/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        public async System.Threading.Tasks.Task<Keyword> PartialUpdateKeywordAsync(string id, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = await PartialUpdateKeywordWithHttpInfoAsync(id, keyword, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Keyword>> PartialUpdateKeywordWithHttpInfoAsync(string id, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Keyword>("/api/keyword/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealPlan</returns>
        public MealPlan PartialUpdateMealPlan(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<MealPlan> localVarResponse = PartialUpdateMealPlanWithHttpInfo(id, mealPlan);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealPlan</returns>
        public fetchkptncook.Client.ApiResponse<MealPlan> PartialUpdateMealPlanWithHttpInfo(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateMealPlan");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mealPlan;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<MealPlan>("/api/meal-plan/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealPlan</returns>
        public async System.Threading.Tasks.Task<MealPlan> PartialUpdateMealPlanAsync(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<MealPlan> localVarResponse = await PartialUpdateMealPlanWithHttpInfoAsync(id, mealPlan, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealPlan)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<MealPlan>> PartialUpdateMealPlanWithHttpInfoAsync(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateMealPlan");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mealPlan;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<MealPlan>("/api/meal-plan/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealType</returns>
        public MealType PartialUpdateMealType(string id, MealType mealType = default(MealType), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<MealType> localVarResponse = PartialUpdateMealTypeWithHttpInfo(id, mealType);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealType</returns>
        public fetchkptncook.Client.ApiResponse<MealType> PartialUpdateMealTypeWithHttpInfo(string id, MealType mealType = default(MealType), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateMealType");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mealType;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<MealType>("/api/meal-type/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealType</returns>
        public async System.Threading.Tasks.Task<MealType> PartialUpdateMealTypeAsync(string id, MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<MealType> localVarResponse = await PartialUpdateMealTypeWithHttpInfoAsync(id, mealType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealType)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<MealType>> PartialUpdateMealTypeWithHttpInfoAsync(string id, MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateMealType");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mealType;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<MealType>("/api/meal-type/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Recipe</returns>
        public Recipe PartialUpdateRecipe(string id, Recipe recipe = default(Recipe), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Recipe> localVarResponse = PartialUpdateRecipeWithHttpInfo(id, recipe);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Recipe</returns>
        public fetchkptncook.Client.ApiResponse<Recipe> PartialUpdateRecipeWithHttpInfo(string id, Recipe recipe = default(Recipe), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipe;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Recipe>("/api/recipe/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Recipe</returns>
        public async System.Threading.Tasks.Task<Recipe> PartialUpdateRecipeAsync(string id, Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Recipe> localVarResponse = await PartialUpdateRecipeWithHttpInfoAsync(id, recipe, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Recipe>> PartialUpdateRecipeWithHttpInfoAsync(string id, Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipe;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Recipe>("/api/recipe/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBook</returns>
        public RecipeBook PartialUpdateRecipeBook(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeBook> localVarResponse = PartialUpdateRecipeBookWithHttpInfo(id, recipeBook);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBook</returns>
        public fetchkptncook.Client.ApiResponse<RecipeBook> PartialUpdateRecipeBookWithHttpInfo(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateRecipeBook");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeBook;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<RecipeBook>("/api/recipe-book/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBook</returns>
        public async System.Threading.Tasks.Task<RecipeBook> PartialUpdateRecipeBookAsync(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeBook> localVarResponse = await PartialUpdateRecipeBookWithHttpInfoAsync(id, recipeBook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBook)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeBook>> PartialUpdateRecipeBookWithHttpInfoAsync(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateRecipeBook");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeBook;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RecipeBook>("/api/recipe-book/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBookEntry</returns>
        public RecipeBookEntry PartialUpdateRecipeBookEntry(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeBookEntry> localVarResponse = PartialUpdateRecipeBookEntryWithHttpInfo(id, recipeBookEntry);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBookEntry</returns>
        public fetchkptncook.Client.ApiResponse<RecipeBookEntry> PartialUpdateRecipeBookEntryWithHttpInfo(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateRecipeBookEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeBookEntry;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<RecipeBookEntry>("/api/recipe-book-entry/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBookEntry</returns>
        public async System.Threading.Tasks.Task<RecipeBookEntry> PartialUpdateRecipeBookEntryAsync(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeBookEntry> localVarResponse = await PartialUpdateRecipeBookEntryWithHttpInfoAsync(id, recipeBookEntry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBookEntry)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeBookEntry>> PartialUpdateRecipeBookEntryWithHttpInfoAsync(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateRecipeBookEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeBookEntry;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RecipeBookEntry>("/api/recipe-book-entry/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingList</returns>
        public ShoppingList PartialUpdateShoppingList(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingList> localVarResponse = PartialUpdateShoppingListWithHttpInfo(id, shoppingList);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingList</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingList> PartialUpdateShoppingListWithHttpInfo(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateShoppingList");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingList;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<ShoppingList>("/api/shopping-list/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingList</returns>
        public async System.Threading.Tasks.Task<ShoppingList> PartialUpdateShoppingListAsync(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingList> localVarResponse = await PartialUpdateShoppingListWithHttpInfoAsync(id, shoppingList, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingList)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingList>> PartialUpdateShoppingListWithHttpInfoAsync(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateShoppingList");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingList;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ShoppingList>("/api/shopping-list/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListEntry</returns>
        public ShoppingListEntry PartialUpdateShoppingListEntry(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingListEntry> localVarResponse = PartialUpdateShoppingListEntryWithHttpInfo(id, shoppingListEntry);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListEntry</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingListEntry> PartialUpdateShoppingListEntryWithHttpInfo(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateShoppingListEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingListEntry;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<ShoppingListEntry>("/api/shopping-list-entry/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListEntry</returns>
        public async System.Threading.Tasks.Task<ShoppingListEntry> PartialUpdateShoppingListEntryAsync(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingListEntry> localVarResponse = await PartialUpdateShoppingListEntryWithHttpInfoAsync(id, shoppingListEntry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListEntry)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingListEntry>> PartialUpdateShoppingListEntryWithHttpInfoAsync(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateShoppingListEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingListEntry;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ShoppingListEntry>("/api/shopping-list-entry/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListRecipe</returns>
        public ShoppingListRecipe PartialUpdateShoppingListRecipe(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingListRecipe> localVarResponse = PartialUpdateShoppingListRecipeWithHttpInfo(id, shoppingListRecipe);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListRecipe</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingListRecipe> PartialUpdateShoppingListRecipeWithHttpInfo(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateShoppingListRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingListRecipe;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<ShoppingListRecipe>("/api/shopping-list-recipe/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListRecipe</returns>
        public async System.Threading.Tasks.Task<ShoppingListRecipe> PartialUpdateShoppingListRecipeAsync(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingListRecipe> localVarResponse = await PartialUpdateShoppingListRecipeWithHttpInfoAsync(id, shoppingListRecipe, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListRecipe)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingListRecipe>> PartialUpdateShoppingListRecipeWithHttpInfoAsync(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateShoppingListRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingListRecipe;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ShoppingListRecipe>("/api/shopping-list-recipe/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="space"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Space</returns>
        public Space PartialUpdateSpace(string id, Space space = default(Space), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Space> localVarResponse = PartialUpdateSpaceWithHttpInfo(id, space);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="space"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Space</returns>
        public fetchkptncook.Client.ApiResponse<Space> PartialUpdateSpaceWithHttpInfo(string id, Space space = default(Space), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = space;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Space>("/api/space/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="space"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Space</returns>
        public async System.Threading.Tasks.Task<Space> PartialUpdateSpaceAsync(string id, Space space = default(Space), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Space> localVarResponse = await PartialUpdateSpaceWithHttpInfoAsync(id, space, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="space"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Space)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Space>> PartialUpdateSpaceWithHttpInfoAsync(string id, Space space = default(Space), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = space;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Space>("/api/space/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Step</returns>
        public Step PartialUpdateStep(string id, Step step = default(Step), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Step> localVarResponse = PartialUpdateStepWithHttpInfo(id, step);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Step</returns>
        public fetchkptncook.Client.ApiResponse<Step> PartialUpdateStepWithHttpInfo(string id, Step step = default(Step), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateStep");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = step;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Step>("/api/step/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Step</returns>
        public async System.Threading.Tasks.Task<Step> PartialUpdateStepAsync(string id, Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Step> localVarResponse = await PartialUpdateStepWithHttpInfoAsync(id, step, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Step)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Step>> PartialUpdateStepWithHttpInfoAsync(string id, Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateStep");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = step;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Step>("/api/step/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Storage</returns>
        public Storage PartialUpdateStorage(string id, Storage storage = default(Storage), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Storage> localVarResponse = PartialUpdateStorageWithHttpInfo(id, storage);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Storage</returns>
        public fetchkptncook.Client.ApiResponse<Storage> PartialUpdateStorageWithHttpInfo(string id, Storage storage = default(Storage), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateStorage");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = storage;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Storage>("/api/storage/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Storage</returns>
        public async System.Threading.Tasks.Task<Storage> PartialUpdateStorageAsync(string id, Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Storage> localVarResponse = await PartialUpdateStorageWithHttpInfoAsync(id, storage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Storage)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Storage>> PartialUpdateStorageWithHttpInfoAsync(string id, Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateStorage");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = storage;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Storage>("/api/storage/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Supermarket</returns>
        public Supermarket PartialUpdateSupermarket(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Supermarket> localVarResponse = PartialUpdateSupermarketWithHttpInfo(id, supermarket);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Supermarket</returns>
        public fetchkptncook.Client.ApiResponse<Supermarket> PartialUpdateSupermarketWithHttpInfo(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSupermarket");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarket;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Supermarket>("/api/supermarket/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Supermarket</returns>
        public async System.Threading.Tasks.Task<Supermarket> PartialUpdateSupermarketAsync(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Supermarket> localVarResponse = await PartialUpdateSupermarketWithHttpInfoAsync(id, supermarket, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Supermarket)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Supermarket>> PartialUpdateSupermarketWithHttpInfoAsync(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSupermarket");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarket;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Supermarket>("/api/supermarket/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategory</returns>
        public SupermarketCategory PartialUpdateSupermarketCategory(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategory> localVarResponse = PartialUpdateSupermarketCategoryWithHttpInfo(id, supermarketCategory);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategory</returns>
        public fetchkptncook.Client.ApiResponse<SupermarketCategory> PartialUpdateSupermarketCategoryWithHttpInfo(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSupermarketCategory");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarketCategory;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<SupermarketCategory>("/api/supermarket-category/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategory</returns>
        public async System.Threading.Tasks.Task<SupermarketCategory> PartialUpdateSupermarketCategoryAsync(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategory> localVarResponse = await PartialUpdateSupermarketCategoryWithHttpInfoAsync(id, supermarketCategory, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategory)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<SupermarketCategory>> PartialUpdateSupermarketCategoryWithHttpInfoAsync(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSupermarketCategory");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarketCategory;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SupermarketCategory>("/api/supermarket-category/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategoryRelation</returns>
        public SupermarketCategoryRelation PartialUpdateSupermarketCategoryRelation(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> localVarResponse = PartialUpdateSupermarketCategoryRelationWithHttpInfo(id, supermarketCategoryRelation);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategoryRelation</returns>
        public fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> PartialUpdateSupermarketCategoryRelationWithHttpInfo(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSupermarketCategoryRelation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarketCategoryRelation;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<SupermarketCategoryRelation>("/api/supermarket-category-relation/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategoryRelation</returns>
        public async System.Threading.Tasks.Task<SupermarketCategoryRelation> PartialUpdateSupermarketCategoryRelationAsync(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> localVarResponse = await PartialUpdateSupermarketCategoryRelationWithHttpInfoAsync(id, supermarketCategoryRelation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategoryRelation)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation>> PartialUpdateSupermarketCategoryRelationWithHttpInfoAsync(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSupermarketCategoryRelation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarketCategoryRelation;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SupermarketCategoryRelation>("/api/supermarket-category-relation/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Sync</returns>
        public Sync PartialUpdateSync(string id, Sync sync = default(Sync), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Sync> localVarResponse = PartialUpdateSyncWithHttpInfo(id, sync);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Sync</returns>
        public fetchkptncook.Client.ApiResponse<Sync> PartialUpdateSyncWithHttpInfo(string id, Sync sync = default(Sync), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSync");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = sync;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Sync>("/api/sync/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sync</returns>
        public async System.Threading.Tasks.Task<Sync> PartialUpdateSyncAsync(string id, Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Sync> localVarResponse = await PartialUpdateSyncWithHttpInfoAsync(id, sync, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sync)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Sync>> PartialUpdateSyncWithHttpInfoAsync(string id, Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateSync");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = sync;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateSync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Sync>("/api/sync/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        public Unit PartialUpdateUnit(string id, Unit unit = default(Unit), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = PartialUpdateUnitWithHttpInfo(id, unit);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        public fetchkptncook.Client.ApiResponse<Unit> PartialUpdateUnitWithHttpInfo(string id, Unit unit = default(Unit), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = unit;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<Unit>("/api/unit/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        public async System.Threading.Tasks.Task<Unit> PartialUpdateUnitAsync(string id, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = await PartialUpdateUnitWithHttpInfoAsync(id, unit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Unit>> PartialUpdateUnitWithHttpInfoAsync(string id, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = unit;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Unit>("/api/unit/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User PartialUpdateUser(string id, User user = default(User), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<User> localVarResponse = PartialUpdateUserWithHttpInfo(id, user);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public fetchkptncook.Client.ApiResponse<User> PartialUpdateUserWithHttpInfo(string id, User user = default(User), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateUser");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = user;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<User>("/api/user/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> PartialUpdateUserAsync(string id, User user = default(User), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<User> localVarResponse = await PartialUpdateUserWithHttpInfoAsync(id, user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<User>> PartialUpdateUserWithHttpInfoAsync(string id, User user = default(User), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateUser");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = user;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<User>("/api/user/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFile</returns>
        public UserFile PartialUpdateUserFile(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<UserFile> localVarResponse = PartialUpdateUserFileWithHttpInfo(id, name, file, id2, fileDownload, preview, fileSizeKb);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFile</returns>
        public fetchkptncook.Client.ApiResponse<UserFile> PartialUpdateUserFileWithHttpInfo(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateUserFile");
            }
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'name' when calling ApiApi->PartialUpdateUserFile");
            }
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'file' when calling ApiApi->PartialUpdateUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (id2 != null)
            {
                localVarRequestOptions.FormParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id2)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("name", fetchkptncook.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            if (fileDownload != null)
            {
                localVarRequestOptions.FormParameters.Add("file_download", fetchkptncook.Client.ClientUtils.ParameterToString(fileDownload)); // form parameter
            }
            if (preview != null)
            {
                localVarRequestOptions.FormParameters.Add("preview", fetchkptncook.Client.ClientUtils.ParameterToString(preview)); // form parameter
            }
            if (fileSizeKb != null)
            {
                localVarRequestOptions.FormParameters.Add("file_size_kb", fetchkptncook.Client.ClientUtils.ParameterToString(fileSizeKb)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserFile>("/api/user-file/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFile</returns>
        public async System.Threading.Tasks.Task<UserFile> PartialUpdateUserFileAsync(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<UserFile> localVarResponse = await PartialUpdateUserFileWithHttpInfoAsync(id, name, file, id2, fileDownload, preview, fileSizeKb, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFile)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<UserFile>> PartialUpdateUserFileWithHttpInfoAsync(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateUserFile");
            }
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'name' when calling ApiApi->PartialUpdateUserFile");
            }
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'file' when calling ApiApi->PartialUpdateUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (id2 != null)
            {
                localVarRequestOptions.FormParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id2)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("name", fetchkptncook.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            if (fileDownload != null)
            {
                localVarRequestOptions.FormParameters.Add("file_download", fetchkptncook.Client.ClientUtils.ParameterToString(fileDownload)); // form parameter
            }
            if (preview != null)
            {
                localVarRequestOptions.FormParameters.Add("preview", fetchkptncook.Client.ClientUtils.ParameterToString(preview)); // form parameter
            }
            if (fileSizeKb != null)
            {
                localVarRequestOptions.FormParameters.Add("file_size_kb", fetchkptncook.Client.ClientUtils.ParameterToString(fileSizeKb)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserFile>("/api/user-file/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="userPreference"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserPreference</returns>
        public UserPreference PartialUpdateUserPreference(string user, UserPreference userPreference = default(UserPreference), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<UserPreference> localVarResponse = PartialUpdateUserPreferenceWithHttpInfo(user, userPreference);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="userPreference"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserPreference</returns>
        public fetchkptncook.Client.ApiResponse<UserPreference> PartialUpdateUserPreferenceWithHttpInfo(string user, UserPreference userPreference = default(UserPreference), int operationIndex = 0)
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'user' when calling ApiApi->PartialUpdateUserPreference");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("user", fetchkptncook.Client.ClientUtils.ParameterToString(user)); // path parameter
            localVarRequestOptions.Data = userPreference;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUserPreference";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserPreference>("/api/user-preference/{user}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUserPreference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="userPreference"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPreference</returns>
        public async System.Threading.Tasks.Task<UserPreference> PartialUpdateUserPreferenceAsync(string user, UserPreference userPreference = default(UserPreference), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<UserPreference> localVarResponse = await PartialUpdateUserPreferenceWithHttpInfoAsync(user, userPreference, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="userPreference"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPreference)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<UserPreference>> PartialUpdateUserPreferenceWithHttpInfoAsync(string user, UserPreference userPreference = default(UserPreference), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'user' when calling ApiApi->PartialUpdateUserPreference");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("user", fetchkptncook.Client.ClientUtils.ParameterToString(user)); // path parameter
            localVarRequestOptions.Data = userPreference;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUserPreference";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserPreference>("/api/user-preference/{user}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUserPreference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="userSpace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSpace</returns>
        public UserSpace PartialUpdateUserSpace(string id, UserSpace userSpace = default(UserSpace), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<UserSpace> localVarResponse = PartialUpdateUserSpaceWithHttpInfo(id, userSpace);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="userSpace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSpace</returns>
        public fetchkptncook.Client.ApiResponse<UserSpace> PartialUpdateUserSpaceWithHttpInfo(string id, UserSpace userSpace = default(UserSpace), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateUserSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userSpace;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUserSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserSpace>("/api/user-space/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUserSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="userSpace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSpace</returns>
        public async System.Threading.Tasks.Task<UserSpace> PartialUpdateUserSpaceAsync(string id, UserSpace userSpace = default(UserSpace), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<UserSpace> localVarResponse = await PartialUpdateUserSpaceWithHttpInfoAsync(id, userSpace, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="userSpace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSpace)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<UserSpace>> PartialUpdateUserSpaceWithHttpInfoAsync(string id, UserSpace userSpace = default(UserSpace), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateUserSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userSpace;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateUserSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserSpace>("/api/user-space/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateUserSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewLog</returns>
        public ViewLog PartialUpdateViewLog(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ViewLog> localVarResponse = PartialUpdateViewLogWithHttpInfo(id, viewLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewLog</returns>
        public fetchkptncook.Client.ApiResponse<ViewLog> PartialUpdateViewLogWithHttpInfo(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateViewLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = viewLog;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Patch<ViewLog>("/api/view-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewLog</returns>
        public async System.Threading.Tasks.Task<ViewLog> PartialUpdateViewLogAsync(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ViewLog> localVarResponse = await PartialUpdateViewLogWithHttpInfoAsync(id, viewLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ViewLog>> PartialUpdateViewLogWithHttpInfoAsync(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->PartialUpdateViewLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = viewLog;
            localVarRequestOptions.Operation = "ApiApi.PartialUpdateViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ViewLog>("/api/view-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeSimple</returns>
        public RecipeSimple RelatedRecipe(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeSimple> localVarResponse = RelatedRecipeWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeSimple</returns>
        public fetchkptncook.Client.ApiResponse<RecipeSimple> RelatedRecipeWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RelatedRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RelatedRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<RecipeSimple>("/api/recipe/{id}/related/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RelatedRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeSimple</returns>
        public async System.Threading.Tasks.Task<RecipeSimple> RelatedRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeSimple> localVarResponse = await RelatedRecipeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeSimple)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeSimple>> RelatedRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RelatedRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RelatedRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecipeSimple>("/api/recipe/{id}/related/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RelatedRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        public AccessToken RetrieveAccessToken(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<AccessToken> localVarResponse = RetrieveAccessTokenWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        public fetchkptncook.Client.ApiResponse<AccessToken> RetrieveAccessTokenWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveAccessToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<AccessToken>("/api/access-token/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        public async System.Threading.Tasks.Task<AccessToken> RetrieveAccessTokenAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<AccessToken> localVarResponse = await RetrieveAccessTokenWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<AccessToken>> RetrieveAccessTokenWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveAccessToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccessToken>("/api/access-token/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        public Automation RetrieveAutomation(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Automation> localVarResponse = RetrieveAutomationWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        public fetchkptncook.Client.ApiResponse<Automation> RetrieveAutomationWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveAutomation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Automation>("/api/automation/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        public async System.Threading.Tasks.Task<Automation> RetrieveAutomationAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Automation> localVarResponse = await RetrieveAutomationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Automation>> RetrieveAutomationWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveAutomation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Automation>("/api/automation/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkletImport</returns>
        public BookmarkletImport RetrieveBookmarkletImport(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<BookmarkletImport> localVarResponse = RetrieveBookmarkletImportWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkletImport</returns>
        public fetchkptncook.Client.ApiResponse<BookmarkletImport> RetrieveBookmarkletImportWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveBookmarkletImport");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<BookmarkletImport>("/api/bookmarklet-import/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkletImport</returns>
        public async System.Threading.Tasks.Task<BookmarkletImport> RetrieveBookmarkletImportAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<BookmarkletImport> localVarResponse = await RetrieveBookmarkletImportWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkletImport)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<BookmarkletImport>> RetrieveBookmarkletImportWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveBookmarkletImport");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BookmarkletImport>("/api/bookmarklet-import/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CookLog</returns>
        public CookLog RetrieveCookLog(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<CookLog> localVarResponse = RetrieveCookLogWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CookLog</returns>
        public fetchkptncook.Client.ApiResponse<CookLog> RetrieveCookLogWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveCookLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<CookLog>("/api/cook-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CookLog</returns>
        public async System.Threading.Tasks.Task<CookLog> RetrieveCookLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<CookLog> localVarResponse = await RetrieveCookLogWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CookLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<CookLog>> RetrieveCookLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveCookLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CookLog>("/api/cook-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFilter</returns>
        public CustomFilter RetrieveCustomFilter(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<CustomFilter> localVarResponse = RetrieveCustomFilterWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFilter</returns>
        public fetchkptncook.Client.ApiResponse<CustomFilter> RetrieveCustomFilterWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveCustomFilter");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomFilter>("/api/custom-filter/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFilter</returns>
        public async System.Threading.Tasks.Task<CustomFilter> RetrieveCustomFilterAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<CustomFilter> localVarResponse = await RetrieveCustomFilterWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFilter)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<CustomFilter>> RetrieveCustomFilterWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveCustomFilter");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomFilter>("/api/custom-filter/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLog</returns>
        public ExportLog RetrieveExportLog(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ExportLog> localVarResponse = RetrieveExportLogWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLog</returns>
        public fetchkptncook.Client.ApiResponse<ExportLog> RetrieveExportLogWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveExportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ExportLog>("/api/export-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLog</returns>
        public async System.Threading.Tasks.Task<ExportLog> RetrieveExportLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ExportLog> localVarResponse = await RetrieveExportLogWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ExportLog>> RetrieveExportLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveExportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExportLog>("/api/export-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        public Food RetrieveFood(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = RetrieveFoodWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        public fetchkptncook.Client.ApiResponse<Food> RetrieveFoodWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Food>("/api/food/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        public async System.Threading.Tasks.Task<Food> RetrieveFoodAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = await RetrieveFoodWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Food>> RetrieveFoodWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Food>("/api/food/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food inherit field.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FoodInheritField</returns>
        public FoodInheritField RetrieveFoodInheritField(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<FoodInheritField> localVarResponse = RetrieveFoodInheritFieldWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food inherit field.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FoodInheritField</returns>
        public fetchkptncook.Client.ApiResponse<FoodInheritField> RetrieveFoodInheritFieldWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveFoodInheritField");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveFoodInheritField";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<FoodInheritField>("/api/food-inherit-field/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFoodInheritField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food inherit field.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FoodInheritField</returns>
        public async System.Threading.Tasks.Task<FoodInheritField> RetrieveFoodInheritFieldAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<FoodInheritField> localVarResponse = await RetrieveFoodInheritFieldWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food inherit field.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FoodInheritField)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<FoodInheritField>> RetrieveFoodInheritFieldWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveFoodInheritField");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveFoodInheritField";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FoodInheritField>("/api/food-inherit-field/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFoodInheritField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        public Group RetrieveGroup(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Group> localVarResponse = RetrieveGroupWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        public fetchkptncook.Client.ApiResponse<Group> RetrieveGroupWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveGroup");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveGroup";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Group>("/api/group/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> RetrieveGroupAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Group> localVarResponse = await RetrieveGroupWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Group>> RetrieveGroupWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveGroup");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveGroup";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Group>("/api/group/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportLog</returns>
        public ImportLog RetrieveImportLog(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ImportLog> localVarResponse = RetrieveImportLogWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportLog</returns>
        public fetchkptncook.Client.ApiResponse<ImportLog> RetrieveImportLogWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveImportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ImportLog>("/api/import-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportLog</returns>
        public async System.Threading.Tasks.Task<ImportLog> RetrieveImportLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ImportLog> localVarResponse = await RetrieveImportLogWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ImportLog>> RetrieveImportLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveImportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ImportLog>("/api/import-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Ingredient</returns>
        public Ingredient RetrieveIngredient(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Ingredient> localVarResponse = RetrieveIngredientWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Ingredient</returns>
        public fetchkptncook.Client.ApiResponse<Ingredient> RetrieveIngredientWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveIngredient");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Ingredient>("/api/ingredient/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ingredient</returns>
        public async System.Threading.Tasks.Task<Ingredient> RetrieveIngredientAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Ingredient> localVarResponse = await RetrieveIngredientWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ingredient)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Ingredient>> RetrieveIngredientWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveIngredient");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Ingredient>("/api/ingredient/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteLink</returns>
        public InviteLink RetrieveInviteLink(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<InviteLink> localVarResponse = RetrieveInviteLinkWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteLink</returns>
        public fetchkptncook.Client.ApiResponse<InviteLink> RetrieveInviteLinkWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveInviteLink");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<InviteLink>("/api/invite-link/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteLink</returns>
        public async System.Threading.Tasks.Task<InviteLink> RetrieveInviteLinkAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<InviteLink> localVarResponse = await RetrieveInviteLinkWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteLink)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<InviteLink>> RetrieveInviteLinkWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveInviteLink");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InviteLink>("/api/invite-link/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        public Keyword RetrieveKeyword(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = RetrieveKeywordWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        public fetchkptncook.Client.ApiResponse<Keyword> RetrieveKeywordWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Keyword>("/api/keyword/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        public async System.Threading.Tasks.Task<Keyword> RetrieveKeywordAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = await RetrieveKeywordWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Keyword>> RetrieveKeywordWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Keyword>("/api/keyword/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealPlan</returns>
        public MealPlan RetrieveMealPlan(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<MealPlan> localVarResponse = RetrieveMealPlanWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealPlan</returns>
        public fetchkptncook.Client.ApiResponse<MealPlan> RetrieveMealPlanWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveMealPlan");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<MealPlan>("/api/meal-plan/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealPlan</returns>
        public async System.Threading.Tasks.Task<MealPlan> RetrieveMealPlanAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<MealPlan> localVarResponse = await RetrieveMealPlanWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealPlan)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<MealPlan>> RetrieveMealPlanWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveMealPlan");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MealPlan>("/api/meal-plan/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealType</returns>
        public MealType RetrieveMealType(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<MealType> localVarResponse = RetrieveMealTypeWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealType</returns>
        public fetchkptncook.Client.ApiResponse<MealType> RetrieveMealTypeWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveMealType");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<MealType>("/api/meal-type/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealType</returns>
        public async System.Threading.Tasks.Task<MealType> RetrieveMealTypeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<MealType> localVarResponse = await RetrieveMealTypeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealType)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<MealType>> RetrieveMealTypeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveMealType");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MealType>("/api/meal-type/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Recipe</returns>
        public Recipe RetrieveRecipe(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Recipe> localVarResponse = RetrieveRecipeWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Recipe</returns>
        public fetchkptncook.Client.ApiResponse<Recipe> RetrieveRecipeWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Recipe>("/api/recipe/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Recipe</returns>
        public async System.Threading.Tasks.Task<Recipe> RetrieveRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Recipe> localVarResponse = await RetrieveRecipeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Recipe>> RetrieveRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Recipe>("/api/recipe/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBook</returns>
        public RecipeBook RetrieveRecipeBook(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeBook> localVarResponse = RetrieveRecipeBookWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBook</returns>
        public fetchkptncook.Client.ApiResponse<RecipeBook> RetrieveRecipeBookWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveRecipeBook");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<RecipeBook>("/api/recipe-book/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBook</returns>
        public async System.Threading.Tasks.Task<RecipeBook> RetrieveRecipeBookAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeBook> localVarResponse = await RetrieveRecipeBookWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBook)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeBook>> RetrieveRecipeBookWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveRecipeBook");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecipeBook>("/api/recipe-book/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBookEntry</returns>
        public RecipeBookEntry RetrieveRecipeBookEntry(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeBookEntry> localVarResponse = RetrieveRecipeBookEntryWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBookEntry</returns>
        public fetchkptncook.Client.ApiResponse<RecipeBookEntry> RetrieveRecipeBookEntryWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveRecipeBookEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<RecipeBookEntry>("/api/recipe-book-entry/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBookEntry</returns>
        public async System.Threading.Tasks.Task<RecipeBookEntry> RetrieveRecipeBookEntryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeBookEntry> localVarResponse = await RetrieveRecipeBookEntryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBookEntry)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeBookEntry>> RetrieveRecipeBookEntryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveRecipeBookEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecipeBookEntry>("/api/recipe-book-entry/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingList</returns>
        public ShoppingList RetrieveShoppingList(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingList> localVarResponse = RetrieveShoppingListWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingList</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingList> RetrieveShoppingListWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveShoppingList");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ShoppingList>("/api/shopping-list/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingList</returns>
        public async System.Threading.Tasks.Task<ShoppingList> RetrieveShoppingListAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingList> localVarResponse = await RetrieveShoppingListWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingList)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingList>> RetrieveShoppingListWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveShoppingList");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ShoppingList>("/api/shopping-list/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListEntry</returns>
        public ShoppingListEntry RetrieveShoppingListEntry(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingListEntry> localVarResponse = RetrieveShoppingListEntryWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListEntry</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingListEntry> RetrieveShoppingListEntryWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveShoppingListEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ShoppingListEntry>("/api/shopping-list-entry/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListEntry</returns>
        public async System.Threading.Tasks.Task<ShoppingListEntry> RetrieveShoppingListEntryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingListEntry> localVarResponse = await RetrieveShoppingListEntryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListEntry)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingListEntry>> RetrieveShoppingListEntryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveShoppingListEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ShoppingListEntry>("/api/shopping-list-entry/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListRecipe</returns>
        public ShoppingListRecipe RetrieveShoppingListRecipe(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingListRecipe> localVarResponse = RetrieveShoppingListRecipeWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListRecipe</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingListRecipe> RetrieveShoppingListRecipeWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveShoppingListRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ShoppingListRecipe>("/api/shopping-list-recipe/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListRecipe</returns>
        public async System.Threading.Tasks.Task<ShoppingListRecipe> RetrieveShoppingListRecipeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingListRecipe> localVarResponse = await RetrieveShoppingListRecipeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListRecipe)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingListRecipe>> RetrieveShoppingListRecipeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveShoppingListRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ShoppingListRecipe>("/api/shopping-list-recipe/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Space</returns>
        public Space RetrieveSpace(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Space> localVarResponse = RetrieveSpaceWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Space</returns>
        public fetchkptncook.Client.ApiResponse<Space> RetrieveSpaceWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Space>("/api/space/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Space</returns>
        public async System.Threading.Tasks.Task<Space> RetrieveSpaceAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Space> localVarResponse = await RetrieveSpaceWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Space)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Space>> RetrieveSpaceWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Space>("/api/space/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Step</returns>
        public Step RetrieveStep(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Step> localVarResponse = RetrieveStepWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Step</returns>
        public fetchkptncook.Client.ApiResponse<Step> RetrieveStepWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveStep");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Step>("/api/step/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Step</returns>
        public async System.Threading.Tasks.Task<Step> RetrieveStepAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Step> localVarResponse = await RetrieveStepWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Step)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Step>> RetrieveStepWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveStep");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Step>("/api/step/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Storage</returns>
        public Storage RetrieveStorage(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Storage> localVarResponse = RetrieveStorageWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Storage</returns>
        public fetchkptncook.Client.ApiResponse<Storage> RetrieveStorageWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveStorage");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Storage>("/api/storage/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Storage</returns>
        public async System.Threading.Tasks.Task<Storage> RetrieveStorageAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Storage> localVarResponse = await RetrieveStorageWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Storage)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Storage>> RetrieveStorageWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveStorage");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Storage>("/api/storage/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Supermarket</returns>
        public Supermarket RetrieveSupermarket(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Supermarket> localVarResponse = RetrieveSupermarketWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Supermarket</returns>
        public fetchkptncook.Client.ApiResponse<Supermarket> RetrieveSupermarketWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSupermarket");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Supermarket>("/api/supermarket/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Supermarket</returns>
        public async System.Threading.Tasks.Task<Supermarket> RetrieveSupermarketAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Supermarket> localVarResponse = await RetrieveSupermarketWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Supermarket)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Supermarket>> RetrieveSupermarketWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSupermarket");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Supermarket>("/api/supermarket/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategory</returns>
        public SupermarketCategory RetrieveSupermarketCategory(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategory> localVarResponse = RetrieveSupermarketCategoryWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategory</returns>
        public fetchkptncook.Client.ApiResponse<SupermarketCategory> RetrieveSupermarketCategoryWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSupermarketCategory");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<SupermarketCategory>("/api/supermarket-category/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategory</returns>
        public async System.Threading.Tasks.Task<SupermarketCategory> RetrieveSupermarketCategoryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategory> localVarResponse = await RetrieveSupermarketCategoryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategory)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<SupermarketCategory>> RetrieveSupermarketCategoryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSupermarketCategory");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SupermarketCategory>("/api/supermarket-category/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategoryRelation</returns>
        public SupermarketCategoryRelation RetrieveSupermarketCategoryRelation(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> localVarResponse = RetrieveSupermarketCategoryRelationWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategoryRelation</returns>
        public fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> RetrieveSupermarketCategoryRelationWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSupermarketCategoryRelation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<SupermarketCategoryRelation>("/api/supermarket-category-relation/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategoryRelation</returns>
        public async System.Threading.Tasks.Task<SupermarketCategoryRelation> RetrieveSupermarketCategoryRelationAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> localVarResponse = await RetrieveSupermarketCategoryRelationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategoryRelation)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation>> RetrieveSupermarketCategoryRelationWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSupermarketCategoryRelation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SupermarketCategoryRelation>("/api/supermarket-category-relation/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Sync</returns>
        public Sync RetrieveSync(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Sync> localVarResponse = RetrieveSyncWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Sync</returns>
        public fetchkptncook.Client.ApiResponse<Sync> RetrieveSyncWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSync");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Sync>("/api/sync/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sync</returns>
        public async System.Threading.Tasks.Task<Sync> RetrieveSyncAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Sync> localVarResponse = await RetrieveSyncWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sync)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Sync>> RetrieveSyncWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSync");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Sync>("/api/sync/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SyncLog</returns>
        public SyncLog RetrieveSyncLog(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<SyncLog> localVarResponse = RetrieveSyncLogWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SyncLog</returns>
        public fetchkptncook.Client.ApiResponse<SyncLog> RetrieveSyncLogWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSyncLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSyncLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<SyncLog>("/api/sync-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSyncLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncLog</returns>
        public async System.Threading.Tasks.Task<SyncLog> RetrieveSyncLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<SyncLog> localVarResponse = await RetrieveSyncLogWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<SyncLog>> RetrieveSyncLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveSyncLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveSyncLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SyncLog>("/api/sync-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSyncLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        public Unit RetrieveUnit(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = RetrieveUnitWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        public fetchkptncook.Client.ApiResponse<Unit> RetrieveUnitWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Unit>("/api/unit/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        public async System.Threading.Tasks.Task<Unit> RetrieveUnitAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = await RetrieveUnitWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Unit>> RetrieveUnitWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Unit>("/api/unit/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User RetrieveUser(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<User> localVarResponse = RetrieveUserWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public fetchkptncook.Client.ApiResponse<User> RetrieveUserWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveUser");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUser";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/api/user/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> RetrieveUserAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<User> localVarResponse = await RetrieveUserWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<User>> RetrieveUserWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveUser");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUser";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/api/user/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFile</returns>
        public UserFile RetrieveUserFile(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<UserFile> localVarResponse = RetrieveUserFileWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFile</returns>
        public fetchkptncook.Client.ApiResponse<UserFile> RetrieveUserFileWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<UserFile>("/api/user-file/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFile</returns>
        public async System.Threading.Tasks.Task<UserFile> RetrieveUserFileAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<UserFile> localVarResponse = await RetrieveUserFileWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFile)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<UserFile>> RetrieveUserFileWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserFile>("/api/user-file/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserPreference</returns>
        public UserPreference RetrieveUserPreference(string user, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<UserPreference> localVarResponse = RetrieveUserPreferenceWithHttpInfo(user);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserPreference</returns>
        public fetchkptncook.Client.ApiResponse<UserPreference> RetrieveUserPreferenceWithHttpInfo(string user, int operationIndex = 0)
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'user' when calling ApiApi->RetrieveUserPreference");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("user", fetchkptncook.Client.ClientUtils.ParameterToString(user)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUserPreference";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<UserPreference>("/api/user-preference/{user}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUserPreference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPreference</returns>
        public async System.Threading.Tasks.Task<UserPreference> RetrieveUserPreferenceAsync(string user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<UserPreference> localVarResponse = await RetrieveUserPreferenceWithHttpInfoAsync(user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">A unique value identifying this user preference.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPreference)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<UserPreference>> RetrieveUserPreferenceWithHttpInfoAsync(string user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'user' when calling ApiApi->RetrieveUserPreference");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("user", fetchkptncook.Client.ClientUtils.ParameterToString(user)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUserPreference";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserPreference>("/api/user-preference/{user}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUserPreference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSpace</returns>
        public UserSpace RetrieveUserSpace(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<UserSpace> localVarResponse = RetrieveUserSpaceWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSpace</returns>
        public fetchkptncook.Client.ApiResponse<UserSpace> RetrieveUserSpaceWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveUserSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUserSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSpace>("/api/user-space/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUserSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSpace</returns>
        public async System.Threading.Tasks.Task<UserSpace> RetrieveUserSpaceAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<UserSpace> localVarResponse = await RetrieveUserSpaceWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user space.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSpace)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<UserSpace>> RetrieveUserSpaceWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveUserSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveUserSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSpace>("/api/user-space/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveUserSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewLog</returns>
        public ViewLog RetrieveViewLog(string id, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ViewLog> localVarResponse = RetrieveViewLogWithHttpInfo(id);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewLog</returns>
        public fetchkptncook.Client.ApiResponse<ViewLog> RetrieveViewLogWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveViewLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<ViewLog>("/api/view-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewLog</returns>
        public async System.Threading.Tasks.Task<ViewLog> RetrieveViewLogAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ViewLog> localVarResponse = await RetrieveViewLogWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ViewLog>> RetrieveViewLogWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->RetrieveViewLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ViewLog>("/api/view-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  function to download a user file securely (wrapping as zip to prevent any context based XSS problems) temporary solution until a real file manager is implemented
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RetrievedownloadFile(string fileId, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Object> localVarResponse = RetrievedownloadFileWithHttpInfo(fileId);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  function to download a user file securely (wrapping as zip to prevent any context based XSS problems) temporary solution until a real file manager is implemented
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public fetchkptncook.Client.ApiResponse<Object> RetrievedownloadFileWithHttpInfo(string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'fileId' when calling ApiApi->RetrievedownloadFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("file_id", fetchkptncook.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrievedownloadFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/download-file/{file_id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrievedownloadFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  function to download a user file securely (wrapping as zip to prevent any context based XSS problems) temporary solution until a real file manager is implemented
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RetrievedownloadFileAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Object> localVarResponse = await RetrievedownloadFileWithHttpInfoAsync(fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  function to download a user file securely (wrapping as zip to prevent any context based XSS problems) temporary solution until a real file manager is implemented
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> RetrievedownloadFileWithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'fileId' when calling ApiApi->RetrievedownloadFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("file_id", fetchkptncook.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrievedownloadFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/download-file/{file_id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrievedownloadFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  api endpoint to switch space function
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RetrieveswitchActiveSpace(string spaceId, int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Object> localVarResponse = RetrieveswitchActiveSpaceWithHttpInfo(spaceId);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  api endpoint to switch space function
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public fetchkptncook.Client.ApiResponse<Object> RetrieveswitchActiveSpaceWithHttpInfo(string spaceId, int operationIndex = 0)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'spaceId' when calling ApiApi->RetrieveswitchActiveSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("space_id", fetchkptncook.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveswitchActiveSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/switch-active-space/{space_id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveswitchActiveSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  api endpoint to switch space function
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RetrieveswitchActiveSpaceAsync(string spaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Object> localVarResponse = await RetrieveswitchActiveSpaceWithHttpInfoAsync(spaceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  api endpoint to switch space function
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Object>> RetrieveswitchActiveSpaceWithHttpInfoAsync(string spaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'spaceId' when calling ApiApi->RetrieveswitchActiveSpace");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("space_id", fetchkptncook.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.Operation = "ApiApi.RetrieveswitchActiveSpace";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/switch-active-space/{space_id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveswitchActiveSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="foodShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FoodShoppingUpdate</returns>
        public FoodShoppingUpdate ShoppingFood(string id, FoodShoppingUpdate foodShoppingUpdate = default(FoodShoppingUpdate), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<FoodShoppingUpdate> localVarResponse = ShoppingFoodWithHttpInfo(id, foodShoppingUpdate);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="foodShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FoodShoppingUpdate</returns>
        public fetchkptncook.Client.ApiResponse<FoodShoppingUpdate> ShoppingFoodWithHttpInfo(string id, FoodShoppingUpdate foodShoppingUpdate = default(FoodShoppingUpdate), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->ShoppingFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = foodShoppingUpdate;
            localVarRequestOptions.Operation = "ApiApi.ShoppingFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<FoodShoppingUpdate>("/api/food/{id}/shopping/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShoppingFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="foodShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FoodShoppingUpdate</returns>
        public async System.Threading.Tasks.Task<FoodShoppingUpdate> ShoppingFoodAsync(string id, FoodShoppingUpdate foodShoppingUpdate = default(FoodShoppingUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<FoodShoppingUpdate> localVarResponse = await ShoppingFoodWithHttpInfoAsync(id, foodShoppingUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="foodShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FoodShoppingUpdate)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<FoodShoppingUpdate>> ShoppingFoodWithHttpInfoAsync(string id, FoodShoppingUpdate foodShoppingUpdate = default(FoodShoppingUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->ShoppingFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = foodShoppingUpdate;
            localVarRequestOptions.Operation = "ApiApi.ShoppingFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<FoodShoppingUpdate>("/api/food/{id}/shopping/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShoppingFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipeShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeShoppingUpdate</returns>
        public RecipeShoppingUpdate ShoppingRecipe(string id, RecipeShoppingUpdate recipeShoppingUpdate = default(RecipeShoppingUpdate), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeShoppingUpdate> localVarResponse = ShoppingRecipeWithHttpInfo(id, recipeShoppingUpdate);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipeShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeShoppingUpdate</returns>
        public fetchkptncook.Client.ApiResponse<RecipeShoppingUpdate> ShoppingRecipeWithHttpInfo(string id, RecipeShoppingUpdate recipeShoppingUpdate = default(RecipeShoppingUpdate), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->ShoppingRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeShoppingUpdate;
            localVarRequestOptions.Operation = "ApiApi.ShoppingRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<RecipeShoppingUpdate>("/api/recipe/{id}/shopping/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShoppingRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipeShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeShoppingUpdate</returns>
        public async System.Threading.Tasks.Task<RecipeShoppingUpdate> ShoppingRecipeAsync(string id, RecipeShoppingUpdate recipeShoppingUpdate = default(RecipeShoppingUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeShoppingUpdate> localVarResponse = await ShoppingRecipeWithHttpInfoAsync(id, recipeShoppingUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipeShoppingUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeShoppingUpdate)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeShoppingUpdate>> ShoppingRecipeWithHttpInfoAsync(string id, RecipeShoppingUpdate recipeShoppingUpdate = default(RecipeShoppingUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->ShoppingRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeShoppingUpdate;
            localVarRequestOptions.Operation = "ApiApi.ShoppingRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RecipeShoppingUpdate>("/api/recipe/{id}/shopping/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShoppingRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        public AccessToken UpdateAccessToken(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<AccessToken> localVarResponse = UpdateAccessTokenWithHttpInfo(id, accessToken);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        public fetchkptncook.Client.ApiResponse<AccessToken> UpdateAccessTokenWithHttpInfo(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateAccessToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = accessToken;
            localVarRequestOptions.Operation = "ApiApi.UpdateAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<AccessToken>("/api/access-token/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        public async System.Threading.Tasks.Task<AccessToken> UpdateAccessTokenAsync(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<AccessToken> localVarResponse = await UpdateAccessTokenWithHttpInfoAsync(id, accessToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this access token.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<AccessToken>> UpdateAccessTokenWithHttpInfoAsync(string id, AccessToken accessToken = default(AccessToken), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateAccessToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = accessToken;
            localVarRequestOptions.Operation = "ApiApi.UpdateAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccessToken>("/api/access-token/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        public Automation UpdateAutomation(string id, Automation automation = default(Automation), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Automation> localVarResponse = UpdateAutomationWithHttpInfo(id, automation);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        public fetchkptncook.Client.ApiResponse<Automation> UpdateAutomationWithHttpInfo(string id, Automation automation = default(Automation), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateAutomation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = automation;
            localVarRequestOptions.Operation = "ApiApi.UpdateAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Automation>("/api/automation/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        public async System.Threading.Tasks.Task<Automation> UpdateAutomationAsync(string id, Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Automation> localVarResponse = await UpdateAutomationWithHttpInfoAsync(id, automation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this automation.</param>
        /// <param name="automation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Automation>> UpdateAutomationWithHttpInfoAsync(string id, Automation automation = default(Automation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateAutomation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = automation;
            localVarRequestOptions.Operation = "ApiApi.UpdateAutomation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Automation>("/api/automation/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAutomation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkletImport</returns>
        public BookmarkletImport UpdateBookmarkletImport(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<BookmarkletImport> localVarResponse = UpdateBookmarkletImportWithHttpInfo(id, bookmarkletImport);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkletImport</returns>
        public fetchkptncook.Client.ApiResponse<BookmarkletImport> UpdateBookmarkletImportWithHttpInfo(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateBookmarkletImport");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bookmarkletImport;
            localVarRequestOptions.Operation = "ApiApi.UpdateBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<BookmarkletImport>("/api/bookmarklet-import/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkletImport</returns>
        public async System.Threading.Tasks.Task<BookmarkletImport> UpdateBookmarkletImportAsync(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<BookmarkletImport> localVarResponse = await UpdateBookmarkletImportWithHttpInfoAsync(id, bookmarkletImport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this bookmarklet import.</param>
        /// <param name="bookmarkletImport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkletImport)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<BookmarkletImport>> UpdateBookmarkletImportWithHttpInfoAsync(string id, BookmarkletImport bookmarkletImport = default(BookmarkletImport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateBookmarkletImport");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bookmarkletImport;
            localVarRequestOptions.Operation = "ApiApi.UpdateBookmarkletImport";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<BookmarkletImport>("/api/bookmarklet-import/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBookmarkletImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CookLog</returns>
        public CookLog UpdateCookLog(string id, CookLog cookLog = default(CookLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<CookLog> localVarResponse = UpdateCookLogWithHttpInfo(id, cookLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CookLog</returns>
        public fetchkptncook.Client.ApiResponse<CookLog> UpdateCookLogWithHttpInfo(string id, CookLog cookLog = default(CookLog), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateCookLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = cookLog;
            localVarRequestOptions.Operation = "ApiApi.UpdateCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<CookLog>("/api/cook-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CookLog</returns>
        public async System.Threading.Tasks.Task<CookLog> UpdateCookLogAsync(string id, CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<CookLog> localVarResponse = await UpdateCookLogWithHttpInfoAsync(id, cookLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this cook log.</param>
        /// <param name="cookLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CookLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<CookLog>> UpdateCookLogWithHttpInfoAsync(string id, CookLog cookLog = default(CookLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateCookLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = cookLog;
            localVarRequestOptions.Operation = "ApiApi.UpdateCookLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CookLog>("/api/cook-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCookLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFilter</returns>
        public CustomFilter UpdateCustomFilter(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<CustomFilter> localVarResponse = UpdateCustomFilterWithHttpInfo(id, customFilter);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFilter</returns>
        public fetchkptncook.Client.ApiResponse<CustomFilter> UpdateCustomFilterWithHttpInfo(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateCustomFilter");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customFilter;
            localVarRequestOptions.Operation = "ApiApi.UpdateCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<CustomFilter>("/api/custom-filter/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFilter</returns>
        public async System.Threading.Tasks.Task<CustomFilter> UpdateCustomFilterAsync(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<CustomFilter> localVarResponse = await UpdateCustomFilterWithHttpInfoAsync(id, customFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this custom filter.</param>
        /// <param name="customFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFilter)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<CustomFilter>> UpdateCustomFilterWithHttpInfoAsync(string id, CustomFilter customFilter = default(CustomFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateCustomFilter");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customFilter;
            localVarRequestOptions.Operation = "ApiApi.UpdateCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CustomFilter>("/api/custom-filter/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLog</returns>
        public ExportLog UpdateExportLog(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ExportLog> localVarResponse = UpdateExportLogWithHttpInfo(id, exportLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLog</returns>
        public fetchkptncook.Client.ApiResponse<ExportLog> UpdateExportLogWithHttpInfo(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateExportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = exportLog;
            localVarRequestOptions.Operation = "ApiApi.UpdateExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<ExportLog>("/api/export-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLog</returns>
        public async System.Threading.Tasks.Task<ExportLog> UpdateExportLogAsync(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ExportLog> localVarResponse = await UpdateExportLogWithHttpInfoAsync(id, exportLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this export log.</param>
        /// <param name="exportLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ExportLog>> UpdateExportLogWithHttpInfoAsync(string id, ExportLog exportLog = default(ExportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateExportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = exportLog;
            localVarRequestOptions.Operation = "ApiApi.UpdateExportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ExportLog>("/api/export-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateExportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Food</returns>
        public Food UpdateFood(string id, Food food = default(Food), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = UpdateFoodWithHttpInfo(id, food);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Food</returns>
        public fetchkptncook.Client.ApiResponse<Food> UpdateFoodWithHttpInfo(string id, Food food = default(Food), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.UpdateFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Food>("/api/food/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Food</returns>
        public async System.Threading.Tasks.Task<Food> UpdateFoodAsync(string id, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Food> localVarResponse = await UpdateFoodWithHttpInfoAsync(id, food, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this food.</param>
        /// <param name="food"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Food)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Food>> UpdateFoodWithHttpInfoAsync(string id, Food food = default(Food), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateFood");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = food;
            localVarRequestOptions.Operation = "ApiApi.UpdateFood";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Food>("/api/food/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportLog</returns>
        public ImportLog UpdateImportLog(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ImportLog> localVarResponse = UpdateImportLogWithHttpInfo(id, importLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportLog</returns>
        public fetchkptncook.Client.ApiResponse<ImportLog> UpdateImportLogWithHttpInfo(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateImportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = importLog;
            localVarRequestOptions.Operation = "ApiApi.UpdateImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<ImportLog>("/api/import-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportLog</returns>
        public async System.Threading.Tasks.Task<ImportLog> UpdateImportLogAsync(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ImportLog> localVarResponse = await UpdateImportLogWithHttpInfoAsync(id, importLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this import log.</param>
        /// <param name="importLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ImportLog>> UpdateImportLogWithHttpInfoAsync(string id, ImportLog importLog = default(ImportLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateImportLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = importLog;
            localVarRequestOptions.Operation = "ApiApi.UpdateImportLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ImportLog>("/api/import-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateImportLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Ingredient</returns>
        public Ingredient UpdateIngredient(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Ingredient> localVarResponse = UpdateIngredientWithHttpInfo(id, ingredient);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Ingredient</returns>
        public fetchkptncook.Client.ApiResponse<Ingredient> UpdateIngredientWithHttpInfo(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateIngredient");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = ingredient;
            localVarRequestOptions.Operation = "ApiApi.UpdateIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Ingredient>("/api/ingredient/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ingredient</returns>
        public async System.Threading.Tasks.Task<Ingredient> UpdateIngredientAsync(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Ingredient> localVarResponse = await UpdateIngredientWithHttpInfoAsync(id, ingredient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this ingredient.</param>
        /// <param name="ingredient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ingredient)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Ingredient>> UpdateIngredientWithHttpInfoAsync(string id, Ingredient ingredient = default(Ingredient), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateIngredient");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = ingredient;
            localVarRequestOptions.Operation = "ApiApi.UpdateIngredient";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Ingredient>("/api/ingredient/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIngredient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InviteLink</returns>
        public InviteLink UpdateInviteLink(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<InviteLink> localVarResponse = UpdateInviteLinkWithHttpInfo(id, inviteLink);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InviteLink</returns>
        public fetchkptncook.Client.ApiResponse<InviteLink> UpdateInviteLinkWithHttpInfo(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateInviteLink");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inviteLink;
            localVarRequestOptions.Operation = "ApiApi.UpdateInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<InviteLink>("/api/invite-link/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteLink</returns>
        public async System.Threading.Tasks.Task<InviteLink> UpdateInviteLinkAsync(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<InviteLink> localVarResponse = await UpdateInviteLinkWithHttpInfoAsync(id, inviteLink, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this invite link.</param>
        /// <param name="inviteLink"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteLink)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<InviteLink>> UpdateInviteLinkWithHttpInfoAsync(string id, InviteLink inviteLink = default(InviteLink), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateInviteLink");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inviteLink;
            localVarRequestOptions.Operation = "ApiApi.UpdateInviteLink";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<InviteLink>("/api/invite-link/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInviteLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Keyword</returns>
        public Keyword UpdateKeyword(string id, Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = UpdateKeywordWithHttpInfo(id, keyword);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Keyword</returns>
        public fetchkptncook.Client.ApiResponse<Keyword> UpdateKeywordWithHttpInfo(string id, Keyword keyword = default(Keyword), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.UpdateKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Keyword>("/api/keyword/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Keyword</returns>
        public async System.Threading.Tasks.Task<Keyword> UpdateKeywordAsync(string id, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Keyword> localVarResponse = await UpdateKeywordWithHttpInfoAsync(id, keyword, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this keyword.</param>
        /// <param name="keyword"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Keyword)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Keyword>> UpdateKeywordWithHttpInfoAsync(string id, Keyword keyword = default(Keyword), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateKeyword");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = keyword;
            localVarRequestOptions.Operation = "ApiApi.UpdateKeyword";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Keyword>("/api/keyword/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateKeyword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealPlan</returns>
        public MealPlan UpdateMealPlan(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<MealPlan> localVarResponse = UpdateMealPlanWithHttpInfo(id, mealPlan);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealPlan</returns>
        public fetchkptncook.Client.ApiResponse<MealPlan> UpdateMealPlanWithHttpInfo(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateMealPlan");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mealPlan;
            localVarRequestOptions.Operation = "ApiApi.UpdateMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<MealPlan>("/api/meal-plan/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealPlan</returns>
        public async System.Threading.Tasks.Task<MealPlan> UpdateMealPlanAsync(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<MealPlan> localVarResponse = await UpdateMealPlanWithHttpInfoAsync(id, mealPlan, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal plan.</param>
        /// <param name="mealPlan"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealPlan)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<MealPlan>> UpdateMealPlanWithHttpInfoAsync(string id, MealPlan mealPlan = default(MealPlan), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateMealPlan");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mealPlan;
            localVarRequestOptions.Operation = "ApiApi.UpdateMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MealPlan>("/api/meal-plan/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MealType</returns>
        public MealType UpdateMealType(string id, MealType mealType = default(MealType), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<MealType> localVarResponse = UpdateMealTypeWithHttpInfo(id, mealType);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MealType</returns>
        public fetchkptncook.Client.ApiResponse<MealType> UpdateMealTypeWithHttpInfo(string id, MealType mealType = default(MealType), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateMealType");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mealType;
            localVarRequestOptions.Operation = "ApiApi.UpdateMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<MealType>("/api/meal-type/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MealType</returns>
        public async System.Threading.Tasks.Task<MealType> UpdateMealTypeAsync(string id, MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<MealType> localVarResponse = await UpdateMealTypeWithHttpInfoAsync(id, mealType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  returns list of meal types created by the requesting user ordered by the order field.
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this meal type.</param>
        /// <param name="mealType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MealType)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<MealType>> UpdateMealTypeWithHttpInfoAsync(string id, MealType mealType = default(MealType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateMealType");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mealType;
            localVarRequestOptions.Operation = "ApiApi.UpdateMealType";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MealType>("/api/meal-type/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMealType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Recipe</returns>
        public Recipe UpdateRecipe(string id, Recipe recipe = default(Recipe), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Recipe> localVarResponse = UpdateRecipeWithHttpInfo(id, recipe);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Recipe</returns>
        public fetchkptncook.Client.ApiResponse<Recipe> UpdateRecipeWithHttpInfo(string id, Recipe recipe = default(Recipe), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipe;
            localVarRequestOptions.Operation = "ApiApi.UpdateRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Recipe>("/api/recipe/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Recipe</returns>
        public async System.Threading.Tasks.Task<Recipe> UpdateRecipeAsync(string id, Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Recipe> localVarResponse = await UpdateRecipeWithHttpInfoAsync(id, recipe, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe.</param>
        /// <param name="recipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Recipe>> UpdateRecipeWithHttpInfoAsync(string id, Recipe recipe = default(Recipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipe;
            localVarRequestOptions.Operation = "ApiApi.UpdateRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Recipe>("/api/recipe/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBook</returns>
        public RecipeBook UpdateRecipeBook(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeBook> localVarResponse = UpdateRecipeBookWithHttpInfo(id, recipeBook);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBook</returns>
        public fetchkptncook.Client.ApiResponse<RecipeBook> UpdateRecipeBookWithHttpInfo(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateRecipeBook");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeBook;
            localVarRequestOptions.Operation = "ApiApi.UpdateRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<RecipeBook>("/api/recipe-book/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBook</returns>
        public async System.Threading.Tasks.Task<RecipeBook> UpdateRecipeBookAsync(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeBook> localVarResponse = await UpdateRecipeBookWithHttpInfoAsync(id, recipeBook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book.</param>
        /// <param name="recipeBook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBook)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeBook>> UpdateRecipeBookWithHttpInfoAsync(string id, RecipeBook recipeBook = default(RecipeBook), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateRecipeBook");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeBook;
            localVarRequestOptions.Operation = "ApiApi.UpdateRecipeBook";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RecipeBook>("/api/recipe-book/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecipeBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecipeBookEntry</returns>
        public RecipeBookEntry UpdateRecipeBookEntry(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<RecipeBookEntry> localVarResponse = UpdateRecipeBookEntryWithHttpInfo(id, recipeBookEntry);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecipeBookEntry</returns>
        public fetchkptncook.Client.ApiResponse<RecipeBookEntry> UpdateRecipeBookEntryWithHttpInfo(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateRecipeBookEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeBookEntry;
            localVarRequestOptions.Operation = "ApiApi.UpdateRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<RecipeBookEntry>("/api/recipe-book-entry/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecipeBookEntry</returns>
        public async System.Threading.Tasks.Task<RecipeBookEntry> UpdateRecipeBookEntryAsync(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<RecipeBookEntry> localVarResponse = await UpdateRecipeBookEntryWithHttpInfoAsync(id, recipeBookEntry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this recipe book entry.</param>
        /// <param name="recipeBookEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecipeBookEntry)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<RecipeBookEntry>> UpdateRecipeBookEntryWithHttpInfoAsync(string id, RecipeBookEntry recipeBookEntry = default(RecipeBookEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateRecipeBookEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recipeBookEntry;
            localVarRequestOptions.Operation = "ApiApi.UpdateRecipeBookEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RecipeBookEntry>("/api/recipe-book-entry/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecipeBookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingList</returns>
        public ShoppingList UpdateShoppingList(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingList> localVarResponse = UpdateShoppingListWithHttpInfo(id, shoppingList);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingList</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingList> UpdateShoppingListWithHttpInfo(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateShoppingList");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingList;
            localVarRequestOptions.Operation = "ApiApi.UpdateShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<ShoppingList>("/api/shopping-list/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingList</returns>
        public async System.Threading.Tasks.Task<ShoppingList> UpdateShoppingListAsync(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingList> localVarResponse = await UpdateShoppingListWithHttpInfoAsync(id, shoppingList, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list.</param>
        /// <param name="shoppingList"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingList)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingList>> UpdateShoppingListWithHttpInfoAsync(string id, ShoppingList shoppingList = default(ShoppingList), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateShoppingList");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingList;
            localVarRequestOptions.Operation = "ApiApi.UpdateShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ShoppingList>("/api/shopping-list/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListEntry</returns>
        public ShoppingListEntry UpdateShoppingListEntry(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingListEntry> localVarResponse = UpdateShoppingListEntryWithHttpInfo(id, shoppingListEntry);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListEntry</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingListEntry> UpdateShoppingListEntryWithHttpInfo(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateShoppingListEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingListEntry;
            localVarRequestOptions.Operation = "ApiApi.UpdateShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<ShoppingListEntry>("/api/shopping-list-entry/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListEntry</returns>
        public async System.Threading.Tasks.Task<ShoppingListEntry> UpdateShoppingListEntryAsync(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingListEntry> localVarResponse = await UpdateShoppingListEntryWithHttpInfoAsync(id, shoppingListEntry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list entry.</param>
        /// <param name="shoppingListEntry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListEntry)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingListEntry>> UpdateShoppingListEntryWithHttpInfoAsync(string id, ShoppingListEntry shoppingListEntry = default(ShoppingListEntry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateShoppingListEntry");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingListEntry;
            localVarRequestOptions.Operation = "ApiApi.UpdateShoppingListEntry";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ShoppingListEntry>("/api/shopping-list-entry/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShoppingListEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShoppingListRecipe</returns>
        public ShoppingListRecipe UpdateShoppingListRecipe(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ShoppingListRecipe> localVarResponse = UpdateShoppingListRecipeWithHttpInfo(id, shoppingListRecipe);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShoppingListRecipe</returns>
        public fetchkptncook.Client.ApiResponse<ShoppingListRecipe> UpdateShoppingListRecipeWithHttpInfo(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateShoppingListRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingListRecipe;
            localVarRequestOptions.Operation = "ApiApi.UpdateShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<ShoppingListRecipe>("/api/shopping-list-recipe/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShoppingListRecipe</returns>
        public async System.Threading.Tasks.Task<ShoppingListRecipe> UpdateShoppingListRecipeAsync(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ShoppingListRecipe> localVarResponse = await UpdateShoppingListRecipeWithHttpInfoAsync(id, shoppingListRecipe, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this shopping list recipe.</param>
        /// <param name="shoppingListRecipe"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShoppingListRecipe)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ShoppingListRecipe>> UpdateShoppingListRecipeWithHttpInfoAsync(string id, ShoppingListRecipe shoppingListRecipe = default(ShoppingListRecipe), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateShoppingListRecipe");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = shoppingListRecipe;
            localVarRequestOptions.Operation = "ApiApi.UpdateShoppingListRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ShoppingListRecipe>("/api/shopping-list-recipe/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShoppingListRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Step</returns>
        public Step UpdateStep(string id, Step step = default(Step), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Step> localVarResponse = UpdateStepWithHttpInfo(id, step);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Step</returns>
        public fetchkptncook.Client.ApiResponse<Step> UpdateStepWithHttpInfo(string id, Step step = default(Step), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateStep");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = step;
            localVarRequestOptions.Operation = "ApiApi.UpdateStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Step>("/api/step/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Step</returns>
        public async System.Threading.Tasks.Task<Step> UpdateStepAsync(string id, Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Step> localVarResponse = await UpdateStepWithHttpInfoAsync(id, step, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this step.</param>
        /// <param name="step"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Step)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Step>> UpdateStepWithHttpInfoAsync(string id, Step step = default(Step), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateStep");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = step;
            localVarRequestOptions.Operation = "ApiApi.UpdateStep";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Step>("/api/step/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStep", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Storage</returns>
        public Storage UpdateStorage(string id, Storage storage = default(Storage), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Storage> localVarResponse = UpdateStorageWithHttpInfo(id, storage);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Storage</returns>
        public fetchkptncook.Client.ApiResponse<Storage> UpdateStorageWithHttpInfo(string id, Storage storage = default(Storage), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateStorage");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = storage;
            localVarRequestOptions.Operation = "ApiApi.UpdateStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Storage>("/api/storage/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Storage</returns>
        public async System.Threading.Tasks.Task<Storage> UpdateStorageAsync(string id, Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Storage> localVarResponse = await UpdateStorageWithHttpInfoAsync(id, storage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this storage.</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Storage)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Storage>> UpdateStorageWithHttpInfoAsync(string id, Storage storage = default(Storage), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateStorage");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = storage;
            localVarRequestOptions.Operation = "ApiApi.UpdateStorage";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Storage>("/api/storage/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStorage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Supermarket</returns>
        public Supermarket UpdateSupermarket(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Supermarket> localVarResponse = UpdateSupermarketWithHttpInfo(id, supermarket);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Supermarket</returns>
        public fetchkptncook.Client.ApiResponse<Supermarket> UpdateSupermarketWithHttpInfo(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateSupermarket");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarket;
            localVarRequestOptions.Operation = "ApiApi.UpdateSupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Supermarket>("/api/supermarket/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Supermarket</returns>
        public async System.Threading.Tasks.Task<Supermarket> UpdateSupermarketAsync(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Supermarket> localVarResponse = await UpdateSupermarketWithHttpInfoAsync(id, supermarket, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket.</param>
        /// <param name="supermarket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Supermarket)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Supermarket>> UpdateSupermarketWithHttpInfoAsync(string id, Supermarket supermarket = default(Supermarket), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateSupermarket");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarket;
            localVarRequestOptions.Operation = "ApiApi.UpdateSupermarket";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Supermarket>("/api/supermarket/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSupermarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategory</returns>
        public SupermarketCategory UpdateSupermarketCategory(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategory> localVarResponse = UpdateSupermarketCategoryWithHttpInfo(id, supermarketCategory);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategory</returns>
        public fetchkptncook.Client.ApiResponse<SupermarketCategory> UpdateSupermarketCategoryWithHttpInfo(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateSupermarketCategory");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarketCategory;
            localVarRequestOptions.Operation = "ApiApi.UpdateSupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<SupermarketCategory>("/api/supermarket-category/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategory</returns>
        public async System.Threading.Tasks.Task<SupermarketCategory> UpdateSupermarketCategoryAsync(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategory> localVarResponse = await UpdateSupermarketCategoryWithHttpInfoAsync(id, supermarketCategory, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category.</param>
        /// <param name="supermarketCategory"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategory)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<SupermarketCategory>> UpdateSupermarketCategoryWithHttpInfoAsync(string id, SupermarketCategory supermarketCategory = default(SupermarketCategory), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateSupermarketCategory");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarketCategory;
            localVarRequestOptions.Operation = "ApiApi.UpdateSupermarketCategory";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SupermarketCategory>("/api/supermarket-category/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSupermarketCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SupermarketCategoryRelation</returns>
        public SupermarketCategoryRelation UpdateSupermarketCategoryRelation(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> localVarResponse = UpdateSupermarketCategoryRelationWithHttpInfo(id, supermarketCategoryRelation);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SupermarketCategoryRelation</returns>
        public fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> UpdateSupermarketCategoryRelationWithHttpInfo(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateSupermarketCategoryRelation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarketCategoryRelation;
            localVarRequestOptions.Operation = "ApiApi.UpdateSupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<SupermarketCategoryRelation>("/api/supermarket-category-relation/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupermarketCategoryRelation</returns>
        public async System.Threading.Tasks.Task<SupermarketCategoryRelation> UpdateSupermarketCategoryRelationAsync(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation> localVarResponse = await UpdateSupermarketCategoryRelationWithHttpInfoAsync(id, supermarketCategoryRelation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this supermarket category relation.</param>
        /// <param name="supermarketCategoryRelation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupermarketCategoryRelation)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<SupermarketCategoryRelation>> UpdateSupermarketCategoryRelationWithHttpInfoAsync(string id, SupermarketCategoryRelation supermarketCategoryRelation = default(SupermarketCategoryRelation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateSupermarketCategoryRelation");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supermarketCategoryRelation;
            localVarRequestOptions.Operation = "ApiApi.UpdateSupermarketCategoryRelation";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SupermarketCategoryRelation>("/api/supermarket-category-relation/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSupermarketCategoryRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Sync</returns>
        public Sync UpdateSync(string id, Sync sync = default(Sync), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Sync> localVarResponse = UpdateSyncWithHttpInfo(id, sync);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Sync</returns>
        public fetchkptncook.Client.ApiResponse<Sync> UpdateSyncWithHttpInfo(string id, Sync sync = default(Sync), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateSync");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = sync;
            localVarRequestOptions.Operation = "ApiApi.UpdateSync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Sync>("/api/sync/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sync</returns>
        public async System.Threading.Tasks.Task<Sync> UpdateSyncAsync(string id, Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Sync> localVarResponse = await UpdateSyncWithHttpInfoAsync(id, sync, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sync.</param>
        /// <param name="sync"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sync)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Sync>> UpdateSyncWithHttpInfoAsync(string id, Sync sync = default(Sync), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateSync");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = sync;
            localVarRequestOptions.Operation = "ApiApi.UpdateSync";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Sync>("/api/sync/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Unit</returns>
        public Unit UpdateUnit(string id, Unit unit = default(Unit), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = UpdateUnitWithHttpInfo(id, unit);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Unit</returns>
        public fetchkptncook.Client.ApiResponse<Unit> UpdateUnitWithHttpInfo(string id, Unit unit = default(Unit), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = unit;
            localVarRequestOptions.Operation = "ApiApi.UpdateUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Unit>("/api/unit/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Unit</returns>
        public async System.Threading.Tasks.Task<Unit> UpdateUnitAsync(string id, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<Unit> localVarResponse = await UpdateUnitWithHttpInfoAsync(id, unit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this unit.</param>
        /// <param name="unit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Unit)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<Unit>> UpdateUnitWithHttpInfoAsync(string id, Unit unit = default(Unit), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateUnit");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = unit;
            localVarRequestOptions.Operation = "ApiApi.UpdateUnit";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Unit>("/api/unit/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFile</returns>
        public UserFile UpdateUserFile(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<UserFile> localVarResponse = UpdateUserFileWithHttpInfo(id, name, file, id2, fileDownload, preview, fileSizeKb);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFile</returns>
        public fetchkptncook.Client.ApiResponse<UserFile> UpdateUserFileWithHttpInfo(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateUserFile");
            }
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'name' when calling ApiApi->UpdateUserFile");
            }
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'file' when calling ApiApi->UpdateUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (id2 != null)
            {
                localVarRequestOptions.FormParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id2)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("name", fetchkptncook.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            if (fileDownload != null)
            {
                localVarRequestOptions.FormParameters.Add("file_download", fetchkptncook.Client.ClientUtils.ParameterToString(fileDownload)); // form parameter
            }
            if (preview != null)
            {
                localVarRequestOptions.FormParameters.Add("preview", fetchkptncook.Client.ClientUtils.ParameterToString(preview)); // form parameter
            }
            if (fileSizeKb != null)
            {
                localVarRequestOptions.FormParameters.Add("file_size_kb", fetchkptncook.Client.ClientUtils.ParameterToString(fileSizeKb)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiApi.UpdateUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<UserFile>("/api/user-file/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFile</returns>
        public async System.Threading.Tasks.Task<UserFile> UpdateUserFileAsync(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<UserFile> localVarResponse = await UpdateUserFileWithHttpInfoAsync(id, name, file, id2, fileDownload, preview, fileSizeKb, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user file.</param>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="id2"> (optional)</param>
        /// <param name="fileDownload"> (optional)</param>
        /// <param name="preview"> (optional)</param>
        /// <param name="fileSizeKb"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFile)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<UserFile>> UpdateUserFileWithHttpInfoAsync(string id, string name, System.IO.Stream file, int? id2 = default(int?), string fileDownload = default(string), string preview = default(string), int? fileSizeKb = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateUserFile");
            }
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'name' when calling ApiApi->UpdateUserFile");
            }
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'file' when calling ApiApi->UpdateUserFile");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (id2 != null)
            {
                localVarRequestOptions.FormParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id2)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("name", fetchkptncook.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            if (fileDownload != null)
            {
                localVarRequestOptions.FormParameters.Add("file_download", fetchkptncook.Client.ClientUtils.ParameterToString(fileDownload)); // form parameter
            }
            if (preview != null)
            {
                localVarRequestOptions.FormParameters.Add("preview", fetchkptncook.Client.ClientUtils.ParameterToString(preview)); // form parameter
            }
            if (fileSizeKb != null)
            {
                localVarRequestOptions.FormParameters.Add("file_size_kb", fetchkptncook.Client.ClientUtils.ParameterToString(fileSizeKb)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiApi.UpdateUserFile";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UserFile>("/api/user-file/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewLog</returns>
        public ViewLog UpdateViewLog(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<ViewLog> localVarResponse = UpdateViewLogWithHttpInfo(id, viewLog);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewLog</returns>
        public fetchkptncook.Client.ApiResponse<ViewLog> UpdateViewLogWithHttpInfo(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateViewLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = viewLog;
            localVarRequestOptions.Operation = "ApiApi.UpdateViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<ViewLog>("/api/view-log/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewLog</returns>
        public async System.Threading.Tasks.Task<ViewLog> UpdateViewLogAsync(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<ViewLog> localVarResponse = await UpdateViewLogWithHttpInfoAsync(id, viewLog, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this view log.</param>
        /// <param name="viewLog"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewLog)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<ViewLog>> UpdateViewLogWithHttpInfoAsync(string id, ViewLog viewLog = default(ViewLog), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'id' when calling ApiApi->UpdateViewLog");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("id", fetchkptncook.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = viewLog;
            localVarRequestOptions.Operation = "ApiApi.UpdateViewLog";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ViewLog>("/api/view-log/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateViewLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiTokenAuthApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthToken</returns>
        AccessToken CreateAuthToken(string username, string password, string token = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthToken</returns>
        ApiResponse<AccessToken> CreateAuthTokenWithHttpInfo(string username, string password, string token = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiTokenAuthApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthToken</returns>
        System.Threading.Tasks.Task<AuthToken> CreateAuthTokenAsync(string username, string password, string token = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthToken>> CreateAuthTokenWithHttpInfoAsync(string username, string password, string token = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiTokenAuthApi : IApiTokenAuthApiSync, IApiTokenAuthApiAsync
    {
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiTokenAuthApi : IApiTokenAuthApi
    {
        private fetchkptncook.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTokenAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiTokenAuthApi() : this((string)null)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTokenAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiTokenAuthApi(string basePath)
        {
            this.Configuration = fetchkptncook.Client.Configuration.MergeConfigurations(
                fetchkptncook.Client.GlobalConfiguration.Instance,
                new fetchkptncook.Client.Configuration { BasePath = basePath }
            );
            this.Client = new fetchkptncook.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new fetchkptncook.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = fetchkptncook.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTokenAuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiTokenAuthApi(fetchkptncook.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            this.Configuration = fetchkptncook.Client.Configuration.MergeConfigurations(
                fetchkptncook.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new fetchkptncook.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new fetchkptncook.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = fetchkptncook.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTokenAuthApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApiTokenAuthApi(fetchkptncook.Client.ISynchronousClient client, fetchkptncook.Client.IAsynchronousClient asyncClient, fetchkptncook.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");
            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = fetchkptncook.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public fetchkptncook.Client.IAsynchronousClient AsynchronousClient { get; set; }
        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public fetchkptncook.Client.ISynchronousClient Client { get; set; }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public fetchkptncook.Client.IReadableConfiguration Configuration { get; set; }
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public fetchkptncook.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthToken</returns>
        public AccessToken CreateAuthToken(string username, string password, string token = default(string), int operationIndex = 0)
        {
            fetchkptncook.Client.ApiResponse<AccessToken> localVarResponse = CreateAuthTokenWithHttpInfo(username, password, token);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthToken</returns>
        public fetchkptncook.Client.ApiResponse<AccessToken> CreateAuthTokenWithHttpInfo(string username, string password, string token = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'username' when calling ApiTokenAuthApi->CreateAuthToken");
            }
            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'password' when calling ApiTokenAuthApi->CreateAuthToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "application/json"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = new AuthToken(username, password);
            //localVarRequestOptions.FormParameters.Add("username", fetchkptncook.Client.ClientUtils.ParameterToString(username)); // form parameter
            //localVarRequestOptions.FormParameters.Add("password", fetchkptncook.Client.ClientUtils.ParameterToString(password)); // form parameter
            if (token != null)
            {
                localVarRequestOptions.FormParameters.Add("token", fetchkptncook.Client.ClientUtils.ParameterToString(token)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiTokenAuthApi.CreateAuthToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<AccessToken>("/api-token-auth/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthToken</returns>
        public async System.Threading.Tasks.Task<AuthToken> CreateAuthTokenAsync(string username, string password, string token = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            fetchkptncook.Client.ApiResponse<AuthToken> localVarResponse = await CreateAuthTokenWithHttpInfoAsync(username, password, token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="fetchkptncook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthToken)</returns>
        public async System.Threading.Tasks.Task<fetchkptncook.Client.ApiResponse<AuthToken>> CreateAuthTokenWithHttpInfoAsync(string username, string password, string token = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'username' when calling ApiTokenAuthApi->CreateAuthToken");
            }
            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new fetchkptncook.Client.ApiException(400, "Missing required parameter 'password' when calling ApiTokenAuthApi->CreateAuthToken");
            }
            fetchkptncook.Client.RequestOptions localVarRequestOptions = new fetchkptncook.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "multipart/form-data", 
                "application/json"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };
            var localVarContentType = fetchkptncook.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = fetchkptncook.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.FormParameters.Add("username", fetchkptncook.Client.ClientUtils.ParameterToString(username)); // form parameter
            localVarRequestOptions.FormParameters.Add("password", fetchkptncook.Client.ClientUtils.ParameterToString(password)); // form parameter
            if (token != null)
            {
                localVarRequestOptions.FormParameters.Add("token", fetchkptncook.Client.ClientUtils.ParameterToString(token)); // form parameter
            }
            localVarRequestOptions.Operation = "ApiTokenAuthApi.CreateAuthToken";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthToken>("/api-token-auth/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Allows RestSharp to Serialize/Deserialize JSON using our custom logic, but only when ContentType is JSON.
    /// </summary>
    internal class CustomJsonCodec : IRestSerializer, ISerializer, IDeserializer
    {
        private readonly IReadableConfiguration _configuration;
        private static readonly string _contentType = "application/json";
        private readonly JsonSerializerSettings _serializerSettings = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };
        public CustomJsonCodec(IReadableConfiguration configuration)
        {
            _configuration = configuration;
        }
        public CustomJsonCodec(JsonSerializerSettings serializerSettings, IReadableConfiguration configuration)
        {
            _serializerSettings = serializerSettings;
            _configuration = configuration;
        }
        /// <summary>
        /// Serialize the object into a JSON string.
        /// </summary>
        /// <param name="obj">Object to be serialized.</param>
        /// <returns>A JSON string.</returns>
        public string Serialize(object obj)
        {
            if (obj != null && obj is fetchkptncook.Model.AbstractOpenAPISchema)
            {
                // the object to be serialized is an oneOf/anyOf schema
                return ((fetchkptncook.Model.AbstractOpenAPISchema)obj).ToJson();
            }
            else
            {
                return JsonConvert.SerializeObject(obj, _serializerSettings);
            }
        }
        public string Serialize(Parameter bodyParameter) => Serialize(bodyParameter.Value);
        public T Deserialize<T>(RestResponse response)
        {
            var result = (T)Deserialize(response, typeof(T));
            return result;
        }
        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        internal object Deserialize(RestResponse response, Type type)
        {
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }
            // TODO: ? if (type.IsAssignableFrom(typeof(Stream)))
            if (type == typeof(Stream))
            {
                var bytes = response.RawBytes;
                if (response.Headers != null)
                {
                    var filePath = string.IsNullOrEmpty(_configuration.TempFolderPath)
                        ? Path.GetTempPath()
                        : _configuration.TempFolderPath;
                    var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                    foreach (var header in response.Headers)
                    {
                        var match = regex.Match(header.ToString());
                        if (match.Success)
                        {
                            string fileName = filePath + ClientUtils.SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                            File.WriteAllBytes(fileName, bytes);
                            return new FileStream(fileName, FileMode.Open);
                        }
                    }
                }
                var stream = new MemoryStream(bytes);
                return stream;
            }
            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content, null, System.Globalization.DateTimeStyles.RoundtripKind);
            }
            if (type == typeof(string) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return Convert.ChangeType(response.Content, type);
            }
            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, _serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }
        public ISerializer Serializer => this;
        public IDeserializer Deserializer => this;
        public string[] AcceptedContentTypes => RestSharp.Serializers.ContentType.JsonAccept;
        public SupportsContentType SupportsContentType => contentType =>
            contentType.EndsWith("json", StringComparison.InvariantCultureIgnoreCase) ||
            contentType.EndsWith("javascript", StringComparison.InvariantCultureIgnoreCase);
        public string ContentType
        {
            get { return _contentType; }
            set { throw new InvalidOperationException("Not allowed to set content type."); }
        }
        public DataFormat DataFormat => DataFormat.Json;
    }
    /// <summary>
    /// Provides a default implementation of an Api client (both synchronous and asynchronous implementations),
    /// encapsulating general REST accessor use cases.
    /// </summary>
    public partial class ApiClient : ISynchronousClient, IAsynchronousClient
    {
        private readonly string _baseUrl;
        /// <summary>
        /// Specifies the settings on a <see cref="JsonSerializer" /> object.
        /// These settings can be adjusted to accommodate custom serialization rules.
        /// </summary>
        public JsonSerializerSettings SerializerSettings { get; set; } = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };
        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(RestRequest request);
        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(RestRequest request, RestResponse response);
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />, defaulting to the global configurations' base url.
        /// </summary>
        public ApiClient()
        {
            _baseUrl = fetchkptncook.Client.GlobalConfiguration.Instance.BasePath;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        public ApiClient(string basePath)
        {
            if (string.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");
            _baseUrl = basePath;
        }
        /// <summary>
        /// Constructs the RestSharp version of an http method
        /// </summary>
        /// <param name="method">Swagger Client Custom HttpMethod</param>
        /// <returns>RestSharp's HttpMethod instance.</returns>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        private RestSharpMethod Method(HttpMethod method)
        {
            RestSharpMethod other;
            switch (method)
            {
                case HttpMethod.Get:
                    other = RestSharpMethod.Get;
                    break;
                case HttpMethod.Post:
                    other = RestSharpMethod.Post;
                    break;
                case HttpMethod.Put:
                    other = RestSharpMethod.Put;
                    break;
                case HttpMethod.Delete:
                    other = RestSharpMethod.Delete;
                    break;
                case HttpMethod.Head:
                    other = RestSharpMethod.Head;
                    break;
                case HttpMethod.Options:
                    other = RestSharpMethod.Options;
                    break;
                case HttpMethod.Patch:
                    other = RestSharpMethod.Patch;
                    break;
                default:
                    throw new ArgumentOutOfRangeException("method", method, null);
            }
            return other;
        }
        /// <summary>
        /// Provides all logic for constructing a new RestSharp <see cref="RestRequest"/>.
        /// At this point, all information for querying the service is known. Here, it is simply
        /// mapped into the RestSharp request.
        /// </summary>
        /// <param name="method">The http verb.</param>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>[private] A new RestRequest instance.</returns>
        /// <exception cref="ArgumentNullException"></exception>
        private RestRequest NewRequest(
            HttpMethod method,
            string path,
            RequestOptions options,
            IReadableConfiguration configuration)
        {
            if (path == null) throw new ArgumentNullException("path");
            if (options == null) throw new ArgumentNullException("options");
            if (configuration == null) throw new ArgumentNullException("configuration");
            RestRequest request = new RestRequest(path, Method(method));
            if (options.PathParameters != null)
            {
                foreach (var pathParam in options.PathParameters)
                {
                    request.AddParameter(pathParam.Key, pathParam.Value, ParameterType.UrlSegment);
                }
            }
            if (options.QueryParameters != null)
            {
                foreach (var queryParam in options.QueryParameters)
                {
                    foreach (var value in queryParam.Value)
                    {
                        request.AddQueryParameter(queryParam.Key, value);
                    }
                }
            }
            if (configuration.DefaultHeaders != null)
            {
                foreach (var headerParam in configuration.DefaultHeaders)
                {
                    request.AddHeader(headerParam.Key, headerParam.Value);
                }
            }
            if (options.HeaderParameters != null)
            {
                foreach (var headerParam in options.HeaderParameters)
                {
                    foreach (var value in headerParam.Value)
                    {
                        request.AddHeader(headerParam.Key, value);
                    }
                }
            }
            if (options.FormParameters != null)
            {
                foreach (var formParam in options.FormParameters)
                {
                    request.AddParameter(formParam.Key, formParam.Value);
                }
            }
            if (options.Data != null)
            {
                if (options.Data is Stream stream)
                {
                    var contentType = "application/octet-stream";
                    if (options.HeaderParameters != null)
                    {
                        var contentTypes = options.HeaderParameters["Content-Type"];
                        contentType = contentTypes[0];
                    }
                    var bytes = ClientUtils.ReadAsBytes(stream);
                    request.AddParameter(contentType, bytes, ParameterType.RequestBody);
                }
                else
                {
                    if (options.HeaderParameters != null)
                    {
                        var contentTypes = options.HeaderParameters["Content-Type"];
                        if (contentTypes == null || contentTypes.Any(header => header.Contains("application/json")))
                        {
                            request.RequestFormat = DataFormat.Json;
                        }
                        else
                        {
                            // TODO: Generated client user should add additional handlers. RestSharp only supports XML and JSON, with XML as default.
                        }
                    }
                    else
                    {
                        // Here, we'll assume JSON APIs are more common. XML can be forced by adding produces/consumes to openapi spec explicitly.
                        request.RequestFormat = DataFormat.Json;
                    }
                    request.AddJsonBody(options.Data);
                }
            }
            if (options.FileParameters != null)
            {
                foreach (var fileParam in options.FileParameters)
                {
                    foreach (var file in fileParam.Value)
                    {
                        var bytes = ClientUtils.ReadAsBytes(file);
                        var fileStream = file as FileStream;
                        if (fileStream != null)
                            request.AddFile(fileParam.Key, bytes, System.IO.Path.GetFileName(fileStream.Name));
                        else
                            request.AddFile(fileParam.Key, bytes, "no_file_name_provided");
                    }
                }
            }
            LogRequest(request);
            return request;
        }

        private void LogRequest(RestRequest request)
        {
            var requestToLog = new
            {
                resource = request.Resource,
                // Parameters are custom anonymous objects in order to have the parameter type as a nice string
                // otherwise it will just show the enum value
                parameters = request.Parameters.Select(parameter => new
                {
                    name = parameter.Name,
                    value = parameter.Value,
                    type = parameter.Type.ToString()
                }),
                // ToString() here to have the method as a nice string otherwise it will just show the enum value
                method = request.Method.ToString()
            };

            Console.Write(string.Format("{0}",
                    JsonConvert.SerializeObject(requestToLog)));
        }

        private ApiResponse<T> ToApiResponse<T>(RestResponse<T> response)
        {
            T result = response.Data;
            string rawContent = response.Content;
            var transformed = new ApiResponse<T>(response.StatusCode, new Multimap<string, string>(), result, rawContent)
            {
                ErrorText = response.ErrorMessage,
                Cookies = new List<Cookie>()
            };
            if (response.Headers != null)
            {
                foreach (var responseHeader in response.Headers)
                {
                    transformed.Headers.Add(responseHeader.Name, ClientUtils.ParameterToString(responseHeader.Value));
                }
            }
            if (response.ContentHeaders != null)
            {
                foreach (var responseHeader in response.ContentHeaders)
                {
                    transformed.Headers.Add(responseHeader.Name, ClientUtils.ParameterToString(responseHeader.Value));
                }
            }
            if (response.Cookies != null)
            {
                foreach (var responseCookies in response.Cookies.Cast<Cookie>())
                {
                    transformed.Cookies.Add(
                        new Cookie(
                            responseCookies.Name,
                            responseCookies.Value,
                            responseCookies.Path,
                            responseCookies.Domain)
                        );
                }
            }
            return transformed;
        }
        private ApiResponse<T> Exec<T>(RestRequest req, RequestOptions options, IReadableConfiguration configuration)
        {
            var baseUrl = configuration.GetOperationServerUrl(options.Operation, options.OperationIndex) ?? _baseUrl;
            var cookies = new CookieContainer();
            if (options.Cookies != null && options.Cookies.Count > 0)
            {
                foreach (var cookie in options.Cookies)
                {
                    cookies.Add(new Cookie(cookie.Name, cookie.Value));
                }
            }
            var clientOptions = new RestClientOptions(baseUrl)
            {
                ClientCertificates = configuration.ClientCertificates,
                CookieContainer = cookies,
                MaxTimeout = configuration.Timeout,
                Proxy = configuration.Proxy,
                UserAgent = configuration.UserAgent
            };
            RestClient client = new RestClient(clientOptions)
                .UseSerializer(() => new CustomJsonCodec(SerializerSettings, configuration));
            InterceptRequest(req);
            RestResponse<T> response;
            if (RetryConfiguration.RetryPolicy != null)
            {
                var policy = RetryConfiguration.RetryPolicy;
                var policyResult = policy.ExecuteAndCapture(() => client.Execute(req));
                response = (policyResult.Outcome == OutcomeType.Successful) ? client.Deserialize<T>(policyResult.Result) : new RestResponse<T>
                {
                    Request = req,
                    ErrorException = policyResult.FinalException
                };
            }
            else
            {
                response = client.Execute<T>(req);
            }
            // if the response type is oneOf/anyOf, call FromJSON to deserialize the data
            if (typeof(fetchkptncook.Model.AbstractOpenAPISchema).IsAssignableFrom(typeof(T)))
            {
                try
                {
                    response.Data = (T) typeof(T).GetMethod("FromJson").Invoke(null, new object[] { response.Content });
                }
                catch (Exception ex)
                {
                    throw ex.InnerException != null ? ex.InnerException : ex;
                }
            }
            else if (typeof(T).Name == "Stream") // for binary response
            {
                response.Data = (T)(object)new MemoryStream(response.RawBytes);
            }
            else if (typeof(T).Name == "Byte[]") // for byte response
            {
                response.Data = (T)(object)response.RawBytes;
            }
            else if (typeof(T).Name == "String") // for string response
            {
                response.Data = (T)(object)response.Content;
            }
            InterceptResponse(req, response);
            var result = ToApiResponse(response);
            if (response.ErrorMessage != null)
            {
                result.ErrorText = response.ErrorMessage;
            }
            if (response.Cookies != null && response.Cookies.Count > 0)
            {
                if (result.Cookies == null) result.Cookies = new List<Cookie>();
                foreach (var restResponseCookie in response.Cookies.Cast<Cookie>())
                {
                    var cookie = new Cookie(
                        restResponseCookie.Name,
                        restResponseCookie.Value,
                        restResponseCookie.Path,
                        restResponseCookie.Domain
                    )
                    {
                        Comment = restResponseCookie.Comment,
                        CommentUri = restResponseCookie.CommentUri,
                        Discard = restResponseCookie.Discard,
                        Expired = restResponseCookie.Expired,
                        Expires = restResponseCookie.Expires,
                        HttpOnly = restResponseCookie.HttpOnly,
                        Port = restResponseCookie.Port,
                        Secure = restResponseCookie.Secure,
                        Version = restResponseCookie.Version
                    };
                    result.Cookies.Add(cookie);
                }
            }
            return result;
        }
        private async Task<ApiResponse<T>> ExecAsync<T>(RestRequest req, RequestOptions options, IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var baseUrl = configuration.GetOperationServerUrl(options.Operation, options.OperationIndex) ?? _baseUrl;
            var clientOptions = new RestClientOptions(baseUrl)
            {
                ClientCertificates = configuration.ClientCertificates,
                MaxTimeout = configuration.Timeout,
                Proxy = configuration.Proxy,
                UserAgent = configuration.UserAgent
            };
            RestClient client = new RestClient(clientOptions)
                .UseSerializer(() => new CustomJsonCodec(SerializerSettings, configuration));
            InterceptRequest(req);
            RestResponse<T> response;
            if (RetryConfiguration.AsyncRetryPolicy != null)
            {
                var policy = RetryConfiguration.AsyncRetryPolicy;
                var policyResult = await policy.ExecuteAndCaptureAsync((ct) => client.ExecuteAsync(req, ct), cancellationToken).ConfigureAwait(false);
                response = (policyResult.Outcome == OutcomeType.Successful) ? client.Deserialize<T>(policyResult.Result) : new RestResponse<T>
                {
                    Request = req,
                    ErrorException = policyResult.FinalException
                };
            }
            else
            {
                response = await client.ExecuteAsync<T>(req, cancellationToken).ConfigureAwait(false);
            }
            // if the response type is oneOf/anyOf, call FromJSON to deserialize the data
            if (typeof(fetchkptncook.Model.AbstractOpenAPISchema).IsAssignableFrom(typeof(T)))
            {
                response.Data = (T) typeof(T).GetMethod("FromJson").Invoke(null, new object[] { response.Content });
            }
            else if (typeof(T).Name == "Stream") // for binary response
            {
                response.Data = (T)(object)new MemoryStream(response.RawBytes);
            }
            else if (typeof(T).Name == "Byte[]") // for byte response
            {
                response.Data = (T)(object)response.RawBytes;
            }
            InterceptResponse(req, response);
            var result = ToApiResponse(response);
            if (response.ErrorMessage != null)
            {
                result.ErrorText = response.ErrorMessage;
            }
            if (response.Cookies != null && response.Cookies.Count > 0)
            {
                if (result.Cookies == null) result.Cookies = new List<Cookie>();
                foreach (var restResponseCookie in response.Cookies.Cast<Cookie>())
                {
                    var cookie = new Cookie(
                        restResponseCookie.Name,
                        restResponseCookie.Value,
                        restResponseCookie.Path,
                        restResponseCookie.Domain
                    )
                    {
                        Comment = restResponseCookie.Comment,
                        CommentUri = restResponseCookie.CommentUri,
                        Discard = restResponseCookie.Discard,
                        Expired = restResponseCookie.Expired,
                        Expires = restResponseCookie.Expires,
                        HttpOnly = restResponseCookie.HttpOnly,
                        Port = restResponseCookie.Port,
                        Secure = restResponseCookie.Secure,
                        Version = restResponseCookie.Version
                    };
                    result.Cookies.Add(cookie);
                }
            }
            return result;
        }
        #region IAsynchronousClient
        /// <summary>
        /// Make a HTTP GET request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> GetAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Get, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP POST request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PostAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Post, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP PUT request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PutAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Put, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP DELETE request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> DeleteAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Delete, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP HEAD request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> HeadAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Head, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP OPTION request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> OptionsAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Options, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP PATCH request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PatchAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Patch, path, options, config), options, config, cancellationToken);
        }
        #endregion IAsynchronousClient
        #region ISynchronousClient
        /// <summary>
        /// Make a HTTP GET request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Get<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Get, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP POST request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Post<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Post, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP PUT request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Put<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Put, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP DELETE request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Delete<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Delete, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP HEAD request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Head<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Head, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP OPTION request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Options<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Options, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP PATCH request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Patch<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Patch, path, options, config), options, config);
        }
        #endregion ISynchronousClient
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// API Exception
    /// </summary>
    public class ApiException : Exception
    {
        /// <summary>
        /// Gets or sets the error code (HTTP status code)
        /// </summary>
        /// <value>The error code (HTTP status code).</value>
        public int ErrorCode { get; set; }
        /// <summary>
        /// Gets or sets the error content (body json object)
        /// </summary>
        /// <value>The error content (Http response body).</value>
        public object ErrorContent { get; private set; }
        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public Multimap<string, string> Headers { get; private set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        public ApiException() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        public ApiException(int errorCode, string message) : base(message)
        {
            this.ErrorCode = errorCode;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        /// <param name="errorContent">Error content.</param>
        /// <param name="headers">HTTP Headers.</param>
        public ApiException(int errorCode, string message, object errorContent = null, Multimap<string, string> headers = null) : base(message)
        {
            this.ErrorCode = errorCode;
            this.ErrorContent = errorContent;
            this.Headers = headers;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Provides a non-generic contract for the ApiResponse wrapper.
    /// </summary>
    public interface IApiResponse
    {
        /// <summary>
        /// The data type of <see cref="Content"/>
        /// </summary>
        Type ResponseType { get; }
        /// <summary>
        /// The content of this response
        /// </summary>
        Object Content { get; }
        /// <summary>
        /// Gets or sets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        HttpStatusCode StatusCode { get; }
        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        Multimap<string, string> Headers { get; }
        /// <summary>
        /// Gets or sets any error text defined by the calling client.
        /// </summary>
        string ErrorText { get; set; }
        /// <summary>
        /// Gets or sets any cookies passed along on the response.
        /// </summary>
        List<Cookie> Cookies { get; set; }
        /// <summary>
        /// The raw content of this response
        /// </summary>
        string RawContent { get; }
    }
    /// <summary>
    /// API Response
    /// </summary>
    public class ApiResponse<T> : IApiResponse
    {
        #region Properties
        /// <summary>
        /// Gets or sets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        public HttpStatusCode StatusCode { get; }
        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public Multimap<string, string> Headers { get; }
        /// <summary>
        /// Gets or sets the data (parsed HTTP body)
        /// </summary>
        /// <value>The data.</value>
        public T Data { get; }
        /// <summary>
        /// Gets or sets any error text defined by the calling client.
        /// </summary>
        public string ErrorText { get; set; }
        /// <summary>
        /// Gets or sets any cookies passed along on the response.
        /// </summary>
        public List<Cookie> Cookies { get; set; }
        /// <summary>
        /// The content of this response
        /// </summary>
        public Type ResponseType
        {
            get { return typeof(T); }
        }
        /// <summary>
        /// The data type of <see cref="Content"/>
        /// </summary>
        public object Content
        {
            get { return Data; }
        }
        /// <summary>
        /// The raw content
        /// </summary>
        public string RawContent { get; }
        #endregion Properties
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="headers">HTTP headers.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        /// <param name="rawContent">Raw content.</param>
        public ApiResponse(HttpStatusCode statusCode, Multimap<string, string> headers, T data, string rawContent)
        {
            StatusCode = statusCode;
            Headers = headers;
            Data = data;
            RawContent = rawContent;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="headers">HTTP headers.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        public ApiResponse(HttpStatusCode statusCode, Multimap<string, string> headers, T data) : this(statusCode, headers, data, null)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        /// <param name="rawContent">Raw content.</param>
        public ApiResponse(HttpStatusCode statusCode, T data, string rawContent) : this(statusCode, null, data, rawContent)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        public ApiResponse(HttpStatusCode statusCode, T data) : this(statusCode, data, null)
        {
        }
        #endregion Constructors
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static class ClientUtils
    {
        /// <summary>
        /// Sanitize filename by removing the path
        /// </summary>
        /// <param name="filename">Filename</param>
        /// <returns>Filename</returns>
        public static string SanitizeFilename(string filename)
        {
            Match match = Regex.Match(filename, @".*[/\\](.*)$");
            return match.Success ? match.Groups[1].Value : filename;
        }
        /// <summary>
        /// Convert params to key/value pairs.
        /// Use collectionFormat to properly format lists and collections.
        /// </summary>
        /// <param name="collectionFormat">The swagger-supported collection format, one of: csv, tsv, ssv, pipes, multi</param>
        /// <param name="name">Key name.</param>
        /// <param name="value">Value object.</param>
        /// <returns>A multimap of keys with 1..n associated values.</returns>
        public static Multimap<string, string> ParameterToMultiMap(string collectionFormat, string name, object value)
        {
            var parameters = new Multimap<string, string>();
            if (value is ICollection collection && collectionFormat == "multi")
            {
                foreach (var item in collection)
                {
                    parameters.Add(name, ParameterToString(item));
                }
            }
            else if (value is IDictionary dictionary)
            {
                if(collectionFormat == "deepObject") {
                    foreach (DictionaryEntry entry in dictionary)
                    {
                        parameters.Add(name + "[" + entry.Key + "]", ParameterToString(entry.Value));
                    }
                }
                else {
                    foreach (DictionaryEntry entry in dictionary)
                    {
                        parameters.Add(entry.Key.ToString(), ParameterToString(entry.Value));
                    }
                }
            }
            else
            {
                parameters.Add(name, ParameterToString(value));
            }
            return parameters;
        }
        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="configuration">An optional configuration instance, providing formatting options used in processing.</param>
        /// <returns>Formatted string.</returns>
        public static string ParameterToString(object obj, IReadableConfiguration configuration = null)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString((configuration ?? GlobalConfiguration.Instance).DateTimeFormat);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString((configuration ?? GlobalConfiguration.Instance).DateTimeFormat);
            if (obj is bool boolean)
                return boolean ? "true" : "false";
            if (obj is ICollection collection)
                return string.Join(",", collection.Cast<object>());
            return Convert.ToString(obj, CultureInfo.InvariantCulture);
        }
        /// <summary>
        /// Serializes the given object when not null. Otherwise return null.
        /// </summary>
        /// <param name="obj">The object to serialize.</param>
        /// <returns>Serialized string.</returns>
        public static string Serialize(object obj)
        {
            return obj != null ? Newtonsoft.Json.JsonConvert.SerializeObject(obj) : null;
        }
        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
        }
        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }
        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;
            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }
            return contentTypes[0]; // use the first content type specified in 'consumes'
        }
        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;
            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";
            return string.Join(",", accepts);
        }
        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        public static readonly Regex JsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");
        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;
            return JsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json");
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Represents a set of configuration settings
    /// </summary>
    public class Configuration : IReadableConfiguration
    {
        #region Constants
        /// <summary>
        /// Version of the package.
        /// </summary>
        /// <value>Version of the package.</value>
        public const string Version = "1.0.0";
        /// <summary>
        /// Identifier for ISO 8601 DateTime Format
        /// </summary>
        /// <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        // ReSharper disable once InconsistentNaming
        public const string ISO8601_DATETIME_FORMAT = "o";
        #endregion Constants
        #region Static Members
        /// <summary>
        /// Default creation of exceptions for a given method name and response object
        /// </summary>
        public static readonly ExceptionFactory DefaultExceptionFactory = (methodName, response) =>
        {
            var status = (int)response.StatusCode;
            if (status >= 400)
            {
                return new ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.RawContent),
                    response.RawContent, response.Headers);
            }
            return null;
        };
        #endregion Static Members
        #region Private Members
        /// <summary>
        /// Defines the base path of the target API server.
        /// Example: http://localhost:3000/v1/
        /// </summary>
        private string _basePath;
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// This is the key and value comprising the "secret" for accessing an API.
        /// </summary>
        /// <value>The API key.</value>
        private IDictionary<string, string> _apiKey;
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        private IDictionary<string, string> _apiKeyPrefix;
        private string _dateTimeFormat = ISO8601_DATETIME_FORMAT;
        private string _tempFolderPath = Path.GetTempPath();
        /// <summary>
        /// Gets or sets the servers defined in the OpenAPI spec.
        /// </summary>
        /// <value>The servers</value>
        private IList<IReadOnlyDictionary<string, object>> _servers;
        /// <summary>
        /// Gets or sets the operation servers defined in the OpenAPI spec.
        /// </summary>
        /// <value>The operation servers</value>
        private IReadOnlyDictionary<string, List<IReadOnlyDictionary<string, object>>> _operationServers;
        #endregion Private Members
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("ReSharper", "VirtualMemberCallInConstructor")]
        public Configuration()
        {
            Proxy = null;
            UserAgent = WebUtility.UrlEncode("OpenAPI-Generator/1.0.0/csharp");
            BasePath = "http://localhost";
            DefaultHeaders = new ConcurrentDictionary<string, string>();
            ApiKey = new ConcurrentDictionary<string, string>();
            ApiKeyPrefix = new ConcurrentDictionary<string, string>();
            Servers = new List<IReadOnlyDictionary<string, object>>()
            {
                {
                    new Dictionary<string, object> {
                        {"url", ""},
                        {"description", "No description provided"},
                    }
                }
            };
            OperationServers = new Dictionary<string, List<IReadOnlyDictionary<string, object>>>()
            {
            };
            // Setting Timeout has side effects (forces ApiClient creation).
            Timeout = 100000;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("ReSharper", "VirtualMemberCallInConstructor")]
        public Configuration(
            IDictionary<string, string> defaultHeaders,
            IDictionary<string, string> apiKey,
            IDictionary<string, string> apiKeyPrefix,
            string basePath = "http://localhost") : this()
        {
            if (string.IsNullOrWhiteSpace(basePath))
                throw new ArgumentException("The provided basePath is invalid.", "basePath");
            if (defaultHeaders == null)
                throw new ArgumentNullException("defaultHeaders");
            if (apiKey == null)
                throw new ArgumentNullException("apiKey");
            if (apiKeyPrefix == null)
                throw new ArgumentNullException("apiKeyPrefix");
            BasePath = basePath;
            foreach (var keyValuePair in defaultHeaders)
            {
                DefaultHeaders.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKey)
            {
                ApiKey.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKeyPrefix)
            {
                ApiKeyPrefix.Add(keyValuePair);
            }
        }
        #endregion Constructors
        #region Properties
        /// <summary>
        /// Gets or sets the base path for API access.
        /// </summary>
        public virtual string BasePath {
            get { return _basePath; }
            set { _basePath = value; }
        }
        /// <summary>
        /// Gets or sets the default header.
        /// </summary>
        [Obsolete("Use DefaultHeaders instead.")]
        public virtual IDictionary<string, string> DefaultHeader
        {
            get
            {
                return DefaultHeaders;
            }
            set
            {
                DefaultHeaders = value;
            }
        }
        /// <summary>
        /// Gets or sets the default headers.
        /// </summary>
        public virtual IDictionary<string, string> DefaultHeaders { get; set; }
        /// <summary>
        /// Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
        /// </summary>
        public virtual int Timeout { get; set; }
        /// <summary>
        /// Gets or sets the proxy
        /// </summary>
        /// <value>Proxy.</value>
        public virtual WebProxy Proxy { get; set; }
        /// <summary>
        /// Gets or sets the HTTP user agent.
        /// </summary>
        /// <value>Http user agent.</value>
        public virtual string UserAgent { get; set; }
        /// <summary>
        /// Gets or sets the username (HTTP basic authentication).
        /// </summary>
        /// <value>The username.</value>
        public virtual string Username { get; set; }
        /// <summary>
        /// Gets or sets the password (HTTP basic authentication).
        /// </summary>
        /// <value>The password.</value>
        public virtual string Password { get; set; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        public string GetApiKeyWithPrefix(string apiKeyIdentifier)
        {
            string apiKeyValue;
            ApiKey.TryGetValue(apiKeyIdentifier, out apiKeyValue);
            string apiKeyPrefix;
            if (ApiKeyPrefix.TryGetValue(apiKeyIdentifier, out apiKeyPrefix))
            {
                return apiKeyPrefix + " " + apiKeyValue;
            }
            return apiKeyValue;
        }
        /// <summary>
        /// Gets or sets certificate collection to be sent with requests.
        /// </summary>
        /// <value>X509 Certificate collection.</value>
        public X509CertificateCollection ClientCertificates { get; set; }
        /// <summary>
        /// Gets or sets the access token for OAuth2 authentication.
        ///
        /// This helper property simplifies code generation.
        /// </summary>
        /// <value>The access token.</value>
        public virtual string AccessToken { get; set; }
        /// <summary>
        /// Gets or sets the temporary folder path to store the files downloaded from the server.
        /// </summary>
        /// <value>Folder path.</value>
        public virtual string TempFolderPath
        {
            get { return _tempFolderPath; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    _tempFolderPath = Path.GetTempPath();
                    return;
                }
                // create the directory if it does not exist
                if (!Directory.Exists(value))
                {
                    Directory.CreateDirectory(value);
                }
                // check if the path contains directory separator at the end
                if (value[value.Length - 1] == Path.DirectorySeparatorChar)
                {
                    _tempFolderPath = value;
                }
                else
                {
                    _tempFolderPath = value + Path.DirectorySeparatorChar;
                }
            }
        }
        /// <summary>
        /// Gets or sets the date time format used when serializing in the ApiClient
        /// By default, it's set to ISO 8601 - "o", for others see:
        /// https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
        /// and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
        /// No validation is done to ensure that the string you're providing is valid
        /// </summary>
        /// <value>The DateTimeFormat string</value>
        public virtual string DateTimeFormat
        {
            get { return _dateTimeFormat; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    // Never allow a blank or null string, go back to the default
                    _dateTimeFormat = ISO8601_DATETIME_FORMAT;
                    return;
                }
                // Caution, no validation when you choose date time format other than ISO 8601
                // Take a look at the above links
                _dateTimeFormat = value;
            }
        }
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        ///
        /// Whatever you set here will be prepended to the value defined in AddApiKey.
        ///
        /// An example invocation here might be:
        /// <example>
        /// ApiKeyPrefix["Authorization"] = "Bearer";
        /// </example>
        /// � where ApiKey["Authorization"] would then be used to set the value of your bearer token.
        ///
        /// <remarks>
        /// OAuth2 workflows should set tokens via AccessToken.
        /// </remarks>
        /// </summary>
        /// <value>The prefix of the API key.</value>
        public virtual IDictionary<string, string> ApiKeyPrefix
        {
            get { return _apiKeyPrefix; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKeyPrefix collection may not be null.");
                }
                _apiKeyPrefix = value;
            }
        }
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        public virtual IDictionary<string, string> ApiKey
        {
            get { return _apiKey; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKey collection may not be null.");
                }
                _apiKey = value;
            }
        }
        /// <summary>
        /// Gets or sets the servers.
        /// </summary>
        /// <value>The servers.</value>
        public virtual IList<IReadOnlyDictionary<string, object>> Servers
        {
            get { return _servers; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Servers may not be null.");
                }
                _servers = value;
            }
        }
        /// <summary>
        /// Gets or sets the operation servers.
        /// </summary>
        /// <value>The operation servers.</value>
        public virtual IReadOnlyDictionary<string, List<IReadOnlyDictionary<string, object>>> OperationServers
        {
            get { return _operationServers; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Operation servers may not be null.");
                }
                _operationServers = value;
            }
        }
        /// <summary>
        /// Returns URL based on server settings without providing values
        /// for the variables
        /// </summary>
        /// <param name="index">Array index of the server settings.</param>
        /// <return>The server URL.</return>
        public string GetServerUrl(int index)
        {
            return GetServerUrl(Servers, index, null);
        }
        /// <summary>
        /// Returns URL based on server settings.
        /// </summary>
        /// <param name="index">Array index of the server settings.</param>
        /// <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
        /// <return>The server URL.</return>
        public string GetServerUrl(int index, Dictionary<string, string> inputVariables)
        {
            return GetServerUrl(Servers, index, inputVariables);
        }
        /// <summary>
        /// Returns URL based on operation server settings.
        /// </summary>
        /// <param name="operation">Operation associated with the request path.</param>
        /// <param name="index">Array index of the server settings.</param>
        /// <return>The operation server URL.</return>
        public string GetOperationServerUrl(string operation, int index)
        {
            return GetOperationServerUrl(operation, index, null);
        }
        /// <summary>
        /// Returns URL based on operation server settings.
        /// </summary>
        /// <param name="operation">Operation associated with the request path.</param>
        /// <param name="index">Array index of the server settings.</param>
        /// <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
        /// <return>The operation server URL.</return>
        public string GetOperationServerUrl(string operation, int index, Dictionary<string, string> inputVariables)
        {
            if (OperationServers.TryGetValue(operation, out var operationServer))
            {
                return GetServerUrl(operationServer, index, inputVariables);
            }
            return null;
        }
        /// <summary>
        /// Returns URL based on server settings.
        /// </summary>
        /// <param name="servers">Dictionary of server settings.</param>
        /// <param name="index">Array index of the server settings.</param>
        /// <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
        /// <return>The server URL.</return>
        private string GetServerUrl(IList<IReadOnlyDictionary<string, object>> servers, int index, Dictionary<string, string> inputVariables)
        {
            if (index < 0 || index >= servers.Count)
            {
                throw new InvalidOperationException($"Invalid index {index} when selecting the server. Must be less than {servers.Count}.");
            }
            if (inputVariables == null)
            {
                inputVariables = new Dictionary<string, string>();
            }
            IReadOnlyDictionary<string, object> server = servers[index];
            string url = (string)server["url"];
            if (server.ContainsKey("variables"))
            {
                // go through each variable and assign a value
                foreach (KeyValuePair<string, object> variable in (IReadOnlyDictionary<string, object>)server["variables"])
                {
                    IReadOnlyDictionary<string, object> serverVariables = (IReadOnlyDictionary<string, object>)(variable.Value);
                    if (inputVariables.ContainsKey(variable.Key))
                    {
                        if (((List<string>)serverVariables["enum_values"]).Contains(inputVariables[variable.Key]))
                        {
                            url = url.Replace("{" + variable.Key + "}", inputVariables[variable.Key]);
                        }
                        else
                        {
                            throw new InvalidOperationException($"The variable `{variable.Key}` in the server URL has invalid value #{inputVariables[variable.Key]}. Must be {(List<string>)serverVariables["enum_values"]}");
                        }
                    }
                    else
                    {
                        // use default value
                        url = url.Replace("{" + variable.Key + "}", (string)serverVariables["default_value"]);
                    }
                }
            }
            return url;
        }
        #endregion Properties
        #region Methods
        /// <summary>
        /// Returns a string with essential information for debugging.
        /// </summary>
        public static string ToDebugReport()
        {
            string report = "C# SDK (fetchkptncook) Debug Report:\n";
            report += "    OS: " + System.Environment.OSVersion + "\n";
            report += "    .NET Framework Version: " + System.Environment.Version  + "\n";
            report += "    Version of the API: 1.4.4\n";
            report += "    SDK Package Version: 1.0.0\n";
            return report;
        }
        /// <summary>
        /// Add Api Key Header.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        /// <returns></returns>
        public void AddApiKey(string key, string value)
        {
            ApiKey[key] = value;
        }
        /// <summary>
        /// Sets the API key prefix.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        public void AddApiKeyPrefix(string key, string value)
        {
            ApiKeyPrefix[key] = value;
        }
        #endregion Methods
        #region Static Members
        /// <summary>
        /// Merge configurations.
        /// </summary>
        /// <param name="first">First configuration.</param>
        /// <param name="second">Second configuration.</param>
        /// <return>Merged configuration.</return>
        public static IReadableConfiguration MergeConfigurations(IReadableConfiguration first, IReadableConfiguration second)
        {
            if (second == null) return first ?? GlobalConfiguration.Instance;
            Dictionary<string, string> apiKey = first.ApiKey.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            Dictionary<string, string> apiKeyPrefix = first.ApiKeyPrefix.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            Dictionary<string, string> defaultHeaders = first.DefaultHeaders.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            foreach (var kvp in second.ApiKey) apiKey[kvp.Key] = kvp.Value;
            foreach (var kvp in second.ApiKeyPrefix) apiKeyPrefix[kvp.Key] = kvp.Value;
            foreach (var kvp in second.DefaultHeaders) defaultHeaders[kvp.Key] = kvp.Value;
            var config = new Configuration
            {
                ApiKey = apiKey,
                ApiKeyPrefix = apiKeyPrefix,
                DefaultHeaders = defaultHeaders,
                BasePath = second.BasePath ?? first.BasePath,
                Timeout = second.Timeout,
                Proxy = second.Proxy ?? first.Proxy,
                UserAgent = second.UserAgent ?? first.UserAgent,
                Username = second.Username ?? first.Username,
                Password = second.Password ?? first.Password,
                AccessToken = second.AccessToken ?? first.AccessToken,
                TempFolderPath = second.TempFolderPath ?? first.TempFolderPath,
                DateTimeFormat = second.DateTimeFormat ?? first.DateTimeFormat,
                ClientCertificates = second.ClientCertificates ?? first.ClientCertificates,
            };
            return config;
        }
        #endregion Static Members
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// A delegate to ExceptionFactory method
    /// </summary>
    /// <param name="methodName">Method name</param>
    /// <param name="response">Response</param>
    /// <returns>Exceptions</returns>
    public delegate Exception ExceptionFactory(string methodName, IApiResponse response);
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// <see cref="GlobalConfiguration"/> provides a compile-time extension point for globally configuring
    /// API Clients.
    /// </summary>
    /// <remarks>
    /// A customized implementation via partial class may reside in another file and may
    /// be excluded from automatic generation via a .openapi-generator-ignore file.
    /// </remarks>
    public partial class GlobalConfiguration : Configuration
    {
        #region Private Members
        private static readonly object GlobalConfigSync = new { };
        private static IReadableConfiguration _globalConfiguration;
        #endregion Private Members
        #region Constructors
        /// <inheritdoc />
        private GlobalConfiguration()
        {
        }
        /// <inheritdoc />
        public GlobalConfiguration(IDictionary<string, string> defaultHeader, IDictionary<string, string> apiKey, IDictionary<string, string> apiKeyPrefix, string basePath = "http://localhost:3000/api") : base(defaultHeader, apiKey, apiKeyPrefix, basePath)
        {
        }
        static GlobalConfiguration()
        {
            Instance = new GlobalConfiguration();
        }
        #endregion Constructors
        /// <summary>
        /// Gets or sets the default Configuration.
        /// </summary>
        /// <value>Configuration.</value>
        public static IReadableConfiguration Instance
        {
            get { return _globalConfiguration; }
            set
            {
                lock (GlobalConfigSync)
                {
                    _globalConfiguration = value;
                }
            }
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Http methods supported by swagger
    /// </summary>
    public enum HttpMethod
    {
        /// <summary>HTTP GET request.</summary>
        Get,
        /// <summary>HTTP POST request.</summary>
        Post,
        /// <summary>HTTP PUT request.</summary>
        Put,
        /// <summary>HTTP DELETE request.</summary>
        Delete,
        /// <summary>HTTP HEAD request.</summary>
        Head,
        /// <summary>HTTP OPTIONS request.</summary>
        Options,
        /// <summary>HTTP PATCH request.</summary>
        Patch
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Represents configuration aspects required to interact with the API endpoints.
    /// </summary>
    public interface IApiAccessor
    {
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        IReadableConfiguration Configuration { get; set; }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        ExceptionFactory ExceptionFactory { get; set; }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Contract for Asynchronous RESTful API interactions.
    ///
    /// This interface allows consumers to provide a custom API accessor client.
    /// </summary>
    public interface IAsynchronousClient
    {
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the GET http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> GetAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the POST http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> PostAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the PUT http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> PutAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the DELETE http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> DeleteAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the HEAD http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> HeadAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the OPTIONS http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> OptionsAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the PATCH http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> PatchAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Represents a readable-only configuration contract.
    /// </summary>
    public interface IReadableConfiguration
    {
        /// <summary>
        /// Gets the access token.
        /// </summary>
        /// <value>Access token.</value>
        string AccessToken { get; }
        /// <summary>
        /// Gets the API key.
        /// </summary>
        /// <value>API key.</value>
        IDictionary<string, string> ApiKey { get; }
        /// <summary>
        /// Gets the API key prefix.
        /// </summary>
        /// <value>API key prefix.</value>
        IDictionary<string, string> ApiKeyPrefix { get; }
        /// <summary>
        /// Gets the base path.
        /// </summary>
        /// <value>Base path.</value>
        string BasePath { get; }
        /// <summary>
        /// Gets the date time format.
        /// </summary>
        /// <value>Date time format.</value>
        string DateTimeFormat { get; }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <value>Default header.</value>
        [Obsolete("Use DefaultHeaders instead.")]
        IDictionary<string, string> DefaultHeader { get; }
        /// <summary>
        /// Gets the default headers.
        /// </summary>
        /// <value>Default headers.</value>
        IDictionary<string, string> DefaultHeaders { get; }
        /// <summary>
        /// Gets the temp folder path.
        /// </summary>
        /// <value>Temp folder path.</value>
        string TempFolderPath { get; }
        /// <summary>
        /// Gets the HTTP connection timeout (in milliseconds)
        /// </summary>
        /// <value>HTTP connection timeout.</value>
        int Timeout { get; }
        /// <summary>
        /// Gets the proxy.
        /// </summary>
        /// <value>Proxy.</value>
        WebProxy Proxy { get; }
        /// <summary>
        /// Gets the user agent.
        /// </summary>
        /// <value>User agent.</value>
        string UserAgent { get; }
        /// <summary>
        /// Gets the username.
        /// </summary>
        /// <value>Username.</value>
        string Username { get; }
        /// <summary>
        /// Gets the password.
        /// </summary>
        /// <value>Password.</value>
        string Password { get; }
        /// <summary>
        /// Get the servers associated with the operation.
        /// </summary>
        /// <value>Operation servers.</value>
        IReadOnlyDictionary<string, List<IReadOnlyDictionary<string, object>>> OperationServers { get; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        string GetApiKeyWithPrefix(string apiKeyIdentifier);
        /// <summary>
        /// Gets the Operation server url at the provided index.
        /// </summary>
        /// <param name="operation">Operation server name.</param>
        /// <param name="index">Index of the operation server settings.</param>
        /// <returns></returns>
        string GetOperationServerUrl(string operation, int index);
        /// <summary>
        /// Gets certificate collection to be sent with requests.
        /// </summary>
        /// <value>X509 Certificate collection.</value>
        X509CertificateCollection ClientCertificates { get; }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Contract for Synchronous RESTful API interactions.
    ///
    /// This interface allows consumers to provide a custom API accessor client.
    /// </summary>
    public interface ISynchronousClient
    {
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the GET http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Get<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the POST http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Post<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the PUT http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Put<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the DELETE http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Delete<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the HEAD http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Head<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the OPTIONS http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Options<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the PATCH http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Patch<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// A dictionary in which one key has many associated values.
    /// </summary>
    /// <typeparam name="TKey">The type of the key</typeparam>
    /// <typeparam name="TValue">The type of the value associated with the key.</typeparam>
    public class Multimap<TKey, TValue> : IDictionary<TKey, IList<TValue>>
    {
        #region Private Fields
        private readonly Dictionary<TKey, IList<TValue>> _dictionary;
        #endregion Private Fields
        #region Constructors
        /// <summary>
        /// Empty Constructor.
        /// </summary>
        public Multimap()
        {
            _dictionary = new Dictionary<TKey, IList<TValue>>();
        }
        /// <summary>
        /// Constructor with comparer.
        /// </summary>
        /// <param name="comparer"></param>
        public Multimap(IEqualityComparer<TKey> comparer)
        {
            _dictionary = new Dictionary<TKey, IList<TValue>>(comparer);
        }
        #endregion Constructors
        #region Enumerators
        /// <summary>
        /// To get the enumerator.
        /// </summary>
        /// <returns>Enumerator</returns>
        public IEnumerator<KeyValuePair<TKey, IList<TValue>>> GetEnumerator()
        {
            return _dictionary.GetEnumerator();
        }
        /// <summary>
        /// To get the enumerator.
        /// </summary>
        /// <returns>Enumerator</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return _dictionary.GetEnumerator();
        }
        #endregion Enumerators
        #region Public Members
        /// <summary>
        /// Add values to Multimap
        /// </summary>
        /// <param name="item">Key value pair</param>
        public void Add(KeyValuePair<TKey, IList<TValue>> item)
        {
            if (!TryAdd(item.Key, item.Value))
                throw new InvalidOperationException("Could not add values to Multimap.");
        }
        /// <summary>
        /// Add Multimap to Multimap
        /// </summary>
        /// <param name="multimap">Multimap</param>
        public void Add(Multimap<TKey, TValue> multimap)
        {
            foreach (var item in multimap)
            {
                if (!TryAdd(item.Key, item.Value))
                    throw new InvalidOperationException("Could not add values to Multimap.");
            }
        }
        /// <summary>
        /// Clear Multimap
        /// </summary>
        public void Clear()
        {
            _dictionary.Clear();
        }
        /// <summary>
        /// Determines whether Multimap contains the specified item.
        /// </summary>
        /// <param name="item">Key value pair</param>
        /// <exception cref="NotImplementedException">Method needs to be implemented</exception>
        /// <returns>true if the Multimap contains the item; otherwise, false.</returns>
        public bool Contains(KeyValuePair<TKey, IList<TValue>> item)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        ///  Copy items of the Multimap to an array,
        ///     starting at a particular array index.
        /// </summary>
        /// <param name="array">The array that is the destination of the items copied
        ///     from Multimap. The array must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        /// <exception cref="NotImplementedException">Method needs to be implemented</exception>
        public void CopyTo(KeyValuePair<TKey, IList<TValue>>[] array, int arrayIndex)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Removes the specified item from the Multimap.
        /// </summary>
        /// <param name="item">Key value pair</param>
        /// <returns>true if the item is successfully removed; otherwise, false.</returns>
        /// <exception cref="NotImplementedException">Method needs to be implemented</exception>
        public bool Remove(KeyValuePair<TKey, IList<TValue>> item)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Gets the number of items contained in the Multimap.
        /// </summary>
        public int Count => _dictionary.Count;
        /// <summary>
        /// Gets a value indicating whether the Multimap is read-only.
        /// </summary>
        public bool IsReadOnly => false;
        /// <summary>
        /// Adds an item with the provided key and value to the Multimap.
        /// </summary>
        /// <param name="key">The object to use as the key of the item to add.</param>
        /// <param name="value">The object to use as the value of the item to add.</param>
        /// <exception cref="InvalidOperationException">Thrown when couldn't add the value to Multimap.</exception>
        public void Add(TKey key, IList<TValue> value)
        {
            if (value != null && value.Count > 0)
            {
                if (_dictionary.TryGetValue(key, out var list))
                {
                    foreach (var k in value) list.Add(k);
                }
                else
                {
                    list = new List<TValue>(value);
                    if (!TryAdd(key, list))
                        throw new InvalidOperationException("Could not add values to Multimap.");
                }
            }
        }
        /// <summary>
        /// Determines whether the Multimap contains an item with the specified key.
        /// </summary>
        /// <param name="key">The key to locate in the Multimap.</param>
        /// <returns>true if the Multimap contains an item with
        ///     the key; otherwise, false.</returns>
        public bool ContainsKey(TKey key)
        {
            return _dictionary.ContainsKey(key);
        }
        /// <summary>
        /// Removes item with the specified key from the Multimap.
        /// </summary>
        /// <param name="key">The key to locate in the Multimap.</param>
        /// <returns>true if the item is successfully removed; otherwise, false.</returns>
        public bool Remove(TKey key)
        {
            return TryRemove(key, out var _);
        }
        /// <summary>
        /// Gets the value associated with the specified key.
        /// </summary>
        /// <param name="key">The key whose value to get.</param>
        /// <param name="value">When this method returns, the value associated with the specified key, if the
        ///     key is found; otherwise, the default value for the type of the value parameter.
        ///     This parameter is passed uninitialized.</param>
        /// <returns> true if the object that implements Multimap contains
        ///     an item with the specified key; otherwise, false.</returns>
        public bool TryGetValue(TKey key, out IList<TValue> value)
        {
            return _dictionary.TryGetValue(key, out value);
        }
        /// <summary>
        /// Gets or sets the item with the specified key.
        /// </summary>
        /// <param name="key">The key of the item to get or set.</param>
        /// <returns>The value of the specified key.</returns>
        public IList<TValue> this[TKey key]
        {
            get => _dictionary[key];
            set => _dictionary[key] = value;
        }
        /// <summary>
        /// Gets a System.Collections.Generic.ICollection containing the keys of the Multimap.
        /// </summary>
        public ICollection<TKey> Keys => _dictionary.Keys;
        /// <summary>
        /// Gets a System.Collections.Generic.ICollection containing the values of the Multimap.
        /// </summary>
        public ICollection<IList<TValue>> Values => _dictionary.Values;
        /// <summary>
        ///  Copy the items of the Multimap to an System.Array,
        ///     starting at a particular System.Array index.
        /// </summary>
        /// <param name="array">The one-dimensional System.Array that is the destination of the items copied
        ///     from Multimap. The System.Array must have zero-based indexing.</param>
        /// <param name="index">The zero-based index in array at which copying begins.</param>
        public void CopyTo(Array array, int index)
        {
            ((ICollection)_dictionary).CopyTo(array, index);
        }
        /// <summary>
        /// Adds an item with the provided key and value to the Multimap.
        /// </summary>
        /// <param name="key">The object to use as the key of the item to add.</param>
        /// <param name="value">The object to use as the value of the item to add.</param>
        /// <exception cref="InvalidOperationException">Thrown when couldn't add value to Multimap.</exception>
        public void Add(TKey key, TValue value)
        {
            if (value != null)
            {
                if (_dictionary.TryGetValue(key, out var list))
                {
                    list.Add(value);
                }
                else
                {
                    list = new List<TValue> { value };
                    if (!TryAdd(key, list))
                        throw new InvalidOperationException("Could not add value to Multimap.");
                }
            }
        }
        #endregion Public Members
        #region Private Members
        /**
         * Helper method to encapsulate generator differences between dictionary types.
         */
        private bool TryRemove(TKey key, out IList<TValue> value)
        {
            _dictionary.TryGetValue(key, out value);
            return _dictionary.Remove(key);
        }
        /**
         * Helper method to encapsulate generator differences between dictionary types.
         */
        private bool TryAdd(TKey key, IList<TValue> value)
        {
            try
            {
                _dictionary.Add(key, value);
            }
            catch (ArgumentException)
            {
                return false;
            }
            return true;
        }
        #endregion Private Members
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Formatter for 'date' openapi formats ss defined by full-date - RFC3339
    /// see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
    /// </summary>
    public class OpenAPIDateConverter : IsoDateTimeConverter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenAPIDateConverter" /> class.
        /// </summary>
        public OpenAPIDateConverter()
        {
            // full-date   = date-fullyear "-" date-month "-" date-mday
            DateTimeFormat = "yyyy-MM-dd";
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// A container for generalized request inputs. This type allows consumers to extend the request functionality
    /// by abstracting away from the default (built-in) request framework (e.g. RestSharp).
    /// </summary>
    public class RequestOptions
    {
        /// <summary>
        /// Parameters to be bound to path parts of the Request's URL
        /// </summary>
        public Dictionary<string, string> PathParameters { get; set; }
        /// <summary>
        /// Query parameters to be applied to the request.
        /// Keys may have 1 or more values associated.
        /// </summary>
        public Multimap<string, string> QueryParameters { get; set; }
        /// <summary>
        /// Header parameters to be applied to to the request.
        /// Keys may have 1 or more values associated.
        /// </summary>
        public Multimap<string, string> HeaderParameters { get; set; }
        /// <summary>
        /// Form parameters to be sent along with the request.
        /// </summary>
        public Dictionary<string, string> FormParameters { get; set; }
        /// <summary>
        /// File parameters to be sent along with the request.
        /// </summary>
        public Multimap<string, Stream> FileParameters { get; set; }
        /// <summary>
        /// Cookies to be sent along with the request.
        /// </summary>
        public List<Cookie> Cookies { get; set; }
        /// <summary>
        /// Operation associated with the request path.
        /// </summary>
        public string Operation { get; set; }
        /// <summary>
        /// Index associated with the operation.
        /// </summary>
        public int OperationIndex { get; set; }
        /// <summary>
        /// Any data associated with a request body.
        /// </summary>
        public Object Data { get; set; }
        /// <summary>
        /// Constructs a new instance of <see cref="RequestOptions"/>
        /// </summary>
        public RequestOptions()
        {
            PathParameters = new Dictionary<string, string>();
            QueryParameters = new Multimap<string, string>();
            HeaderParameters = new Multimap<string, string>();
            FormParameters = new Dictionary<string, string>();
            FileParameters = new Multimap<string, Stream>();
            Cookies = new List<Cookie>();
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Client
{
    /// <summary>
    /// Configuration class to set the polly retry policies to be applied to the requests.
    /// </summary>
    public static class RetryConfiguration
    {
        /// <summary>
        /// Retry policy
        /// </summary>
        public static Policy<RestResponse> RetryPolicy { get; set; }
        /// <summary>
        /// Async retry policy
        /// </summary>
        public static AsyncPolicy<RestResponse> AsyncRetryPolicy { get; set; }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    ///  Abstract base class for oneOf, anyOf schemas in the OpenAPI specification
    /// </summary>
    public abstract partial class AbstractOpenAPISchema
    {
        /// <summary>
        ///  Custom JSON serializer
        /// </summary>
        static public readonly JsonSerializerSettings SerializerSettings = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            MissingMemberHandling = MissingMemberHandling.Error,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };
        /// <summary>
        ///  Custom JSON serializer for objects with additional properties
        /// </summary>
        static public readonly JsonSerializerSettings AdditionalPropertiesSerializerSettings = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            MissingMemberHandling = MissingMemberHandling.Ignore,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };
        /// <summary>
        /// Gets or Sets the actual instance
        /// </summary>
        public abstract Object ActualInstance { get; set; }
        /// <summary>
        /// Gets or Sets IsNullable to indicate whether the instance is nullable
        /// </summary>
        public bool IsNullable { get; protected set; }
        /// <summary>
        /// Gets or Sets the schema type, which can be either `oneOf` or `anyOf`
        /// </summary>
        public string SchemaType { get; protected set; }
        /// <summary>
        /// Converts the instance into JSON string.
        /// </summary>
        public abstract string ToJson();
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// AccessToken
    /// </summary>
    [DataContract(Name = "AccessToken")]
    public partial class AccessToken : IEquatable<AccessToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccessToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessToken" /> class.
        /// </summary>
        /// <param name="expires">expires (required).</param>
        /// <param name="scope">scope.</param>
        public AccessToken(DateTime expires = default(DateTime), string scope = default(string))
        {
            this.Expires = expires;
            this.Scope = scope;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; private set; }
        /// <summary>
        /// Returns false as Token should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeToken()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name = "expires", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Expires { get; set; }
        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public DateTime Created { get; private set; }
        /// <summary>
        /// Returns false as Created should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreated()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = true)]
        public DateTime Updated { get; private set; }
        /// <summary>
        /// Returns false as Updated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdated()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessToken {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccessToken);
        }
        /// <summary>
        /// Returns true if AccessToken instances are equal
        /// </summary>
        /// <param name="input">Instance of AccessToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.Expires != null)
                {
                    hashCode = (hashCode * 59) + this.Expires.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.Updated != null)
                {
                    hashCode = (hashCode * 59) + this.Updated.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// AuthToken
    /// </summary>
    [DataContract(Name = "AuthToken")]
    public partial class AuthToken : IEquatable<AuthToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthToken" /> class.
        /// </summary>
        /// <param name="username">username (required).</param>
        /// <param name="password">password (required).</param>
        public AuthToken(string username = default(string), string password = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for AuthToken and cannot be null");
            }
            this.Username = username;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for AuthToken and cannot be null");
            }
            this.Password = password;
        }
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; private set; }
        /// <summary>
        /// Returns false as Token should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeToken()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthToken {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthToken);
        }
        /// <summary>
        /// Returns true if AuthToken instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Automation
    /// </summary>
    [DataContract(Name = "Automation")]
    public partial class Automation : IEquatable<Automation>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FOODALIAS for value: FOOD_ALIAS
            /// </summary>
            [EnumMember(Value = "FOOD_ALIAS")]
            FOODALIAS = 1,
            /// <summary>
            /// Enum UNITALIAS for value: UNIT_ALIAS
            /// </summary>
            [EnumMember(Value = "UNIT_ALIAS")]
            UNITALIAS = 2,
            /// <summary>
            /// Enum KEYWORDALIAS for value: KEYWORD_ALIAS
            /// </summary>
            [EnumMember(Value = "KEYWORD_ALIAS")]
            KEYWORDALIAS = 3
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Automation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Automation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Automation" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="param1">param1.</param>
        /// <param name="param2">param2.</param>
        /// <param name="param3">param3.</param>
        /// <param name="disabled">disabled.</param>
        public Automation(TypeEnum type = default(TypeEnum), string name = default(string), string description = default(string), string param1 = default(string), string param2 = default(string), string param3 = default(string), bool disabled = default(bool))
        {
            this.Type = type;
            this.Name = name;
            this.Description = description;
            this.Param1 = param1;
            this.Param2 = param2;
            this.Param3 = param3;
            this.Disabled = disabled;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Param1
        /// </summary>
        [DataMember(Name = "param_1", EmitDefaultValue = true)]
        public string Param1 { get; set; }
        /// <summary>
        /// Gets or Sets Param2
        /// </summary>
        [DataMember(Name = "param_2", EmitDefaultValue = true)]
        public string Param2 { get; set; }
        /// <summary>
        /// Gets or Sets Param3
        /// </summary>
        [DataMember(Name = "param_3", EmitDefaultValue = true)]
        public string Param3 { get; set; }
        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name = "disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Automation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Param1: ").Append(Param1).Append("\n");
            sb.Append("  Param2: ").Append(Param2).Append("\n");
            sb.Append("  Param3: ").Append(Param3).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Automation);
        }
        /// <summary>
        /// Returns true if Automation instances are equal
        /// </summary>
        /// <param name="input">Instance of Automation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Automation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Param1 == input.Param1 ||
                    (this.Param1 != null &&
                    this.Param1.Equals(input.Param1))
                ) && 
                (
                    this.Param2 == input.Param2 ||
                    (this.Param2 != null &&
                    this.Param2.Equals(input.Param2))
                ) && 
                (
                    this.Param3 == input.Param3 ||
                    (this.Param3 != null &&
                    this.Param3.Equals(input.Param3))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    this.Disabled.Equals(input.Disabled)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Param1 != null)
                {
                    hashCode = (hashCode * 59) + this.Param1.GetHashCode();
                }
                if (this.Param2 != null)
                {
                    hashCode = (hashCode * 59) + this.Param2.GetHashCode();
                }
                if (this.Param3 != null)
                {
                    hashCode = (hashCode * 59) + this.Param3.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Disabled.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Param1 (string) maxLength
            if (this.Param1 != null && this.Param1.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Param1, length must be less than 128.", new [] { "Param1" });
            }
            // Param2 (string) maxLength
            if (this.Param2 != null && this.Param2.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Param2, length must be less than 128.", new [] { "Param2" });
            }
            // Param3 (string) maxLength
            if (this.Param3 != null && this.Param3.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Param3, length must be less than 128.", new [] { "Param3" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// BookmarkletImport
    /// </summary>
    [DataContract(Name = "BookmarkletImport")]
    public partial class BookmarkletImport : IEquatable<BookmarkletImport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookmarkletImport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BookmarkletImport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BookmarkletImport" /> class.
        /// </summary>
        /// <param name="url">url.</param>
        /// <param name="html">html (required).</param>
        public BookmarkletImport(string url = default(string), string html = default(string))
        {
            // to ensure "html" is required (not null)
            if (html == null)
            {
                throw new ArgumentNullException("html is a required property for BookmarkletImport and cannot be null");
            }
            this.Html = html;
            this.Url = url;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }
        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name = "html", IsRequired = true, EmitDefaultValue = true)]
        public string Html { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookmarkletImport {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookmarkletImport);
        }
        /// <summary>
        /// Returns true if BookmarkletImport instances are equal
        /// </summary>
        /// <param name="input">Instance of BookmarkletImport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookmarkletImport input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Html != null)
                {
                    hashCode = (hashCode * 59) + this.Html.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be less than 256.", new [] { "Url" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// BookmarkletImportList
    /// </summary>
    [DataContract(Name = "BookmarkletImportList")]
    public partial class BookmarkletImportList : IEquatable<BookmarkletImportList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookmarkletImportList" /> class.
        /// </summary>
        /// <param name="url">url.</param>
        public BookmarkletImportList(string url = default(string))
        {
            this.Url = url;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookmarkletImportList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookmarkletImportList);
        }
        /// <summary>
        /// Returns true if BookmarkletImportList instances are equal
        /// </summary>
        /// <param name="input">Instance of BookmarkletImportList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookmarkletImportList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be less than 256.", new [] { "Url" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// CookLog
    /// </summary>
    [DataContract(Name = "CookLog")]
    public partial class CookLog : IEquatable<CookLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CookLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CookLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CookLog" /> class.
        /// </summary>
        /// <param name="recipe">recipe (required).</param>
        /// <param name="servings">servings.</param>
        /// <param name="rating">rating.</param>
        /// <param name="createdAt">createdAt.</param>
        public CookLog(int recipe = default(int), int servings = default(int), int? rating = default(int?), DateTime createdAt = default(DateTime))
        {
            this.Recipe = recipe;
            this.Servings = servings;
            this.Rating = rating;
            this.CreatedAt = createdAt;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", IsRequired = true, EmitDefaultValue = true)]
        public int Recipe { get; set; }
        /// <summary>
        /// Gets or Sets Servings
        /// </summary>
        [DataMember(Name = "servings", EmitDefaultValue = true)]
        public int Servings { get; set; }
        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name = "rating", EmitDefaultValue = true)]
        public int? Rating { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CookLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CookLog);
        }
        /// <summary>
        /// Returns true if CookLog instances are equal
        /// </summary>
        /// <param name="input">Instance of CookLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CookLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Recipe == input.Recipe ||
                    this.Recipe.Equals(input.Recipe)
                ) && 
                (
                    this.Servings == input.Servings ||
                    this.Servings.Equals(input.Servings)
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Recipe.GetHashCode();
                hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                if (this.Rating != null)
                {
                    hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Servings (int) maximum
            if (this.Servings > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Servings, must be a value less than or equal to 2147483647.", new [] { "Servings" });
            }
            // Servings (int) minimum
            if (this.Servings < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Servings, must be a value greater than or equal to -2147483648.", new [] { "Servings" });
            }
            // Rating (int?) maximum
            if (this.Rating > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rating, must be a value less than or equal to 2147483647.", new [] { "Rating" });
            }
            // Rating (int?) minimum
            if (this.Rating < (int?)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rating, must be a value greater than or equal to -2147483648.", new [] { "Rating" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// CustomFilter
    /// </summary>
    [DataContract(Name = "CustomFilter")]
    public partial class CustomFilter : IEquatable<CustomFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFilter" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="search">search (required).</param>
        /// <param name="shared">shared.</param>
        public CustomFilter(string name = default(string), string search = default(string), List<CustomFilterSharedInner> shared = default(List<CustomFilterSharedInner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CustomFilter and cannot be null");
            }
            this.Name = name;
            // to ensure "search" is required (not null)
            if (search == null)
            {
                throw new ArgumentNullException("search is a required property for CustomFilter and cannot be null");
            }
            this.Search = search;
            this.Shared = shared;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name = "search", IsRequired = true, EmitDefaultValue = true)]
        public string Search { get; set; }
        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public List<CustomFilterSharedInner> Shared { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFilter {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFilter);
        }
        /// <summary>
        /// Returns true if CustomFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Search == input.Search ||
                    (this.Search != null &&
                    this.Search.Equals(input.Search))
                ) && 
                (
                    this.Shared == input.Shared ||
                    this.Shared != null &&
                    input.Shared != null &&
                    this.Shared.SequenceEqual(input.Shared)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Search != null)
                {
                    hashCode = (hashCode * 59) + this.Search.GetHashCode();
                }
                if (this.Shared != null)
                {
                    hashCode = (hashCode * 59) + this.Shared.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// CustomFilterSharedInner
    /// </summary>
    [DataContract(Name = "CustomFilter_shared_inner")]
    public partial class CustomFilterSharedInner : IEquatable<CustomFilterSharedInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFilterSharedInner" /> class.
        /// </summary>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        public CustomFilterSharedInner(string firstName = default(string), string lastName = default(string))
        {
            this.FirstName = firstName;
            this.LastName = lastName;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
        /// </summary>
        /// <value>Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.</value>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; private set; }
        /// <summary>
        /// Returns false as Username should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsername()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = true)]
        public string DisplayName { get; private set; }
        /// <summary>
        /// Returns false as DisplayName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayName()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFilterSharedInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFilterSharedInner);
        }
        /// <summary>
        /// Returns true if CustomFilterSharedInner instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFilterSharedInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFilterSharedInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 150.", new [] { "FirstName" });
            }
            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 150.", new [] { "LastName" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ExportLog
    /// </summary>
    [DataContract(Name = "ExportLog")]
    public partial class ExportLog : IEquatable<ExportLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportLog" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="msg">msg.</param>
        /// <param name="running">running.</param>
        /// <param name="totalRecipes">totalRecipes.</param>
        /// <param name="exportedRecipes">exportedRecipes.</param>
        /// <param name="cacheDuration">cacheDuration.</param>
        /// <param name="possiblyNotExpired">possiblyNotExpired.</param>
        public ExportLog(string type = default(string), string msg = default(string), bool running = default(bool), int totalRecipes = default(int), int exportedRecipes = default(int), int cacheDuration = default(int), bool possiblyNotExpired = default(bool))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ExportLog and cannot be null");
            }
            this.Type = type;
            this.Msg = msg;
            this.Running = running;
            this.TotalRecipes = totalRecipes;
            this.ExportedRecipes = exportedRecipes;
            this.CacheDuration = cacheDuration;
            this.PossiblyNotExpired = possiblyNotExpired;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [DataMember(Name = "msg", EmitDefaultValue = true)]
        public string Msg { get; set; }
        /// <summary>
        /// Gets or Sets Running
        /// </summary>
        [DataMember(Name = "running", EmitDefaultValue = true)]
        public bool Running { get; set; }
        /// <summary>
        /// Gets or Sets TotalRecipes
        /// </summary>
        [DataMember(Name = "total_recipes", EmitDefaultValue = true)]
        public int TotalRecipes { get; set; }
        /// <summary>
        /// Gets or Sets ExportedRecipes
        /// </summary>
        [DataMember(Name = "exported_recipes", EmitDefaultValue = true)]
        public int ExportedRecipes { get; set; }
        /// <summary>
        /// Gets or Sets CacheDuration
        /// </summary>
        [DataMember(Name = "cache_duration", EmitDefaultValue = true)]
        public int CacheDuration { get; set; }
        /// <summary>
        /// Gets or Sets PossiblyNotExpired
        /// </summary>
        [DataMember(Name = "possibly_not_expired", EmitDefaultValue = true)]
        public bool PossiblyNotExpired { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExportLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  TotalRecipes: ").Append(TotalRecipes).Append("\n");
            sb.Append("  ExportedRecipes: ").Append(ExportedRecipes).Append("\n");
            sb.Append("  CacheDuration: ").Append(CacheDuration).Append("\n");
            sb.Append("  PossiblyNotExpired: ").Append(PossiblyNotExpired).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportLog);
        }
        /// <summary>
        /// Returns true if ExportLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                ) && 
                (
                    this.Running == input.Running ||
                    this.Running.Equals(input.Running)
                ) && 
                (
                    this.TotalRecipes == input.TotalRecipes ||
                    this.TotalRecipes.Equals(input.TotalRecipes)
                ) && 
                (
                    this.ExportedRecipes == input.ExportedRecipes ||
                    this.ExportedRecipes.Equals(input.ExportedRecipes)
                ) && 
                (
                    this.CacheDuration == input.CacheDuration ||
                    this.CacheDuration.Equals(input.CacheDuration)
                ) && 
                (
                    this.PossiblyNotExpired == input.PossiblyNotExpired ||
                    this.PossiblyNotExpired.Equals(input.PossiblyNotExpired)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Msg != null)
                {
                    hashCode = (hashCode * 59) + this.Msg.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Running.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalRecipes.GetHashCode();
                hashCode = (hashCode * 59) + this.ExportedRecipes.GetHashCode();
                hashCode = (hashCode * 59) + this.CacheDuration.GetHashCode();
                hashCode = (hashCode * 59) + this.PossiblyNotExpired.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Type (string) maxLength
            if (this.Type != null && this.Type.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 32.", new [] { "Type" });
            }
            // TotalRecipes (int) maximum
            if (this.TotalRecipes > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalRecipes, must be a value less than or equal to 2147483647.", new [] { "TotalRecipes" });
            }
            // TotalRecipes (int) minimum
            if (this.TotalRecipes < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalRecipes, must be a value greater than or equal to -2147483648.", new [] { "TotalRecipes" });
            }
            // ExportedRecipes (int) maximum
            if (this.ExportedRecipes > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExportedRecipes, must be a value less than or equal to 2147483647.", new [] { "ExportedRecipes" });
            }
            // ExportedRecipes (int) minimum
            if (this.ExportedRecipes < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExportedRecipes, must be a value greater than or equal to -2147483648.", new [] { "ExportedRecipes" });
            }
            // CacheDuration (int) maximum
            if (this.CacheDuration > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CacheDuration, must be a value less than or equal to 2147483647.", new [] { "CacheDuration" });
            }
            // CacheDuration (int) minimum
            if (this.CacheDuration < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CacheDuration, must be a value greater than or equal to -2147483648.", new [] { "CacheDuration" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Food
    /// </summary>
    [DataContract(Name = "Food")]
    public partial class Food : IEquatable<Food>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Food" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Food() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Food" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="recipe">recipe.</param>
        /// <param name="foodOnhand">foodOnhand.</param>
        /// <param name="supermarketCategory">supermarketCategory.</param>
        /// <param name="inheritFields">inheritFields.</param>
        /// <param name="ignoreShopping">ignoreShopping.</param>
        /// <param name="substitute">substitute.</param>
        /// <param name="substituteSiblings">substituteSiblings.</param>
        /// <param name="substituteChildren">substituteChildren.</param>
        /// <param name="childInheritFields">childInheritFields.</param>
        public Food(string name = default(string), string description = default(string), FoodRecipe recipe = default(FoodRecipe), string foodOnhand = default(string), FoodSupermarketCategory supermarketCategory = default(FoodSupermarketCategory), List<FoodInheritFieldsInner> inheritFields = default(List<FoodInheritFieldsInner>), bool ignoreShopping = default(bool), List<FoodSubstituteInner> substitute = default(List<FoodSubstituteInner>), bool substituteSiblings = default(bool), bool substituteChildren = default(bool), List<FoodInheritFieldsInner> childInheritFields = default(List<FoodInheritFieldsInner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Food and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            this.Recipe = recipe;
            this.FoodOnhand = foodOnhand;
            this.SupermarketCategory = supermarketCategory;
            this.InheritFields = inheritFields;
            this.IgnoreShopping = ignoreShopping;
            this.Substitute = substitute;
            this.SubstituteSiblings = substituteSiblings;
            this.SubstituteChildren = substituteChildren;
            this.ChildInheritFields = childInheritFields;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Shopping
        /// </summary>
        [DataMember(Name = "shopping", EmitDefaultValue = true)]
        public string Shopping { get; private set; }
        /// <summary>
        /// Returns false as Shopping should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShopping()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", EmitDefaultValue = true)]
        public FoodRecipe Recipe { get; set; }
        /// <summary>
        /// Gets or Sets FoodOnhand
        /// </summary>
        [DataMember(Name = "food_onhand", EmitDefaultValue = true)]
        public string FoodOnhand { get; set; }
        /// <summary>
        /// Gets or Sets SupermarketCategory
        /// </summary>
        [DataMember(Name = "supermarket_category", EmitDefaultValue = true)]
        public FoodSupermarketCategory SupermarketCategory { get; set; }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = true)]
        public string Parent { get; private set; }
        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Numchild
        /// </summary>
        [DataMember(Name = "numchild", EmitDefaultValue = true)]
        public int Numchild { get; private set; }
        /// <summary>
        /// Returns false as Numchild should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumchild()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets InheritFields
        /// </summary>
        [DataMember(Name = "inherit_fields", EmitDefaultValue = true)]
        public List<FoodInheritFieldsInner> InheritFields { get; set; }
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = true)]
        public string FullName { get; private set; }
        /// <summary>
        /// Returns false as FullName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IgnoreShopping
        /// </summary>
        [DataMember(Name = "ignore_shopping", EmitDefaultValue = true)]
        public bool IgnoreShopping { get; set; }
        /// <summary>
        /// Gets or Sets Substitute
        /// </summary>
        [DataMember(Name = "substitute", EmitDefaultValue = true)]
        public List<FoodSubstituteInner> Substitute { get; set; }
        /// <summary>
        /// Gets or Sets SubstituteSiblings
        /// </summary>
        [DataMember(Name = "substitute_siblings", EmitDefaultValue = true)]
        public bool SubstituteSiblings { get; set; }
        /// <summary>
        /// Gets or Sets SubstituteChildren
        /// </summary>
        [DataMember(Name = "substitute_children", EmitDefaultValue = true)]
        public bool SubstituteChildren { get; set; }
        /// <summary>
        /// Gets or Sets SubstituteOnhand
        /// </summary>
        [DataMember(Name = "substitute_onhand", EmitDefaultValue = true)]
        public string SubstituteOnhand { get; private set; }
        /// <summary>
        /// Returns false as SubstituteOnhand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubstituteOnhand()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ChildInheritFields
        /// </summary>
        [DataMember(Name = "child_inherit_fields", EmitDefaultValue = true)]
        public List<FoodInheritFieldsInner> ChildInheritFields { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Food {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Shopping: ").Append(Shopping).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  FoodOnhand: ").Append(FoodOnhand).Append("\n");
            sb.Append("  SupermarketCategory: ").Append(SupermarketCategory).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Numchild: ").Append(Numchild).Append("\n");
            sb.Append("  InheritFields: ").Append(InheritFields).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  IgnoreShopping: ").Append(IgnoreShopping).Append("\n");
            sb.Append("  Substitute: ").Append(Substitute).Append("\n");
            sb.Append("  SubstituteSiblings: ").Append(SubstituteSiblings).Append("\n");
            sb.Append("  SubstituteChildren: ").Append(SubstituteChildren).Append("\n");
            sb.Append("  SubstituteOnhand: ").Append(SubstituteOnhand).Append("\n");
            sb.Append("  ChildInheritFields: ").Append(ChildInheritFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Food);
        }
        /// <summary>
        /// Returns true if Food instances are equal
        /// </summary>
        /// <param name="input">Instance of Food to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Food input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Shopping == input.Shopping ||
                    (this.Shopping != null &&
                    this.Shopping.Equals(input.Shopping))
                ) && 
                (
                    this.Recipe == input.Recipe ||
                    (this.Recipe != null &&
                    this.Recipe.Equals(input.Recipe))
                ) && 
                (
                    this.FoodOnhand == input.FoodOnhand ||
                    (this.FoodOnhand != null &&
                    this.FoodOnhand.Equals(input.FoodOnhand))
                ) && 
                (
                    this.SupermarketCategory == input.SupermarketCategory ||
                    (this.SupermarketCategory != null &&
                    this.SupermarketCategory.Equals(input.SupermarketCategory))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Numchild == input.Numchild ||
                    this.Numchild.Equals(input.Numchild)
                ) && 
                (
                    this.InheritFields == input.InheritFields ||
                    this.InheritFields != null &&
                    input.InheritFields != null &&
                    this.InheritFields.SequenceEqual(input.InheritFields)
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.IgnoreShopping == input.IgnoreShopping ||
                    this.IgnoreShopping.Equals(input.IgnoreShopping)
                ) && 
                (
                    this.Substitute == input.Substitute ||
                    this.Substitute != null &&
                    input.Substitute != null &&
                    this.Substitute.SequenceEqual(input.Substitute)
                ) && 
                (
                    this.SubstituteSiblings == input.SubstituteSiblings ||
                    this.SubstituteSiblings.Equals(input.SubstituteSiblings)
                ) && 
                (
                    this.SubstituteChildren == input.SubstituteChildren ||
                    this.SubstituteChildren.Equals(input.SubstituteChildren)
                ) && 
                (
                    this.SubstituteOnhand == input.SubstituteOnhand ||
                    (this.SubstituteOnhand != null &&
                    this.SubstituteOnhand.Equals(input.SubstituteOnhand))
                ) && 
                (
                    this.ChildInheritFields == input.ChildInheritFields ||
                    this.ChildInheritFields != null &&
                    input.ChildInheritFields != null &&
                    this.ChildInheritFields.SequenceEqual(input.ChildInheritFields)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Shopping != null)
                {
                    hashCode = (hashCode * 59) + this.Shopping.GetHashCode();
                }
                if (this.Recipe != null)
                {
                    hashCode = (hashCode * 59) + this.Recipe.GetHashCode();
                }
                if (this.FoodOnhand != null)
                {
                    hashCode = (hashCode * 59) + this.FoodOnhand.GetHashCode();
                }
                if (this.SupermarketCategory != null)
                {
                    hashCode = (hashCode * 59) + this.SupermarketCategory.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Numchild.GetHashCode();
                if (this.InheritFields != null)
                {
                    hashCode = (hashCode * 59) + this.InheritFields.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IgnoreShopping.GetHashCode();
                if (this.Substitute != null)
                {
                    hashCode = (hashCode * 59) + this.Substitute.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubstituteSiblings.GetHashCode();
                hashCode = (hashCode * 59) + this.SubstituteChildren.GetHashCode();
                if (this.SubstituteOnhand != null)
                {
                    hashCode = (hashCode * 59) + this.SubstituteOnhand.GetHashCode();
                }
                if (this.ChildInheritFields != null)
                {
                    hashCode = (hashCode * 59) + this.ChildInheritFields.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// FoodInheritField
    /// </summary>
    [DataContract(Name = "FoodInheritField")]
    public partial class FoodInheritField : IEquatable<FoodInheritField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodInheritField" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="field">field.</param>
        public FoodInheritField(string name = default(string), string field = default(string))
        {
            this.Name = name;
            this.Field = field;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", EmitDefaultValue = true)]
        public string Field { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FoodInheritField {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FoodInheritField);
        }
        /// <summary>
        /// Returns true if FoodInheritField instances are equal
        /// </summary>
        /// <param name="input">Instance of FoodInheritField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoodInheritField input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// FoodInheritFieldsInner
    /// </summary>
    [DataContract(Name = "Food_inherit_fields_inner")]
    public partial class FoodInheritFieldsInner : IEquatable<FoodInheritFieldsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodInheritFieldsInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="field">field.</param>
        public FoodInheritFieldsInner(string name = default(string), string field = default(string))
        {
            this.Name = name;
            this.Field = field;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", EmitDefaultValue = true)]
        public string Field { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FoodInheritFieldsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FoodInheritFieldsInner);
        }
        /// <summary>
        /// Returns true if FoodInheritFieldsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of FoodInheritFieldsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoodInheritFieldsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// FoodRecipe
    /// </summary>
    [DataContract(Name = "Food_recipe")]
    public partial class FoodRecipe : IEquatable<FoodRecipe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodRecipe" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FoodRecipe() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodRecipe" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        public FoodRecipe(string name = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FoodRecipe and cannot be null");
            }
            this.Name = name;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; private set; }
        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FoodRecipe {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FoodRecipe);
        }
        /// <summary>
        /// Returns true if FoodRecipe instances are equal
        /// </summary>
        /// <param name="input">Instance of FoodRecipe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoodRecipe input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// FoodShoppingUpdate
    /// </summary>
    [DataContract(Name = "FoodShoppingUpdate")]
    public partial class FoodShoppingUpdate : IEquatable<FoodShoppingUpdate>, IValidatableObject
    {
        /// <summary>
        /// When set to true will delete all food from active shopping lists.
        /// </summary>
        /// <value>When set to true will delete all food from active shopping lists.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeleteEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1
        }
        /// <summary>
        /// When set to true will delete all food from active shopping lists.
        /// </summary>
        /// <value>When set to true will delete all food from active shopping lists.</value>
        [DataMember(Name = "delete", IsRequired = true, EmitDefaultValue = true)]
        public DeleteEnum Delete { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodShoppingUpdate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FoodShoppingUpdate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodShoppingUpdate" /> class.
        /// </summary>
        /// <param name="amount">Amount of food to add to the shopping list.</param>
        /// <param name="unit">ID of unit to use for the shopping list.</param>
        /// <param name="delete">When set to true will delete all food from active shopping lists. (required).</param>
        public FoodShoppingUpdate(int? amount = default(int?), int? unit = default(int?), DeleteEnum delete = default(DeleteEnum))
        {
            this.Delete = delete;
            this.Amount = amount;
            this.Unit = unit;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Amount of food to add to the shopping list
        /// </summary>
        /// <value>Amount of food to add to the shopping list</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public int? Amount { get; set; }
        /// <summary>
        /// ID of unit to use for the shopping list
        /// </summary>
        /// <value>ID of unit to use for the shopping list</value>
        [DataMember(Name = "unit", EmitDefaultValue = true)]
        public int? Unit { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FoodShoppingUpdate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FoodShoppingUpdate);
        }
        /// <summary>
        /// Returns true if FoodShoppingUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of FoodShoppingUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoodShoppingUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Delete == input.Delete ||
                    this.Delete.Equals(input.Delete)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Delete.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// FoodSubstituteInner
    /// </summary>
    [DataContract(Name = "Food_substitute_inner")]
    public partial class FoodSubstituteInner : IEquatable<FoodSubstituteInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodSubstituteInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FoodSubstituteInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodSubstituteInner" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        public FoodSubstituteInner(string name = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FoodSubstituteInner and cannot be null");
            }
            this.Name = name;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FoodSubstituteInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FoodSubstituteInner);
        }
        /// <summary>
        /// Returns true if FoodSubstituteInner instances are equal
        /// </summary>
        /// <param name="input">Instance of FoodSubstituteInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoodSubstituteInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
        [DataContract(Name = "used_in_recipe")]
    public partial class UsedRecipe : IEquatable<UsedRecipe>, IValidatableObject
    {
        [JsonConstructorAttribute]
        protected UsedRecipe() { }

        public UsedRecipe(int id = default(int), string description = default(string))
        {
            // to ensure "id" is required (not null)
            this.id = id;
            this.description = description;
        }

        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? id { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string? description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsedRecipe {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public override bool Equals(object input)
        {
            return this.Equals(input as UsedRecipe);
        }
        /// <summary>
        /// Returns true if FoodSupermarketCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of FoodSupermarketCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsedRecipe input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.id == input.id ||
                    this.id.Equals(input.id)
                ) &&
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.id.GetHashCode();
                if (this.description != null)
                {
                    hashCode = (hashCode * 59) + this.description.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {

            yield break;
        }

    }
    /// <summary>
    /// FoodSupermarketCategory
    /// </summary>
    [DataContract(Name = "Food_supermarket_category")]
    public partial class FoodSupermarketCategory : IEquatable<FoodSupermarketCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodSupermarketCategory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FoodSupermarketCategory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodSupermarketCategory" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        public FoodSupermarketCategory(string name = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FoodSupermarketCategory and cannot be null");
            }
            this.Name = name;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FoodSupermarketCategory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FoodSupermarketCategory);
        }
        /// <summary>
        /// Returns true if FoodSupermarketCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of FoodSupermarketCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoodSupermarketCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Group
    /// </summary>
    [DataContract(Name = "Group")]
    public partial class Group : IEquatable<Group>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Group" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Group() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Group" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        public Group(string name = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Group and cannot be null");
            }
            this.Name = name;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Group {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Group);
        }
        /// <summary>
        /// Returns true if Group instances are equal
        /// </summary>
        /// <param name="input">Instance of Group to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Group input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 150.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ImportLog
    /// </summary>
    [DataContract(Name = "ImportLog")]
    public partial class ImportLog : IEquatable<ImportLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportLog" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="msg">msg.</param>
        /// <param name="running">running.</param>
        /// <param name="keyword">keyword.</param>
        /// <param name="totalRecipes">totalRecipes.</param>
        /// <param name="importedRecipes">importedRecipes.</param>
        public ImportLog(string type = default(string), string msg = default(string), bool running = default(bool), ImportLogKeyword keyword = default(ImportLogKeyword), int totalRecipes = default(int), int importedRecipes = default(int))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ImportLog and cannot be null");
            }
            this.Type = type;
            this.Msg = msg;
            this.Running = running;
            this.Keyword = keyword;
            this.TotalRecipes = totalRecipes;
            this.ImportedRecipes = importedRecipes;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [DataMember(Name = "msg", EmitDefaultValue = true)]
        public string Msg { get; set; }
        /// <summary>
        /// Gets or Sets Running
        /// </summary>
        [DataMember(Name = "running", EmitDefaultValue = true)]
        public bool Running { get; set; }
        /// <summary>
        /// Gets or Sets Keyword
        /// </summary>
        [DataMember(Name = "keyword", EmitDefaultValue = true)]
        public ImportLogKeyword Keyword { get; set; }
        /// <summary>
        /// Gets or Sets TotalRecipes
        /// </summary>
        [DataMember(Name = "total_recipes", EmitDefaultValue = true)]
        public int TotalRecipes { get; set; }
        /// <summary>
        /// Gets or Sets ImportedRecipes
        /// </summary>
        [DataMember(Name = "imported_recipes", EmitDefaultValue = true)]
        public int ImportedRecipes { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  TotalRecipes: ").Append(TotalRecipes).Append("\n");
            sb.Append("  ImportedRecipes: ").Append(ImportedRecipes).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportLog);
        }
        /// <summary>
        /// Returns true if ImportLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                ) && 
                (
                    this.Running == input.Running ||
                    this.Running.Equals(input.Running)
                ) && 
                (
                    this.Keyword == input.Keyword ||
                    (this.Keyword != null &&
                    this.Keyword.Equals(input.Keyword))
                ) && 
                (
                    this.TotalRecipes == input.TotalRecipes ||
                    this.TotalRecipes.Equals(input.TotalRecipes)
                ) && 
                (
                    this.ImportedRecipes == input.ImportedRecipes ||
                    this.ImportedRecipes.Equals(input.ImportedRecipes)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Msg != null)
                {
                    hashCode = (hashCode * 59) + this.Msg.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Running.GetHashCode();
                if (this.Keyword != null)
                {
                    hashCode = (hashCode * 59) + this.Keyword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalRecipes.GetHashCode();
                hashCode = (hashCode * 59) + this.ImportedRecipes.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Type (string) maxLength
            if (this.Type != null && this.Type.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 32.", new [] { "Type" });
            }
            // TotalRecipes (int) maximum
            if (this.TotalRecipes > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalRecipes, must be a value less than or equal to 2147483647.", new [] { "TotalRecipes" });
            }
            // TotalRecipes (int) minimum
            if (this.TotalRecipes < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalRecipes, must be a value greater than or equal to -2147483648.", new [] { "TotalRecipes" });
            }
            // ImportedRecipes (int) maximum
            if (this.ImportedRecipes > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImportedRecipes, must be a value less than or equal to 2147483647.", new [] { "ImportedRecipes" });
            }
            // ImportedRecipes (int) minimum
            if (this.ImportedRecipes < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImportedRecipes, must be a value greater than or equal to -2147483648.", new [] { "ImportedRecipes" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ImportLogKeyword
    /// </summary>
    [DataContract(Name = "ImportLog_keyword")]
    public partial class ImportLogKeyword : IEquatable<ImportLogKeyword>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportLogKeyword" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportLogKeyword() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportLogKeyword" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="icon">icon.</param>
        /// <param name="description">description.</param>
        public ImportLogKeyword(string name = default(string), string icon = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ImportLogKeyword and cannot be null");
            }
            this.Name = name;
            this.Icon = icon;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public string Icon { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = true)]
        public string Label { get; private set; }
        /// <summary>
        /// Returns false as Label should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLabel()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = true)]
        public string Parent { get; private set; }
        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Numchild
        /// </summary>
        [DataMember(Name = "numchild", EmitDefaultValue = true)]
        public int Numchild { get; private set; }
        /// <summary>
        /// Returns false as Numchild should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumchild()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; private set; }
        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = true)]
        public string FullName { get; private set; }
        /// <summary>
        /// Returns false as FullName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullName()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportLogKeyword {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Numchild: ").Append(Numchild).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportLogKeyword);
        }
        /// <summary>
        /// Returns true if ImportLogKeyword instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportLogKeyword to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportLogKeyword input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Numchild == input.Numchild ||
                    this.Numchild.Equals(input.Numchild)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Numchild.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }
            // Icon (string) maxLength
            if (this.Icon != null && this.Icon.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Icon, length must be less than 16.", new [] { "Icon" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Ingredient
    /// </summary>
    [DataContract(Name = "Ingredient")]
    public partial class Ingredient : IEquatable<Ingredient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ingredient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ingredient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ingredient" /> class.
        /// </summary>
        /// <param name="food">food (required).</param>
        /// <param name="unit">unit (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="note">note.</param>
        /// <param name="order">order.</param>
        /// <param name="isHeader">isHeader.</param>
        /// <param name="noAmount">noAmount.</param>
        /// <param name="originalText">originalText.</param>
        public Ingredient(IngredientFood food = default(IngredientFood), FoodSupermarketCategory unit = default(FoodSupermarketCategory), string amount = default(string), string note = default(string), int order = default(int), bool isHeader = default(bool), bool noAmount = default(bool), string originalText = default(string))
        {
            // to ensure "food" is required (not null)
            if (food == null)
            {
                throw new ArgumentNullException("food is a required property for Ingredient and cannot be null");
            }
            this.Food = food;
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new ArgumentNullException("unit is a required property for Ingredient and cannot be null");
            }
            this.Unit = unit;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for Ingredient and cannot be null");
            }
            this.Amount = amount;
            this.Note = note;
            this.Order = order;
            this.IsHeader = isHeader;
            this.NoAmount = noAmount;
            this.OriginalText = originalText;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Food
        /// </summary>
        [DataMember(Name = "food", IsRequired = true, EmitDefaultValue = true)]
        public IngredientFood Food { get; set; }
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", IsRequired = true, EmitDefaultValue = true)]
        public FoodSupermarketCategory Unit { get; set; }
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }
        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Gets or Sets IsHeader
        /// </summary>
        [DataMember(Name = "is_header", EmitDefaultValue = true)]
        public bool IsHeader { get; set; }
        /// <summary>
        /// Gets or Sets NoAmount
        /// </summary>
        [DataMember(Name = "no_amount", EmitDefaultValue = true)]
        public bool NoAmount { get; set; }
        /// <summary>
        /// Gets or Sets OriginalText
        /// </summary>
        [DataMember(Name = "original_text", EmitDefaultValue = true)]
        public string OriginalText { get; set; }
        /// <summary>
        /// Gets or Sets UsedInRecipes
        /// </summary>
        [DataMember(Name = "used_in_recipes", EmitDefaultValue = true)]
        public string UsedInRecipes { get; private set; }
        /// <summary>
        /// Returns false as UsedInRecipes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsedInRecipes()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ingredient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Food: ").Append(Food).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  IsHeader: ").Append(IsHeader).Append("\n");
            sb.Append("  NoAmount: ").Append(NoAmount).Append("\n");
            sb.Append("  OriginalText: ").Append(OriginalText).Append("\n");
            sb.Append("  UsedInRecipes: ").Append(UsedInRecipes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ingredient);
        }
        /// <summary>
        /// Returns true if Ingredient instances are equal
        /// </summary>
        /// <param name="input">Instance of Ingredient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ingredient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Food == input.Food ||
                    (this.Food != null &&
                    this.Food.Equals(input.Food))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.IsHeader == input.IsHeader ||
                    this.IsHeader.Equals(input.IsHeader)
                ) && 
                (
                    this.NoAmount == input.NoAmount ||
                    this.NoAmount.Equals(input.NoAmount)
                ) && 
                (
                    this.OriginalText == input.OriginalText ||
                    (this.OriginalText != null &&
                    this.OriginalText.Equals(input.OriginalText))
                ) && 
                (
                    this.UsedInRecipes == input.UsedInRecipes ||
                    (this.UsedInRecipes != null &&
                    this.UsedInRecipes.Equals(input.UsedInRecipes))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Food != null)
                {
                    hashCode = (hashCode * 59) + this.Food.GetHashCode();
                }
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                hashCode = (hashCode * 59) + this.IsHeader.GetHashCode();
                hashCode = (hashCode * 59) + this.NoAmount.GetHashCode();
                if (this.OriginalText != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalText.GetHashCode();
                }
                if (this.UsedInRecipes != null)
                {
                    hashCode = (hashCode * 59) + this.UsedInRecipes.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Note (string) maxLength
            if (this.Note != null && this.Note.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Note, length must be less than 256.", new [] { "Note" });
            }
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            // OriginalText (string) maxLength
            if (this.OriginalText != null && this.OriginalText.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OriginalText, length must be less than 512.", new [] { "OriginalText" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// IngredientFood
    /// </summary>
    [DataContract(Name = "Ingredient_food")]
    public partial class IngredientFood : IEquatable<IngredientFood>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IngredientFood" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IngredientFood() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IngredientFood" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="recipe">recipe.</param>
        /// <param name="foodOnhand">foodOnhand.</param>
        /// <param name="supermarketCategory">supermarketCategory.</param>
        /// <param name="inheritFields">inheritFields.</param>
        /// <param name="ignoreShopping">ignoreShopping.</param>
        /// <param name="substitute">substitute.</param>
        /// <param name="substituteSiblings">substituteSiblings.</param>
        /// <param name="substituteChildren">substituteChildren.</param>
        /// <param name="childInheritFields">childInheritFields.</param>
        public IngredientFood(string name = default(string), string description = default(string), FoodRecipe recipe = default(FoodRecipe), string foodOnhand = default(string), FoodSupermarketCategory supermarketCategory = default(FoodSupermarketCategory), List<FoodInheritFieldsInner> inheritFields = default(List<FoodInheritFieldsInner>), bool ignoreShopping = default(bool), List<FoodSubstituteInner> substitute = default(List<FoodSubstituteInner>), bool substituteSiblings = default(bool), bool substituteChildren = default(bool), List<FoodInheritFieldsInner> childInheritFields = default(List<FoodInheritFieldsInner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for IngredientFood and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            this.Recipe = recipe;
            this.FoodOnhand = foodOnhand;
            this.SupermarketCategory = supermarketCategory;
            this.InheritFields = inheritFields;
            this.IgnoreShopping = ignoreShopping;
            this.Substitute = substitute;
            this.SubstituteSiblings = substituteSiblings;
            this.SubstituteChildren = substituteChildren;
            this.ChildInheritFields = childInheritFields;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Shopping
        /// </summary>
        [DataMember(Name = "shopping", EmitDefaultValue = true)]
        public string Shopping { get; private set; }
        /// <summary>
        /// Returns false as Shopping should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShopping()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", EmitDefaultValue = true)]
        public FoodRecipe Recipe { get; set; }
        /// <summary>
        /// Gets or Sets FoodOnhand
        /// </summary>
        [DataMember(Name = "food_onhand", EmitDefaultValue = true)]
        public string FoodOnhand { get; set; }
        /// <summary>
        /// Gets or Sets SupermarketCategory
        /// </summary>
        [DataMember(Name = "supermarket_category", EmitDefaultValue = true)]
        public FoodSupermarketCategory SupermarketCategory { get; set; }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = true)]
        public string Parent { get; private set; }
        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Numchild
        /// </summary>
        [DataMember(Name = "numchild", EmitDefaultValue = true)]
        public int Numchild { get; private set; }
        /// <summary>
        /// Returns false as Numchild should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumchild()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets InheritFields
        /// </summary>
        [DataMember(Name = "inherit_fields", EmitDefaultValue = true)]
        public List<FoodInheritFieldsInner> InheritFields { get; set; }
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = true)]
        public string FullName { get; private set; }
        /// <summary>
        /// Returns false as FullName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IgnoreShopping
        /// </summary>
        [DataMember(Name = "ignore_shopping", EmitDefaultValue = true)]
        public bool IgnoreShopping { get; set; }
        /// <summary>
        /// Gets or Sets Substitute
        /// </summary>
        [DataMember(Name = "substitute", EmitDefaultValue = true)]
        public List<FoodSubstituteInner> Substitute { get; set; }
        /// <summary>
        /// Gets or Sets SubstituteSiblings
        /// </summary>
        [DataMember(Name = "substitute_siblings", EmitDefaultValue = true)]
        public bool SubstituteSiblings { get; set; }
        /// <summary>
        /// Gets or Sets SubstituteChildren
        /// </summary>
        [DataMember(Name = "substitute_children", EmitDefaultValue = true)]
        public bool SubstituteChildren { get; set; }
        /// <summary>
        /// Gets or Sets SubstituteOnhand
        /// </summary>
        [DataMember(Name = "substitute_onhand", EmitDefaultValue = true)]
        public string SubstituteOnhand { get; private set; }
        /// <summary>
        /// Returns false as SubstituteOnhand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubstituteOnhand()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ChildInheritFields
        /// </summary>
        [DataMember(Name = "child_inherit_fields", EmitDefaultValue = true)]
        public List<FoodInheritFieldsInner> ChildInheritFields { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IngredientFood {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Shopping: ").Append(Shopping).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  FoodOnhand: ").Append(FoodOnhand).Append("\n");
            sb.Append("  SupermarketCategory: ").Append(SupermarketCategory).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Numchild: ").Append(Numchild).Append("\n");
            sb.Append("  InheritFields: ").Append(InheritFields).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  IgnoreShopping: ").Append(IgnoreShopping).Append("\n");
            sb.Append("  Substitute: ").Append(Substitute).Append("\n");
            sb.Append("  SubstituteSiblings: ").Append(SubstituteSiblings).Append("\n");
            sb.Append("  SubstituteChildren: ").Append(SubstituteChildren).Append("\n");
            sb.Append("  SubstituteOnhand: ").Append(SubstituteOnhand).Append("\n");
            sb.Append("  ChildInheritFields: ").Append(ChildInheritFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IngredientFood);
        }
        /// <summary>
        /// Returns true if IngredientFood instances are equal
        /// </summary>
        /// <param name="input">Instance of IngredientFood to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IngredientFood input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Shopping == input.Shopping ||
                    (this.Shopping != null &&
                    this.Shopping.Equals(input.Shopping))
                ) && 
                (
                    this.Recipe == input.Recipe ||
                    (this.Recipe != null &&
                    this.Recipe.Equals(input.Recipe))
                ) && 
                (
                    this.FoodOnhand == input.FoodOnhand ||
                    (this.FoodOnhand != null &&
                    this.FoodOnhand.Equals(input.FoodOnhand))
                ) && 
                (
                    this.SupermarketCategory == input.SupermarketCategory ||
                    (this.SupermarketCategory != null &&
                    this.SupermarketCategory.Equals(input.SupermarketCategory))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Numchild == input.Numchild ||
                    this.Numchild.Equals(input.Numchild)
                ) && 
                (
                    this.InheritFields == input.InheritFields ||
                    this.InheritFields != null &&
                    input.InheritFields != null &&
                    this.InheritFields.SequenceEqual(input.InheritFields)
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.IgnoreShopping == input.IgnoreShopping ||
                    this.IgnoreShopping.Equals(input.IgnoreShopping)
                ) && 
                (
                    this.Substitute == input.Substitute ||
                    this.Substitute != null &&
                    input.Substitute != null &&
                    this.Substitute.SequenceEqual(input.Substitute)
                ) && 
                (
                    this.SubstituteSiblings == input.SubstituteSiblings ||
                    this.SubstituteSiblings.Equals(input.SubstituteSiblings)
                ) && 
                (
                    this.SubstituteChildren == input.SubstituteChildren ||
                    this.SubstituteChildren.Equals(input.SubstituteChildren)
                ) && 
                (
                    this.SubstituteOnhand == input.SubstituteOnhand ||
                    (this.SubstituteOnhand != null &&
                    this.SubstituteOnhand.Equals(input.SubstituteOnhand))
                ) && 
                (
                    this.ChildInheritFields == input.ChildInheritFields ||
                    this.ChildInheritFields != null &&
                    input.ChildInheritFields != null &&
                    this.ChildInheritFields.SequenceEqual(input.ChildInheritFields)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Shopping != null)
                {
                    hashCode = (hashCode * 59) + this.Shopping.GetHashCode();
                }
                if (this.Recipe != null)
                {
                    hashCode = (hashCode * 59) + this.Recipe.GetHashCode();
                }
                if (this.FoodOnhand != null)
                {
                    hashCode = (hashCode * 59) + this.FoodOnhand.GetHashCode();
                }
                if (this.SupermarketCategory != null)
                {
                    hashCode = (hashCode * 59) + this.SupermarketCategory.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Numchild.GetHashCode();
                if (this.InheritFields != null)
                {
                    hashCode = (hashCode * 59) + this.InheritFields.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IgnoreShopping.GetHashCode();
                if (this.Substitute != null)
                {
                    hashCode = (hashCode * 59) + this.Substitute.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubstituteSiblings.GetHashCode();
                hashCode = (hashCode * 59) + this.SubstituteChildren.GetHashCode();
                if (this.SubstituteOnhand != null)
                {
                    hashCode = (hashCode * 59) + this.SubstituteOnhand.GetHashCode();
                }
                if (this.ChildInheritFields != null)
                {
                    hashCode = (hashCode * 59) + this.ChildInheritFields.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// InviteLink
    /// </summary>
    [DataContract(Name = "InviteLink")]
    public partial class InviteLink : IEquatable<InviteLink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteLink" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InviteLink() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteLink" /> class.
        /// </summary>
        /// <param name="email">email.</param>
        /// <param name="group">group (required).</param>
        /// <param name="validUntil">validUntil.</param>
        /// <param name="usedBy">usedBy.</param>
        /// <param name="reusable">reusable.</param>
        public InviteLink(string email = default(string), InviteLinkGroup group = default(InviteLinkGroup), DateTime validUntil = default(DateTime), int? usedBy = default(int?), bool reusable = default(bool))
        {
            // to ensure "group" is required (not null)
            if (group == null)
            {
                throw new ArgumentNullException("group is a required property for InviteLink and cannot be null");
            }
            this.Group = group;
            this.Email = email;
            this.ValidUntil = validUntil;
            this.UsedBy = usedBy;
            this.Reusable = reusable;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = true)]
        public Guid Uuid { get; private set; }
        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", IsRequired = true, EmitDefaultValue = true)]
        public InviteLinkGroup Group { get; set; }
        /// <summary>
        /// Gets or Sets ValidUntil
        /// </summary>
        [DataMember(Name = "valid_until", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ValidUntil { get; set; }
        /// <summary>
        /// Gets or Sets UsedBy
        /// </summary>
        [DataMember(Name = "used_by", EmitDefaultValue = true)]
        public int? UsedBy { get; set; }
        /// <summary>
        /// Gets or Sets Reusable
        /// </summary>
        [DataMember(Name = "reusable", EmitDefaultValue = true)]
        public bool Reusable { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InviteLink {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  UsedBy: ").Append(UsedBy).Append("\n");
            sb.Append("  Reusable: ").Append(Reusable).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InviteLink);
        }
        /// <summary>
        /// Returns true if InviteLink instances are equal
        /// </summary>
        /// <param name="input">Instance of InviteLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteLink input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.ValidUntil == input.ValidUntil ||
                    (this.ValidUntil != null &&
                    this.ValidUntil.Equals(input.ValidUntil))
                ) && 
                (
                    this.UsedBy == input.UsedBy ||
                    (this.UsedBy != null &&
                    this.UsedBy.Equals(input.UsedBy))
                ) && 
                (
                    this.Reusable == input.Reusable ||
                    this.Reusable.Equals(input.Reusable)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Group != null)
                {
                    hashCode = (hashCode * 59) + this.Group.GetHashCode();
                }
                if (this.ValidUntil != null)
                {
                    hashCode = (hashCode * 59) + this.ValidUntil.GetHashCode();
                }
                if (this.UsedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UsedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reusable.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 254)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 254.", new [] { "Email" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// InviteLinkGroup
    /// </summary>
    [DataContract(Name = "InviteLink_group")]
    public partial class InviteLinkGroup : IEquatable<InviteLinkGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteLinkGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InviteLinkGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteLinkGroup" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        public InviteLinkGroup(string name = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for InviteLinkGroup and cannot be null");
            }
            this.Name = name;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InviteLinkGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InviteLinkGroup);
        }
        /// <summary>
        /// Returns true if InviteLinkGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of InviteLinkGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteLinkGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 150.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Keyword
    /// </summary>
    [DataContract(Name = "Keyword")]
    public partial class Keyword : IEquatable<Keyword>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Keyword" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Keyword() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Keyword" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="icon">icon.</param>
        /// <param name="description">description.</param>
        public Keyword(string name = default(string), string icon = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Keyword and cannot be null");
            }
            this.Name = name;
            this.Icon = icon;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public string Icon { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = true)]
        public string Label { get; private set; }
        /// <summary>
        /// Returns false as Label should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLabel()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = true)]
        public string Parent { get; private set; }
        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Numchild
        /// </summary>
        [DataMember(Name = "numchild", EmitDefaultValue = true)]
        public int Numchild { get; private set; }
        /// <summary>
        /// Returns false as Numchild should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumchild()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; private set; }
        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = true)]
        public string FullName { get; private set; }
        /// <summary>
        /// Returns false as FullName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullName()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Keyword {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Numchild: ").Append(Numchild).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Keyword);
        }
        /// <summary>
        /// Returns true if Keyword instances are equal
        /// </summary>
        /// <param name="input">Instance of Keyword to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Keyword input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Numchild == input.Numchild ||
                    this.Numchild.Equals(input.Numchild)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Numchild.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }
            // Icon (string) maxLength
            if (this.Icon != null && this.Icon.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Icon, length must be less than 16.", new [] { "Icon" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListCookLogs200Response
    /// </summary>
    [DataContract(Name = "listCookLogs_200_response")]
    public partial class ListCookLogs200Response : IEquatable<ListCookLogs200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListCookLogs200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListCookLogs200Response(int count = default(int), string next = default(string), string previous = default(string), List<CookLog> results = default(List<CookLog>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<CookLog> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListCookLogs200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListCookLogs200Response);
        }
        /// <summary>
        /// Returns true if ListCookLogs200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListCookLogs200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListCookLogs200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListExportLogs200Response
    /// </summary>
    [DataContract(Name = "listExportLogs_200_response")]
    public partial class ListExportLogs200Response : IEquatable<ListExportLogs200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListExportLogs200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListExportLogs200Response(int count = default(int), string next = default(string), string previous = default(string), List<ExportLog> results = default(List<ExportLog>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<ExportLog> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListExportLogs200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListExportLogs200Response);
        }
        /// <summary>
        /// Returns true if ListExportLogs200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListExportLogs200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListExportLogs200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListFoods200Response
    /// </summary>
    [DataContract(Name = "listFoods_200_response")]
    public partial class ListFoods200Response : IEquatable<ListFoods200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListFoods200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListFoods200Response(int count = default(int), string next = default(string), string previous = default(string), List<Food> results = default(List<Food>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<Food> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListFoods200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListFoods200Response);
        }
        /// <summary>
        /// Returns true if ListFoods200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListFoods200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListFoods200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListImportLogs200Response
    /// </summary>
    [DataContract(Name = "listImportLogs_200_response")]
    public partial class ListImportLogs200Response : IEquatable<ListImportLogs200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListImportLogs200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListImportLogs200Response(int count = default(int), string next = default(string), string previous = default(string), List<ImportLog> results = default(List<ImportLog>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<ImportLog> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListImportLogs200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListImportLogs200Response);
        }
        /// <summary>
        /// Returns true if ListImportLogs200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListImportLogs200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListImportLogs200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListIngredients200Response
    /// </summary>
    [DataContract(Name = "listIngredients_200_response")]
    public partial class ListIngredients200Response : IEquatable<ListIngredients200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListIngredients200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListIngredients200Response(int count = default(int), string next = default(string), string previous = default(string), List<Ingredient> results = default(List<Ingredient>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<Ingredient> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListIngredients200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListIngredients200Response);
        }
        /// <summary>
        /// Returns true if ListIngredients200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListIngredients200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListIngredients200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListKeywords200Response
    /// </summary>
    [DataContract(Name = "listKeywords_200_response")]
    public partial class ListKeywords200Response : IEquatable<ListKeywords200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListKeywords200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListKeywords200Response(int count = default(int), string next = default(string), string previous = default(string), List<Keyword> results = default(List<Keyword>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<Keyword> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListKeywords200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListKeywords200Response);
        }
        /// <summary>
        /// Returns true if ListKeywords200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListKeywords200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListKeywords200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListRecipes200Response
    /// </summary>
    [DataContract(Name = "listRecipes_200_response")]
    public partial class ListRecipes200Response : IEquatable<ListRecipes200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListRecipes200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListRecipes200Response(int count = default(int), string next = default(string), string previous = default(string), List<RecipeOverview> results = default(List<RecipeOverview>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<RecipeOverview> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListRecipes200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListRecipes200Response);
        }
        /// <summary>
        /// Returns true if ListRecipes200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListRecipes200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListRecipes200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListSteps200Response
    /// </summary>
    [DataContract(Name = "listSteps_200_response")]
    public partial class ListSteps200Response : IEquatable<ListSteps200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListSteps200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListSteps200Response(int count = default(int), string next = default(string), string previous = default(string), List<Step> results = default(List<Step>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<Step> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListSteps200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListSteps200Response);
        }
        /// <summary>
        /// Returns true if ListSteps200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListSteps200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListSteps200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListSupermarketCategoryRelations200Response
    /// </summary>
    [DataContract(Name = "listSupermarketCategoryRelations_200_response")]
    public partial class ListSupermarketCategoryRelations200Response : IEquatable<ListSupermarketCategoryRelations200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListSupermarketCategoryRelations200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListSupermarketCategoryRelations200Response(int count = default(int), string next = default(string), string previous = default(string), List<SupermarketCategoryRelation> results = default(List<SupermarketCategoryRelation>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<SupermarketCategoryRelation> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListSupermarketCategoryRelations200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListSupermarketCategoryRelations200Response);
        }
        /// <summary>
        /// Returns true if ListSupermarketCategoryRelations200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListSupermarketCategoryRelations200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListSupermarketCategoryRelations200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListSyncLogs200Response
    /// </summary>
    [DataContract(Name = "listSyncLogs_200_response")]
    public partial class ListSyncLogs200Response : IEquatable<ListSyncLogs200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListSyncLogs200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListSyncLogs200Response(int count = default(int), string next = default(string), string previous = default(string), List<SyncLog> results = default(List<SyncLog>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<SyncLog> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListSyncLogs200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListSyncLogs200Response);
        }
        /// <summary>
        /// Returns true if ListSyncLogs200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListSyncLogs200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListSyncLogs200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListUnits200Response
    /// </summary>
    [DataContract(Name = "listUnits_200_response")]
    public partial class ListUnits200Response : IEquatable<ListUnits200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnits200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListUnits200Response(int count = default(int), string next = default(string), string previous = default(string), List<Unit> results = default(List<Unit>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<Unit> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListUnits200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListUnits200Response);
        }
        /// <summary>
        /// Returns true if ListUnits200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListUnits200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListUnits200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ListViewLogs200Response
    /// </summary>
    [DataContract(Name = "listViewLogs_200_response")]
    public partial class ListViewLogs200Response : IEquatable<ListViewLogs200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListViewLogs200Response" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="next">next.</param>
        /// <param name="previous">previous.</param>
        /// <param name="results">results.</param>
        public ListViewLogs200Response(int count = default(int), string next = default(string), string previous = default(string), List<ViewLog> results = default(List<ViewLog>))
        {
            this.Count = count;
            this.Next = next;
            this.Previous = previous;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int Count { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<ViewLog> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListViewLogs200Response {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListViewLogs200Response);
        }
        /// <summary>
        /// Returns true if ListViewLogs200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListViewLogs200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListViewLogs200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// MealPlan
    /// </summary>
    [DataContract(Name = "MealPlan")]
    public partial class MealPlan : IEquatable<MealPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MealPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlan" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="recipe">recipe.</param>
        /// <param name="servings">servings (required).</param>
        /// <param name="note">note.</param>
        /// <param name="date">date (required).</param>
        /// <param name="mealType">mealType (required).</param>
        /// <param name="shared">shared.</param>
        public MealPlan(string title = default(string), MealPlanRecipe recipe = default(MealPlanRecipe), string servings = default(string), string note = default(string), DateTime date = default(DateTime), MealPlanMealType mealType = default(MealPlanMealType), List<CustomFilterSharedInner> shared = default(List<CustomFilterSharedInner>))
        {
            // to ensure "servings" is required (not null)
            if (servings == null)
            {
                throw new ArgumentNullException("servings is a required property for MealPlan and cannot be null");
            }
            this.Servings = servings;
            this.Date = date;
            // to ensure "mealType" is required (not null)
            if (mealType == null)
            {
                throw new ArgumentNullException("mealType is a required property for MealPlan and cannot be null");
            }
            this.MealType = mealType;
            this.Title = title;
            this.Recipe = recipe;
            this.Note = note;
            this.Shared = shared;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", EmitDefaultValue = true)]
        public MealPlanRecipe Recipe { get; set; }
        /// <summary>
        /// Gets or Sets Servings
        /// </summary>
        [DataMember(Name = "servings", IsRequired = true, EmitDefaultValue = true)]
        public string Servings { get; set; }
        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }
        /// <summary>
        /// Gets or Sets NoteMarkdown
        /// </summary>
        [DataMember(Name = "note_markdown", EmitDefaultValue = true)]
        public string NoteMarkdown { get; private set; }
        /// <summary>
        /// Returns false as NoteMarkdown should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNoteMarkdown()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }
        /// <summary>
        /// Gets or Sets MealType
        /// </summary>
        [DataMember(Name = "meal_type", IsRequired = true, EmitDefaultValue = true)]
        public MealPlanMealType MealType { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public List<CustomFilterSharedInner> Shared { get; set; }
        /// <summary>
        /// Gets or Sets RecipeName
        /// </summary>
        [DataMember(Name = "recipe_name", EmitDefaultValue = true)]
        public string RecipeName { get; private set; }
        /// <summary>
        /// Returns false as RecipeName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MealTypeName
        /// </summary>
        [DataMember(Name = "meal_type_name", EmitDefaultValue = true)]
        public string MealTypeName { get; private set; }
        /// <summary>
        /// Returns false as MealTypeName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMealTypeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Shopping
        /// </summary>
        [DataMember(Name = "shopping", EmitDefaultValue = true)]
        public string Shopping { get; private set; }
        /// <summary>
        /// Returns false as Shopping should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShopping()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MealPlan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  NoteMarkdown: ").Append(NoteMarkdown).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  MealType: ").Append(MealType).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  RecipeName: ").Append(RecipeName).Append("\n");
            sb.Append("  MealTypeName: ").Append(MealTypeName).Append("\n");
            sb.Append("  Shopping: ").Append(Shopping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MealPlan);
        }
        /// <summary>
        /// Returns true if MealPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of MealPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MealPlan input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Recipe == input.Recipe ||
                    (this.Recipe != null &&
                    this.Recipe.Equals(input.Recipe))
                ) && 
                (
                    this.Servings == input.Servings ||
                    (this.Servings != null &&
                    this.Servings.Equals(input.Servings))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.NoteMarkdown == input.NoteMarkdown ||
                    (this.NoteMarkdown != null &&
                    this.NoteMarkdown.Equals(input.NoteMarkdown))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.MealType == input.MealType ||
                    (this.MealType != null &&
                    this.MealType.Equals(input.MealType))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Shared == input.Shared ||
                    this.Shared != null &&
                    input.Shared != null &&
                    this.Shared.SequenceEqual(input.Shared)
                ) && 
                (
                    this.RecipeName == input.RecipeName ||
                    (this.RecipeName != null &&
                    this.RecipeName.Equals(input.RecipeName))
                ) && 
                (
                    this.MealTypeName == input.MealTypeName ||
                    (this.MealTypeName != null &&
                    this.MealTypeName.Equals(input.MealTypeName))
                ) && 
                (
                    this.Shopping == input.Shopping ||
                    (this.Shopping != null &&
                    this.Shopping.Equals(input.Shopping))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Recipe != null)
                {
                    hashCode = (hashCode * 59) + this.Recipe.GetHashCode();
                }
                if (this.Servings != null)
                {
                    hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.NoteMarkdown != null)
                {
                    hashCode = (hashCode * 59) + this.NoteMarkdown.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.MealType != null)
                {
                    hashCode = (hashCode * 59) + this.MealType.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.Shared != null)
                {
                    hashCode = (hashCode * 59) + this.Shared.GetHashCode();
                }
                if (this.RecipeName != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeName.GetHashCode();
                }
                if (this.MealTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.MealTypeName.GetHashCode();
                }
                if (this.Shopping != null)
                {
                    hashCode = (hashCode * 59) + this.Shopping.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 64.", new [] { "Title" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// MealPlanMealType
    /// </summary>
    [DataContract(Name = "MealPlan_meal_type")]
    public partial class MealPlanMealType : IEquatable<MealPlanMealType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlanMealType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MealPlanMealType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlanMealType" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="order">order.</param>
        /// <param name="icon">icon.</param>
        /// <param name="color">color.</param>
        /// <param name="_default">_default.</param>
        public MealPlanMealType(string name = default(string), int order = default(int), string icon = default(string), string color = default(string), bool _default = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MealPlanMealType and cannot be null");
            }
            this.Name = name;
            this.Order = order;
            this.Icon = icon;
            this.Color = color;
            this.Default = _default;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public string Icon { get; set; }
        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = true)]
        public string Color { get; set; }
        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public bool Default { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MealPlanMealType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MealPlanMealType);
        }
        /// <summary>
        /// Returns true if MealPlanMealType instances are equal
        /// </summary>
        /// <param name="input">Instance of MealPlanMealType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MealPlanMealType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Default == input.Default ||
                    this.Default.Equals(input.Default)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.Color != null)
                {
                    hashCode = (hashCode * 59) + this.Color.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Default.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            // Icon (string) maxLength
            if (this.Icon != null && this.Icon.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Icon, length must be less than 16.", new [] { "Icon" });
            }
            // Color (string) maxLength
            if (this.Color != null && this.Color.Length > 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Color, length must be less than 7.", new [] { "Color" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// MealPlanRecipe
    /// </summary>
    [DataContract(Name = "MealPlan_recipe")]
    public partial class MealPlanRecipe : IEquatable<MealPlanRecipe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlanRecipe" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MealPlanRecipe() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlanRecipe" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="keywords">keywords (required).</param>
        /// <param name="workingTime">workingTime.</param>
        /// <param name="waitingTime">waitingTime.</param>
        /// <param name="_internal">_internal.</param>
        /// <param name="servings">servings.</param>
        /// <param name="servingsText">servingsText.</param>
        /// <param name="rating">rating.</param>
        /// <param name="lastCooked">lastCooked.</param>
        public MealPlanRecipe(string name = default(string), string description = default(string), List<MealPlanRecipeKeywordsInner> keywords = default(List<MealPlanRecipeKeywordsInner>), int workingTime = default(int), int waitingTime = default(int), bool _internal = default(bool), int servings = default(int), string servingsText = default(string), string rating = default(string), DateTime? lastCooked = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MealPlanRecipe and cannot be null");
            }
            this.Name = name;
            // to ensure "keywords" is required (not null)
            if (keywords == null)
            {
                throw new ArgumentNullException("keywords is a required property for MealPlanRecipe and cannot be null");
            }
            this.Keywords = keywords;
            this.Description = description;
            this.WorkingTime = workingTime;
            this.WaitingTime = waitingTime;
            this.Internal = _internal;
            this.Servings = servings;
            this.ServingsText = servingsText;
            this.Rating = rating;
            this.LastCooked = lastCooked;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public System.IO.Stream Image { get; private set; }
        /// <summary>
        /// Returns false as Image should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", IsRequired = true, EmitDefaultValue = true)]
        public List<MealPlanRecipeKeywordsInner> Keywords { get; set; }
        /// <summary>
        /// Gets or Sets WorkingTime
        /// </summary>
        [DataMember(Name = "working_time", EmitDefaultValue = true)]
        public int WorkingTime { get; set; }
        /// <summary>
        /// Gets or Sets WaitingTime
        /// </summary>
        [DataMember(Name = "waiting_time", EmitDefaultValue = true)]
        public int WaitingTime { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; private set; }
        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Internal
        /// </summary>
        [DataMember(Name = "internal", EmitDefaultValue = true)]
        public bool Internal { get; set; }
        /// <summary>
        /// Gets or Sets Servings
        /// </summary>
        [DataMember(Name = "servings", EmitDefaultValue = true)]
        public int Servings { get; set; }
        /// <summary>
        /// Gets or Sets ServingsText
        /// </summary>
        [DataMember(Name = "servings_text", EmitDefaultValue = true)]
        public string ServingsText { get; set; }
        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name = "rating", EmitDefaultValue = true)]
        public string Rating { get; set; }
        /// <summary>
        /// Gets or Sets LastCooked
        /// </summary>
        [DataMember(Name = "last_cooked", EmitDefaultValue = true)]
        public DateTime? LastCooked { get; set; }
        /// <summary>
        /// Gets or Sets New
        /// </summary>
        [DataMember(Name = "new", EmitDefaultValue = true)]
        public string New { get; private set; }
        /// <summary>
        /// Returns false as New should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNew()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recent
        /// </summary>
        [DataMember(Name = "recent", EmitDefaultValue = true)]
        public string Recent { get; private set; }
        /// <summary>
        /// Returns false as Recent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecent()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MealPlanRecipe {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  WorkingTime: ").Append(WorkingTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  ServingsText: ").Append(ServingsText).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  LastCooked: ").Append(LastCooked).Append("\n");
            sb.Append("  New: ").Append(New).Append("\n");
            sb.Append("  Recent: ").Append(Recent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MealPlanRecipe);
        }
        /// <summary>
        /// Returns true if MealPlanRecipe instances are equal
        /// </summary>
        /// <param name="input">Instance of MealPlanRecipe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MealPlanRecipe input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.WorkingTime == input.WorkingTime ||
                    this.WorkingTime.Equals(input.WorkingTime)
                ) && 
                (
                    this.WaitingTime == input.WaitingTime ||
                    this.WaitingTime.Equals(input.WaitingTime)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Internal == input.Internal ||
                    this.Internal.Equals(input.Internal)
                ) && 
                (
                    this.Servings == input.Servings ||
                    this.Servings.Equals(input.Servings)
                ) && 
                (
                    this.ServingsText == input.ServingsText ||
                    (this.ServingsText != null &&
                    this.ServingsText.Equals(input.ServingsText))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.LastCooked == input.LastCooked ||
                    (this.LastCooked != null &&
                    this.LastCooked.Equals(input.LastCooked))
                ) && 
                (
                    this.New == input.New ||
                    (this.New != null &&
                    this.New.Equals(input.New))
                ) && 
                (
                    this.Recent == input.Recent ||
                    (this.Recent != null &&
                    this.Recent.Equals(input.Recent))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                if (this.Keywords != null)
                {
                    hashCode = (hashCode * 59) + this.Keywords.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WorkingTime.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitingTime.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Internal.GetHashCode();
                hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                if (this.ServingsText != null)
                {
                    hashCode = (hashCode * 59) + this.ServingsText.GetHashCode();
                }
                if (this.Rating != null)
                {
                    hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                }
                if (this.LastCooked != null)
                {
                    hashCode = (hashCode * 59) + this.LastCooked.GetHashCode();
                }
                if (this.New != null)
                {
                    hashCode = (hashCode * 59) + this.New.GetHashCode();
                }
                if (this.Recent != null)
                {
                    hashCode = (hashCode * 59) + this.Recent.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }
            // WorkingTime (int) maximum
            if (this.WorkingTime > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkingTime, must be a value less than or equal to 2147483647.", new [] { "WorkingTime" });
            }
            // WorkingTime (int) minimum
            if (this.WorkingTime < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkingTime, must be a value greater than or equal to -2147483648.", new [] { "WorkingTime" });
            }
            // WaitingTime (int) maximum
            if (this.WaitingTime > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitingTime, must be a value less than or equal to 2147483647.", new [] { "WaitingTime" });
            }
            // WaitingTime (int) minimum
            if (this.WaitingTime < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitingTime, must be a value greater than or equal to -2147483648.", new [] { "WaitingTime" });
            }
            // Servings (int) maximum
            if (this.Servings > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Servings, must be a value less than or equal to 2147483647.", new [] { "Servings" });
            }
            // Servings (int) minimum
            if (this.Servings < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Servings, must be a value greater than or equal to -2147483648.", new [] { "Servings" });
            }
            // ServingsText (string) maxLength
            if (this.ServingsText != null && this.ServingsText.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServingsText, length must be less than 32.", new [] { "ServingsText" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// MealPlanRecipeKeywordsInner
    /// </summary>
    [DataContract(Name = "MealPlan_recipe_keywords_inner")]
    public partial class MealPlanRecipeKeywordsInner : IEquatable<MealPlanRecipeKeywordsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlanRecipeKeywordsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public MealPlanRecipeKeywordsInner()
        {
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = true)]
        public string Label { get; private set; }
        /// <summary>
        /// Returns false as Label should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLabel()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MealPlanRecipeKeywordsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MealPlanRecipeKeywordsInner);
        }
        /// <summary>
        /// Returns true if MealPlanRecipeKeywordsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of MealPlanRecipeKeywordsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MealPlanRecipeKeywordsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// MealType
    /// </summary>
    [DataContract(Name = "MealType")]
    public partial class MealType : IEquatable<MealType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MealType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MealType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MealType" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="order">order.</param>
        /// <param name="icon">icon.</param>
        /// <param name="color">color.</param>
        /// <param name="_default">_default.</param>
        public MealType(string name = default(string), int order = default(int), string icon = default(string), string color = default(string), bool _default = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MealType and cannot be null");
            }
            this.Name = name;
            this.Order = order;
            this.Icon = icon;
            this.Color = color;
            this.Default = _default;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public string Icon { get; set; }
        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = true)]
        public string Color { get; set; }
        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public bool Default { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MealType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MealType);
        }
        /// <summary>
        /// Returns true if MealType instances are equal
        /// </summary>
        /// <param name="input">Instance of MealType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MealType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Default == input.Default ||
                    this.Default.Equals(input.Default)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.Color != null)
                {
                    hashCode = (hashCode * 59) + this.Color.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Default.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            // Icon (string) maxLength
            if (this.Icon != null && this.Icon.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Icon, length must be less than 16.", new [] { "Icon" });
            }
            // Color (string) maxLength
            if (this.Color != null && this.Color.Length > 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Color, length must be less than 7.", new [] { "Color" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Recipe
    /// </summary>
    [DataContract(Name = "Recipe")]
    public partial class Recipe : IEquatable<Recipe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Recipe" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Recipe() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recipe" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="keywords">keywords (required).</param>
        /// <param name="steps">steps (required).</param>
        /// <param name="workingTime">workingTime.</param>
        /// <param name="waitingTime">waitingTime.</param>
        /// <param name="sourceUrl">sourceUrl.</param>
        /// <param name="_internal">_internal.</param>
        /// <param name="showIngredientOverview">showIngredientOverview.</param>
        /// <param name="nutrition">nutrition.</param>
        /// <param name="servings">servings.</param>
        /// <param name="filePath">filePath.</param>
        /// <param name="servingsText">servingsText.</param>
        /// <param name="_private">_private.</param>
        /// <param name="shared">shared.</param>
        public Recipe(string name = default(string),
            string description = default(string), 
            List<RecipeKeywordsInner> keywords = default(List<RecipeKeywordsInner>), 
            List<RecipeStepsInner> steps = default(List<RecipeStepsInner>), 
            int workingTime = default(int), int waitingTime = default(int), 
            string sourceUrl = default(string), bool _internal = default(bool), 
            bool showIngredientOverview = default(bool), 
            RecipeNutrition nutrition = default(RecipeNutrition), 
            int servings = default(int), 
            string filePath = default(string), 
            string servingsText = default(string), 
            bool _private = default(bool), 
            List<CustomFilterSharedInner> shared = default(List<CustomFilterSharedInner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Recipe and cannot be null");
            }
            this.Name = name;
            // to ensure "keywords" is required (not null)
            if (keywords == null)
            {
                throw new ArgumentNullException("keywords is a required property for Recipe and cannot be null");
            }
            this.Keywords = keywords;
            // to ensure "steps" is required (not null)
            if (steps == null)
            {
                throw new ArgumentNullException("steps is a required property for Recipe and cannot be null");
            }
            this.Steps = steps;
            this.Description = description;
            this.WorkingTime = workingTime;
            this.WaitingTime = waitingTime;
            this.SourceUrl = sourceUrl;
            this.Internal = _internal;
            this.ShowIngredientOverview = showIngredientOverview;
            this.Nutrition = nutrition;
            this.Servings = servings;
            this.FilePath = filePath;
            this.ServingsText = servingsText;
            this.Private = _private;
            this.Shared = shared;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public System.IO.Stream Image { get; private set; }
        /// <summary>
        /// Returns false as Image should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", IsRequired = true, EmitDefaultValue = true)]
        public List<RecipeKeywordsInner> Keywords { get; set; }
        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name = "steps", IsRequired = true, EmitDefaultValue = true)]
        public List<RecipeStepsInner> Steps { get; set; }
        /// <summary>
        /// Gets or Sets WorkingTime
        /// </summary>
        [DataMember(Name = "working_time", EmitDefaultValue = true)]
        public int WorkingTime { get; set; }
        /// <summary>
        /// Gets or Sets WaitingTime
        /// </summary>
        [DataMember(Name = "waiting_time", EmitDefaultValue = true)]
        public int WaitingTime { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; private set; }
        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SourceUrl
        /// </summary>
        [DataMember(Name = "source_url", EmitDefaultValue = true)]
        public string SourceUrl { get; set; }
        /// <summary>
        /// Gets or Sets Internal
        /// </summary>
        [DataMember(Name = "internal", EmitDefaultValue = true)]
        public bool Internal { get; set; }
        /// <summary>
        /// Gets or Sets ShowIngredientOverview
        /// </summary>
        [DataMember(Name = "show_ingredient_overview", EmitDefaultValue = true)]
        public bool ShowIngredientOverview { get; set; }
        /// <summary>
        /// Gets or Sets Nutrition
        /// </summary>
        [DataMember(Name = "nutrition", EmitDefaultValue = true)]
        public RecipeNutrition Nutrition { get; set; }
        /// <summary>
        /// Gets or Sets Servings
        /// </summary>
        [DataMember(Name = "servings", EmitDefaultValue = true)]
        public int Servings { get; set; }
        /// <summary>
        /// Gets or Sets FilePath
        /// </summary>
        [DataMember(Name = "file_path", EmitDefaultValue = true)]
        public string FilePath { get; set; }
        /// <summary>
        /// Gets or Sets ServingsText
        /// </summary>
        [DataMember(Name = "servings_text", EmitDefaultValue = true)]
        public string ServingsText { get; set; }
        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name = "rating", EmitDefaultValue = true)]
        public string Rating { get; private set; }
        /// <summary>
        /// Returns false as Rating should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRating()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastCooked
        /// </summary>
        [DataMember(Name = "last_cooked", EmitDefaultValue = true)]
        public DateTime? LastCooked { get; private set; }
        /// <summary>
        /// Returns false as LastCooked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastCooked()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Private
        /// </summary>
        [DataMember(Name = "private", EmitDefaultValue = true)]
        public bool Private { get; set; }
        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public List<CustomFilterSharedInner> Shared { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Recipe {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  WorkingTime: ").Append(WorkingTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("  ShowIngredientOverview: ").Append(ShowIngredientOverview).Append("\n");
            sb.Append("  Nutrition: ").Append(Nutrition).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  ServingsText: ").Append(ServingsText).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  LastCooked: ").Append(LastCooked).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Recipe);
        }
        /// <summary>
        /// Returns true if Recipe instances are equal
        /// </summary>
        /// <param name="input">Instance of Recipe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Recipe input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps != null &&
                    input.Steps != null &&
                    this.Steps.SequenceEqual(input.Steps)
                ) && 
                (
                    this.WorkingTime == input.WorkingTime ||
                    this.WorkingTime.Equals(input.WorkingTime)
                ) && 
                (
                    this.WaitingTime == input.WaitingTime ||
                    this.WaitingTime.Equals(input.WaitingTime)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.SourceUrl == input.SourceUrl ||
                    (this.SourceUrl != null &&
                    this.SourceUrl.Equals(input.SourceUrl))
                ) && 
                (
                    this.Internal == input.Internal ||
                    this.Internal.Equals(input.Internal)
                ) && 
                (
                    this.ShowIngredientOverview == input.ShowIngredientOverview ||
                    this.ShowIngredientOverview.Equals(input.ShowIngredientOverview)
                ) && 
                (
                    this.Nutrition == input.Nutrition ||
                    (this.Nutrition != null &&
                    this.Nutrition.Equals(input.Nutrition))
                ) && 
                (
                    this.Servings == input.Servings ||
                    this.Servings.Equals(input.Servings)
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.ServingsText == input.ServingsText ||
                    (this.ServingsText != null &&
                    this.ServingsText.Equals(input.ServingsText))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.LastCooked == input.LastCooked ||
                    (this.LastCooked != null &&
                    this.LastCooked.Equals(input.LastCooked))
                ) && 
                (
                    this.Private == input.Private ||
                    this.Private.Equals(input.Private)
                ) && 
                (
                    this.Shared == input.Shared ||
                    this.Shared != null &&
                    input.Shared != null &&
                    this.Shared.SequenceEqual(input.Shared)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                if (this.Keywords != null)
                {
                    hashCode = (hashCode * 59) + this.Keywords.GetHashCode();
                }
                if (this.Steps != null)
                {
                    hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WorkingTime.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitingTime.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.SourceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SourceUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Internal.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowIngredientOverview.GetHashCode();
                if (this.Nutrition != null)
                {
                    hashCode = (hashCode * 59) + this.Nutrition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                if (this.FilePath != null)
                {
                    hashCode = (hashCode * 59) + this.FilePath.GetHashCode();
                }
                if (this.ServingsText != null)
                {
                    hashCode = (hashCode * 59) + this.ServingsText.GetHashCode();
                }
                if (this.Rating != null)
                {
                    hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                }
                if (this.LastCooked != null)
                {
                    hashCode = (hashCode * 59) + this.LastCooked.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Private.GetHashCode();
                if (this.Shared != null)
                {
                    hashCode = (hashCode * 59) + this.Shared.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }
            // WorkingTime (int) maximum
            if (this.WorkingTime > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkingTime, must be a value less than or equal to 2147483647.", new [] { "WorkingTime" });
            }
            // WorkingTime (int) minimum
            if (this.WorkingTime < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkingTime, must be a value greater than or equal to -2147483648.", new [] { "WorkingTime" });
            }
            // WaitingTime (int) maximum
            if (this.WaitingTime > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitingTime, must be a value less than or equal to 2147483647.", new [] { "WaitingTime" });
            }
            // WaitingTime (int) minimum
            if (this.WaitingTime < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitingTime, must be a value greater than or equal to -2147483648.", new [] { "WaitingTime" });
            }
            // SourceUrl (string) maxLength
            if (this.SourceUrl != null && this.SourceUrl.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceUrl, length must be less than 1024.", new [] { "SourceUrl" });
            }
            // Servings (int) maximum
            if (this.Servings > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Servings, must be a value less than or equal to 2147483647.", new [] { "Servings" });
            }
            // Servings (int) minimum
            if (this.Servings < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Servings, must be a value greater than or equal to -2147483648.", new [] { "Servings" });
            }
            // FilePath (string) maxLength
            if (this.FilePath != null && this.FilePath.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FilePath, length must be less than 512.", new [] { "FilePath" });
            }
            // ServingsText (string) maxLength
            if (this.ServingsText != null && this.ServingsText.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServingsText, length must be less than 32.", new [] { "ServingsText" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeBook
    /// </summary>
    [DataContract(Name = "RecipeBook")]
    public partial class RecipeBook : IEquatable<RecipeBook>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeBook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeBook() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeBook" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="icon">icon.</param>
        /// <param name="shared">shared (required).</param>
        /// <param name="filter">filter.</param>
        public RecipeBook(string name = default(string), string description = default(string), string icon = default(string), List<CustomFilterSharedInner> shared = default(List<CustomFilterSharedInner>), RecipeBookFilter filter = default(RecipeBookFilter))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RecipeBook and cannot be null");
            }
            this.Name = name;
            // to ensure "shared" is required (not null)
            if (shared == null)
            {
                throw new ArgumentNullException("shared is a required property for RecipeBook and cannot be null");
            }
            this.Shared = shared;
            this.Description = description;
            this.Icon = icon;
            this.Filter = filter;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public string Icon { get; set; }
        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomFilterSharedInner> Shared { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public RecipeBookFilter Filter { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeBook {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeBook);
        }
        /// <summary>
        /// Returns true if RecipeBook instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeBook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeBook input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Shared == input.Shared ||
                    this.Shared != null &&
                    input.Shared != null &&
                    this.Shared.SequenceEqual(input.Shared)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.Shared != null)
                {
                    hashCode = (hashCode * 59) + this.Shared.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Icon (string) maxLength
            if (this.Icon != null && this.Icon.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Icon, length must be less than 16.", new [] { "Icon" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeBookEntry
    /// </summary>
    [DataContract(Name = "RecipeBookEntry")]
    public partial class RecipeBookEntry : IEquatable<RecipeBookEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeBookEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeBookEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeBookEntry" /> class.
        /// </summary>
        /// <param name="book">book (required).</param>
        /// <param name="recipe">recipe (required).</param>
        public RecipeBookEntry(int book = default(int), int recipe = default(int))
        {
            this.Book = book;
            this.Recipe = recipe;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Book
        /// </summary>
        [DataMember(Name = "book", IsRequired = true, EmitDefaultValue = true)]
        public int Book { get; set; }
        /// <summary>
        /// Gets or Sets BookContent
        /// </summary>
        [DataMember(Name = "book_content", EmitDefaultValue = true)]
        public string BookContent { get; private set; }
        /// <summary>
        /// Returns false as BookContent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBookContent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", IsRequired = true, EmitDefaultValue = true)]
        public int Recipe { get; set; }
        /// <summary>
        /// Gets or Sets RecipeContent
        /// </summary>
        [DataMember(Name = "recipe_content", EmitDefaultValue = true)]
        public string RecipeContent { get; private set; }
        /// <summary>
        /// Returns false as RecipeContent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipeContent()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeBookEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Book: ").Append(Book).Append("\n");
            sb.Append("  BookContent: ").Append(BookContent).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  RecipeContent: ").Append(RecipeContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeBookEntry);
        }
        /// <summary>
        /// Returns true if RecipeBookEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeBookEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeBookEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Book == input.Book ||
                    this.Book.Equals(input.Book)
                ) && 
                (
                    this.BookContent == input.BookContent ||
                    (this.BookContent != null &&
                    this.BookContent.Equals(input.BookContent))
                ) && 
                (
                    this.Recipe == input.Recipe ||
                    this.Recipe.Equals(input.Recipe)
                ) && 
                (
                    this.RecipeContent == input.RecipeContent ||
                    (this.RecipeContent != null &&
                    this.RecipeContent.Equals(input.RecipeContent))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Book.GetHashCode();
                if (this.BookContent != null)
                {
                    hashCode = (hashCode * 59) + this.BookContent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Recipe.GetHashCode();
                if (this.RecipeContent != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeContent.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeBookFilter
    /// </summary>
    [DataContract(Name = "RecipeBook_filter")]
    public partial class RecipeBookFilter : IEquatable<RecipeBookFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeBookFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeBookFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeBookFilter" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="search">search (required).</param>
        /// <param name="shared">shared.</param>
        public RecipeBookFilter(string name = default(string), string search = default(string), List<CustomFilterSharedInner> shared = default(List<CustomFilterSharedInner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RecipeBookFilter and cannot be null");
            }
            this.Name = name;
            // to ensure "search" is required (not null)
            if (search == null)
            {
                throw new ArgumentNullException("search is a required property for RecipeBookFilter and cannot be null");
            }
            this.Search = search;
            this.Shared = shared;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name = "search", IsRequired = true, EmitDefaultValue = true)]
        public string Search { get; set; }
        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public List<CustomFilterSharedInner> Shared { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeBookFilter {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeBookFilter);
        }
        /// <summary>
        /// Returns true if RecipeBookFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeBookFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeBookFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Search == input.Search ||
                    (this.Search != null &&
                    this.Search.Equals(input.Search))
                ) && 
                (
                    this.Shared == input.Shared ||
                    this.Shared != null &&
                    input.Shared != null &&
                    this.Shared.SequenceEqual(input.Shared)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Search != null)
                {
                    hashCode = (hashCode * 59) + this.Search.GetHashCode();
                }
                if (this.Shared != null)
                {
                    hashCode = (hashCode * 59) + this.Shared.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeImage
    /// </summary>
    [DataContract(Name = "RecipeImage")]
    public partial class RecipeImage : IEquatable<RecipeImage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeImage" /> class.
        /// </summary>
        /// <param name="image">image.</param>
        /// <param name="imageUrl">imageUrl.</param>
        public RecipeImage(System.IO.Stream image = default(System.IO.Stream), string imageUrl = default(string))
        {
            this.Image = image;
            this.ImageUrl = imageUrl;
        }
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public System.IO.Stream Image { get; set; }
        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "image_url", EmitDefaultValue = true)]
        public string ImageUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeImage {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeImage);
        }
        /// <summary>
        /// Returns true if RecipeImage instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeImage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ImageUrl (string) maxLength
            if (this.ImageUrl != null && this.ImageUrl.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageUrl, length must be less than 4096.", new [] { "ImageUrl" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeKeywordsInner
    /// </summary>
    [DataContract(Name = "Recipe_keywords_inner")]
    public partial class RecipeKeywordsInner : IEquatable<RecipeKeywordsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeKeywordsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeKeywordsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeKeywordsInner" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="icon">icon.</param>
        /// <param name="description">description.</param>
        public RecipeKeywordsInner(string name = default(string), string icon = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RecipeKeywordsInner and cannot be null");
            }
            this.Name = name;
            this.Icon = icon;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public string Icon { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = true)]
        public string Label { get; private set; }
        /// <summary>
        /// Returns false as Label should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLabel()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = true)]
        public string Parent { get; private set; }
        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Numchild
        /// </summary>
        [DataMember(Name = "numchild", EmitDefaultValue = true)]
        public int Numchild { get; private set; }
        /// <summary>
        /// Returns false as Numchild should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumchild()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; private set; }
        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = true)]
        public string FullName { get; private set; }
        /// <summary>
        /// Returns false as FullName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullName()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeKeywordsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Numchild: ").Append(Numchild).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeKeywordsInner);
        }
        /// <summary>
        /// Returns true if RecipeKeywordsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeKeywordsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeKeywordsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Numchild == input.Numchild ||
                    this.Numchild.Equals(input.Numchild)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Numchild.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }
            // Icon (string) maxLength
            if (this.Icon != null && this.Icon.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Icon, length must be less than 16.", new [] { "Icon" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeNutrition
    /// </summary>
    [DataContract(Name = "Recipe_nutrition")]
    public partial class RecipeNutrition : IEquatable<RecipeNutrition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeNutrition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeNutrition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeNutrition" /> class.
        /// </summary>
        /// <param name="carbohydrates">carbohydrates (required).</param>
        /// <param name="fats">fats (required).</param>
        /// <param name="proteins">proteins (required).</param>
        /// <param name="calories">calories (required).</param>
        /// <param name="source">source.</param>
        public RecipeNutrition(string carbohydrates = default(string), string fats = default(string), string proteins = default(string), string calories = default(string), string source = default(string))
        {
            // to ensure "carbohydrates" is required (not null)
            if (carbohydrates == null)
            {
                throw new ArgumentNullException("carbohydrates is a required property for RecipeNutrition and cannot be null");
            }
            this.Carbohydrates = carbohydrates;
            // to ensure "fats" is required (not null)
            if (fats == null)
            {
                throw new ArgumentNullException("fats is a required property for RecipeNutrition and cannot be null");
            }
            this.Fats = fats;
            // to ensure "proteins" is required (not null)
            if (proteins == null)
            {
                throw new ArgumentNullException("proteins is a required property for RecipeNutrition and cannot be null");
            }
            this.Proteins = proteins;
            // to ensure "calories" is required (not null)
            if (calories == null)
            {
                throw new ArgumentNullException("calories is a required property for RecipeNutrition and cannot be null");
            }
            this.Calories = calories;
            this.Source = source;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Carbohydrates
        /// </summary>
        [DataMember(Name = "carbohydrates", IsRequired = true, EmitDefaultValue = true)]
        public string Carbohydrates { get; set; }
        /// <summary>
        /// Gets or Sets Fats
        /// </summary>
        [DataMember(Name = "fats", IsRequired = true, EmitDefaultValue = true)]
        public string Fats { get; set; }
        /// <summary>
        /// Gets or Sets Proteins
        /// </summary>
        [DataMember(Name = "proteins", IsRequired = true, EmitDefaultValue = true)]
        public string Proteins { get; set; }
        /// <summary>
        /// Gets or Sets Calories
        /// </summary>
        [DataMember(Name = "calories", IsRequired = true, EmitDefaultValue = true)]
        public string Calories { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeNutrition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Carbohydrates: ").Append(Carbohydrates).Append("\n");
            sb.Append("  Fats: ").Append(Fats).Append("\n");
            sb.Append("  Proteins: ").Append(Proteins).Append("\n");
            sb.Append("  Calories: ").Append(Calories).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeNutrition);
        }
        /// <summary>
        /// Returns true if RecipeNutrition instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeNutrition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeNutrition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Carbohydrates == input.Carbohydrates ||
                    (this.Carbohydrates != null &&
                    this.Carbohydrates.Equals(input.Carbohydrates))
                ) && 
                (
                    this.Fats == input.Fats ||
                    (this.Fats != null &&
                    this.Fats.Equals(input.Fats))
                ) && 
                (
                    this.Proteins == input.Proteins ||
                    (this.Proteins != null &&
                    this.Proteins.Equals(input.Proteins))
                ) && 
                (
                    this.Calories == input.Calories ||
                    (this.Calories != null &&
                    this.Calories.Equals(input.Calories))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Carbohydrates != null)
                {
                    hashCode = (hashCode * 59) + this.Carbohydrates.GetHashCode();
                }
                if (this.Fats != null)
                {
                    hashCode = (hashCode * 59) + this.Fats.GetHashCode();
                }
                if (this.Proteins != null)
                {
                    hashCode = (hashCode * 59) + this.Proteins.GetHashCode();
                }
                if (this.Calories != null)
                {
                    hashCode = (hashCode * 59) + this.Calories.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Source (string) maxLength
            if (this.Source != null && this.Source.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Source, length must be less than 512.", new [] { "Source" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeOverview
    /// </summary>
    [DataContract(Name = "RecipeOverview")]
    public partial class RecipeOverview : IEquatable<RecipeOverview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeOverview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeOverview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeOverview" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="keywords">keywords (required).</param>
        /// <param name="workingTime">workingTime.</param>
        /// <param name="waitingTime">waitingTime.</param>
        /// <param name="_internal">_internal.</param>
        /// <param name="servings">servings.</param>
        /// <param name="servingsText">servingsText.</param>
        /// <param name="rating">rating.</param>
        /// <param name="lastCooked">lastCooked.</param>
        public RecipeOverview(string name = default(string), string description = default(string), List<MealPlanRecipeKeywordsInner> keywords = default(List<MealPlanRecipeKeywordsInner>), int workingTime = default(int), int waitingTime = default(int), bool _internal = default(bool), int servings = default(int), string servingsText = default(string), string rating = default(string), DateTime? lastCooked = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RecipeOverview and cannot be null");
            }
            this.Name = name;
            // to ensure "keywords" is required (not null)
            if (keywords == null)
            {
                throw new ArgumentNullException("keywords is a required property for RecipeOverview and cannot be null");
            }
            this.Keywords = keywords;
            this.Description = description;
            this.WorkingTime = workingTime;
            this.WaitingTime = waitingTime;
            this.Internal = _internal;
            this.Servings = servings;
            this.ServingsText = servingsText;
            this.Rating = rating;
            this.LastCooked = lastCooked;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public System.IO.Stream Image { get; private set; }
        /// <summary>
        /// Returns false as Image should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", IsRequired = true, EmitDefaultValue = true)]
        public List<MealPlanRecipeKeywordsInner> Keywords { get; set; }
        /// <summary>
        /// Gets or Sets WorkingTime
        /// </summary>
        [DataMember(Name = "working_time", EmitDefaultValue = true)]
        public int WorkingTime { get; set; }
        /// <summary>
        /// Gets or Sets WaitingTime
        /// </summary>
        [DataMember(Name = "waiting_time", EmitDefaultValue = true)]
        public int WaitingTime { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; private set; }
        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Internal
        /// </summary>
        [DataMember(Name = "internal", EmitDefaultValue = true)]
        public bool Internal { get; set; }
        /// <summary>
        /// Gets or Sets Servings
        /// </summary>
        [DataMember(Name = "servings", EmitDefaultValue = true)]
        public int Servings { get; set; }
        /// <summary>
        /// Gets or Sets ServingsText
        /// </summary>
        [DataMember(Name = "servings_text", EmitDefaultValue = true)]
        public string ServingsText { get; set; }
        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name = "rating", EmitDefaultValue = true)]
        public string Rating { get; set; }
        /// <summary>
        /// Gets or Sets LastCooked
        /// </summary>
        [DataMember(Name = "last_cooked", EmitDefaultValue = true)]
        public DateTime? LastCooked { get; set; }
        /// <summary>
        /// Gets or Sets New
        /// </summary>
        [DataMember(Name = "new", EmitDefaultValue = true)]
        public string New { get; private set; }
        /// <summary>
        /// Returns false as New should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNew()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recent
        /// </summary>
        [DataMember(Name = "recent", EmitDefaultValue = true)]
        public string Recent { get; private set; }
        /// <summary>
        /// Returns false as Recent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecent()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeOverview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  WorkingTime: ").Append(WorkingTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  ServingsText: ").Append(ServingsText).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  LastCooked: ").Append(LastCooked).Append("\n");
            sb.Append("  New: ").Append(New).Append("\n");
            sb.Append("  Recent: ").Append(Recent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeOverview);
        }
        /// <summary>
        /// Returns true if RecipeOverview instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeOverview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeOverview input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.WorkingTime == input.WorkingTime ||
                    this.WorkingTime.Equals(input.WorkingTime)
                ) && 
                (
                    this.WaitingTime == input.WaitingTime ||
                    this.WaitingTime.Equals(input.WaitingTime)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Internal == input.Internal ||
                    this.Internal.Equals(input.Internal)
                ) && 
                (
                    this.Servings == input.Servings ||
                    this.Servings.Equals(input.Servings)
                ) && 
                (
                    this.ServingsText == input.ServingsText ||
                    (this.ServingsText != null &&
                    this.ServingsText.Equals(input.ServingsText))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.LastCooked == input.LastCooked ||
                    (this.LastCooked != null &&
                    this.LastCooked.Equals(input.LastCooked))
                ) && 
                (
                    this.New == input.New ||
                    (this.New != null &&
                    this.New.Equals(input.New))
                ) && 
                (
                    this.Recent == input.Recent ||
                    (this.Recent != null &&
                    this.Recent.Equals(input.Recent))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                if (this.Keywords != null)
                {
                    hashCode = (hashCode * 59) + this.Keywords.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WorkingTime.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitingTime.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Internal.GetHashCode();
                hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                if (this.ServingsText != null)
                {
                    hashCode = (hashCode * 59) + this.ServingsText.GetHashCode();
                }
                if (this.Rating != null)
                {
                    hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                }
                if (this.LastCooked != null)
                {
                    hashCode = (hashCode * 59) + this.LastCooked.GetHashCode();
                }
                if (this.New != null)
                {
                    hashCode = (hashCode * 59) + this.New.GetHashCode();
                }
                if (this.Recent != null)
                {
                    hashCode = (hashCode * 59) + this.Recent.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }
            // WorkingTime (int) maximum
            if (this.WorkingTime > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkingTime, must be a value less than or equal to 2147483647.", new [] { "WorkingTime" });
            }
            // WorkingTime (int) minimum
            if (this.WorkingTime < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkingTime, must be a value greater than or equal to -2147483648.", new [] { "WorkingTime" });
            }
            // WaitingTime (int) maximum
            if (this.WaitingTime > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitingTime, must be a value less than or equal to 2147483647.", new [] { "WaitingTime" });
            }
            // WaitingTime (int) minimum
            if (this.WaitingTime < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitingTime, must be a value greater than or equal to -2147483648.", new [] { "WaitingTime" });
            }
            // Servings (int) maximum
            if (this.Servings > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Servings, must be a value less than or equal to 2147483647.", new [] { "Servings" });
            }
            // Servings (int) minimum
            if (this.Servings < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Servings, must be a value greater than or equal to -2147483648.", new [] { "Servings" });
            }
            // ServingsText (string) maxLength
            if (this.ServingsText != null && this.ServingsText.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServingsText, length must be less than 32.", new [] { "ServingsText" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeShoppingUpdate
    /// </summary>
    [DataContract(Name = "RecipeShoppingUpdate")]
    public partial class RecipeShoppingUpdate : IEquatable<RecipeShoppingUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeShoppingUpdate" /> class.
        /// </summary>
        /// <param name="listRecipe">Existing shopping list to update.</param>
        /// <param name="ingredients">List of ingredient IDs from the recipe to add, if not provided all ingredients will be added..</param>
        /// <param name="servings">Providing a list_recipe ID and servings of 0 will delete that shopping list. (default to 1).</param>
        public RecipeShoppingUpdate(int? listRecipe = default(int?), int? ingredients = default(int?), int? servings = 1)
        {
            this.ListRecipe = listRecipe;
            this.Ingredients = ingredients;
            // use default value if no "servings" provided
            this.Servings = servings ?? 1;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Existing shopping list to update
        /// </summary>
        /// <value>Existing shopping list to update</value>
        [DataMember(Name = "list_recipe", EmitDefaultValue = true)]
        public int? ListRecipe { get; set; }
        /// <summary>
        /// List of ingredient IDs from the recipe to add, if not provided all ingredients will be added.
        /// </summary>
        /// <value>List of ingredient IDs from the recipe to add, if not provided all ingredients will be added.</value>
        [DataMember(Name = "ingredients", EmitDefaultValue = true)]
        public int? Ingredients { get; set; }
        /// <summary>
        /// Providing a list_recipe ID and servings of 0 will delete that shopping list.
        /// </summary>
        /// <value>Providing a list_recipe ID and servings of 0 will delete that shopping list.</value>
        [DataMember(Name = "servings", EmitDefaultValue = true)]
        public int? Servings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeShoppingUpdate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ListRecipe: ").Append(ListRecipe).Append("\n");
            sb.Append("  Ingredients: ").Append(Ingredients).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeShoppingUpdate);
        }
        /// <summary>
        /// Returns true if RecipeShoppingUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeShoppingUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeShoppingUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ListRecipe == input.ListRecipe ||
                    (this.ListRecipe != null &&
                    this.ListRecipe.Equals(input.ListRecipe))
                ) && 
                (
                    this.Ingredients == input.Ingredients ||
                    (this.Ingredients != null &&
                    this.Ingredients.Equals(input.Ingredients))
                ) && 
                (
                    this.Servings == input.Servings ||
                    (this.Servings != null &&
                    this.Servings.Equals(input.Servings))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ListRecipe != null)
                {
                    hashCode = (hashCode * 59) + this.ListRecipe.GetHashCode();
                }
                if (this.Ingredients != null)
                {
                    hashCode = (hashCode * 59) + this.Ingredients.GetHashCode();
                }
                if (this.Servings != null)
                {
                    hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeSimple
    /// </summary>
    [DataContract(Name = "RecipeSimple")]
    public partial class RecipeSimple : IEquatable<RecipeSimple>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeSimple" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeSimple() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeSimple" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        public RecipeSimple(string name = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RecipeSimple and cannot be null");
            }
            this.Name = name;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; private set; }
        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeSimple {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeSimple);
        }
        /// <summary>
        /// Returns true if RecipeSimple instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeSimple to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeSimple input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeStepsInner
    /// </summary>
    [DataContract(Name = "Recipe_steps_inner")]
    public partial class RecipeStepsInner : IEquatable<RecipeStepsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeStepsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeStepsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeStepsInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="instruction">instruction.</param>
        /// <param name="ingredients">ingredients (required).</param>
        /// <param name="time">time.</param>
        /// <param name="order">order.</param>
        /// <param name="showAsHeader">showAsHeader.</param>
        /// <param name="file">file.</param>
        /// <param name="stepRecipe">stepRecipe.</param>
        public RecipeStepsInner(string name = default(string), string instruction = default(string), List<RecipeStepsInnerIngredientsInner> ingredients = default(List<RecipeStepsInnerIngredientsInner>), int time = default(int), int order = default(int), bool showAsHeader = default(bool), RecipeStepsInnerFile file = default(RecipeStepsInnerFile), int? stepRecipe = default(int?))
        {
            // to ensure "ingredients" is required (not null)
            if (ingredients == null)
            {
                throw new ArgumentNullException("ingredients is a required property for RecipeStepsInner and cannot be null");
            }
            this.Ingredients = ingredients;
            this.Name = name;
            this.Instruction = instruction;
            this.Time = time;
            this.Order = order;
            this.ShowAsHeader = showAsHeader;
            this.File = file;
            this.StepRecipe = stepRecipe;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Instruction
        /// </summary>
        [DataMember(Name = "instruction", EmitDefaultValue = true)]
        public string Instruction { get; set; }
        /// <summary>
        /// Gets or Sets Ingredients
        /// </summary>
        [DataMember(Name = "ingredients", IsRequired = true, EmitDefaultValue = true)]
        public List<RecipeStepsInnerIngredientsInner> Ingredients { get; set; }
        /// <summary>
        /// Gets or Sets IngredientsMarkdown
        /// </summary>
        [DataMember(Name = "ingredients_markdown", EmitDefaultValue = true)]
        public string IngredientsMarkdown { get; private set; }
        /// <summary>
        /// Returns false as IngredientsMarkdown should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIngredientsMarkdown()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IngredientsVue
        /// </summary>
        [DataMember(Name = "ingredients_vue", EmitDefaultValue = true)]
        public string IngredientsVue { get; private set; }
        /// <summary>
        /// Returns false as IngredientsVue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIngredientsVue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", EmitDefaultValue = true)]
        public int Time { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Gets or Sets ShowAsHeader
        /// </summary>
        [DataMember(Name = "show_as_header", EmitDefaultValue = true)]
        public bool ShowAsHeader { get; set; }
        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = true)]
        public RecipeStepsInnerFile File { get; set; }
        /// <summary>
        /// Gets or Sets StepRecipe
        /// </summary>
        [DataMember(Name = "step_recipe", EmitDefaultValue = true)]
        public int? StepRecipe { get; set; }
        /// <summary>
        /// Gets or Sets StepRecipeData
        /// </summary>
        [DataMember(Name = "step_recipe_data", EmitDefaultValue = true)]
        public string StepRecipeData { get; private set; }
        /// <summary>
        /// Returns false as StepRecipeData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStepRecipeData()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Numrecipe
        /// </summary>
        [DataMember(Name = "numrecipe", EmitDefaultValue = true)]
        public string Numrecipe { get; private set; }
        /// <summary>
        /// Returns false as Numrecipe should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumrecipe()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeStepsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Instruction: ").Append(Instruction).Append("\n");
            sb.Append("  Ingredients: ").Append(Ingredients).Append("\n");
            sb.Append("  IngredientsMarkdown: ").Append(IngredientsMarkdown).Append("\n");
            sb.Append("  IngredientsVue: ").Append(IngredientsVue).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  ShowAsHeader: ").Append(ShowAsHeader).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  StepRecipe: ").Append(StepRecipe).Append("\n");
            sb.Append("  StepRecipeData: ").Append(StepRecipeData).Append("\n");
            sb.Append("  Numrecipe: ").Append(Numrecipe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeStepsInner);
        }
        /// <summary>
        /// Returns true if RecipeStepsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeStepsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeStepsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Instruction == input.Instruction ||
                    (this.Instruction != null &&
                    this.Instruction.Equals(input.Instruction))
                ) && 
                (
                    this.Ingredients == input.Ingredients ||
                    this.Ingredients != null &&
                    input.Ingredients != null &&
                    this.Ingredients.SequenceEqual(input.Ingredients)
                ) && 
                (
                    this.IngredientsMarkdown == input.IngredientsMarkdown ||
                    (this.IngredientsMarkdown != null &&
                    this.IngredientsMarkdown.Equals(input.IngredientsMarkdown))
                ) && 
                (
                    this.IngredientsVue == input.IngredientsVue ||
                    (this.IngredientsVue != null &&
                    this.IngredientsVue.Equals(input.IngredientsVue))
                ) && 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.ShowAsHeader == input.ShowAsHeader ||
                    this.ShowAsHeader.Equals(input.ShowAsHeader)
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.StepRecipe == input.StepRecipe ||
                    (this.StepRecipe != null &&
                    this.StepRecipe.Equals(input.StepRecipe))
                ) && 
                (
                    this.StepRecipeData == input.StepRecipeData ||
                    (this.StepRecipeData != null &&
                    this.StepRecipeData.Equals(input.StepRecipeData))
                ) && 
                (
                    this.Numrecipe == input.Numrecipe ||
                    (this.Numrecipe != null &&
                    this.Numrecipe.Equals(input.Numrecipe))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Instruction != null)
                {
                    hashCode = (hashCode * 59) + this.Instruction.GetHashCode();
                }
                if (this.Ingredients != null)
                {
                    hashCode = (hashCode * 59) + this.Ingredients.GetHashCode();
                }
                if (this.IngredientsMarkdown != null)
                {
                    hashCode = (hashCode * 59) + this.IngredientsMarkdown.GetHashCode();
                }
                if (this.IngredientsVue != null)
                {
                    hashCode = (hashCode * 59) + this.IngredientsVue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowAsHeader.GetHashCode();
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.StepRecipe != null)
                {
                    hashCode = (hashCode * 59) + this.StepRecipe.GetHashCode();
                }
                if (this.StepRecipeData != null)
                {
                    hashCode = (hashCode * 59) + this.StepRecipeData.GetHashCode();
                }
                if (this.Numrecipe != null)
                {
                    hashCode = (hashCode * 59) + this.Numrecipe.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Time (int) maximum
            if (this.Time > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Time, must be a value less than or equal to 2147483647.", new [] { "Time" });
            }
            // Time (int) minimum
            if (this.Time < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Time, must be a value greater than or equal to -2147483648.", new [] { "Time" });
            }
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeStepsInnerFile
    /// </summary>
    [DataContract(Name = "Recipe_steps_inner_file")]
    public partial class RecipeStepsInnerFile : IEquatable<RecipeStepsInnerFile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeStepsInnerFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeStepsInnerFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeStepsInnerFile" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        public RecipeStepsInnerFile(string name = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RecipeStepsInnerFile and cannot be null");
            }
            this.Name = name;
        }
        public RecipeStepsInnerFile(int _Id = default(int), string _Name = default(string), string _FileDownload = default(string), string _Preview = default(string), int _FileSizeKb = default(int))
        {
            Id = _Id;
            Name = _Name;
            FileDownload = _FileDownload;
            Preview = _Preview;
            FileSizeKb = _FileSizeKb;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return true;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets FileDownload
        /// </summary>
        [DataMember(Name = "file_download", EmitDefaultValue = true)]
        public string FileDownload { get; private set; }
        /// <summary>
        /// Gets or Sets Preview
        /// </summary>
        [DataMember(Name = "preview", EmitDefaultValue = true)]
        public string Preview { get; private set; }
        
        [DataMember(Name = "file_size_kb", EmitDefaultValue = true)]
        public int FileSizeKb { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeStepsInnerFile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FileDownload: ").Append(FileDownload).Append("\n");
            sb.Append("  Preview: ").Append(Preview).Append("\n");
            sb.Append("  FileSizeKb: ").Append(FileSizeKb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeStepsInnerFile);
        }
        /// <summary>
        /// Returns true if RecipeStepsInnerFile instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeStepsInnerFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeStepsInnerFile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FileDownload == input.FileDownload ||
                    (this.FileDownload != null &&
                    this.FileDownload.Equals(input.FileDownload))
                ) && 
                (
                    this.Preview == input.Preview ||
                    (this.Preview != null &&
                    this.Preview.Equals(input.Preview))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FileDownload != null)
                {
                    hashCode = (hashCode * 59) + this.FileDownload.GetHashCode();
                }
                if (this.Preview != null)
                {
                    hashCode = (hashCode * 59) + this.Preview.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// RecipeStepsInnerIngredientsInner
    /// </summary>
    [DataContract(Name = "Recipe_steps_inner_ingredients_inner")]
    public partial class RecipeStepsInnerIngredientsInner : IEquatable<RecipeStepsInnerIngredientsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeStepsInnerIngredientsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecipeStepsInnerIngredientsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeStepsInnerIngredientsInner" /> class.
        /// </summary>
        /// <param name="food">food (required).</param>
        /// <param name="unit">unit (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="note">note.</param>
        /// <param name="order">order.</param>
        /// <param name="isHeader">isHeader.</param>
        /// <param name="noAmount">noAmount.</param>
        /// <param name="originalText">originalText.</param>
        public RecipeStepsInnerIngredientsInner(IngredientFood food = default(IngredientFood), FoodSupermarketCategory unit = default(FoodSupermarketCategory), string amount = default(string), string note = default(string), int order = default(int), bool isHeader = default(bool), bool noAmount = default(bool), string originalText = default(string))
        {
            // to ensure "food" is required (not null)
            if (food == null)
            {
                throw new ArgumentNullException("food is a required property for RecipeStepsInnerIngredientsInner and cannot be null");
            }
            this.Food = food;

            this.Unit = unit;

            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for RecipeStepsInnerIngredientsInner and cannot be null");
            }
            this.Amount = amount;
            this.Note = note;
            this.Order = order;
            this.IsHeader = isHeader;
            this.NoAmount = noAmount;
            this.OriginalText = originalText;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Food
        /// </summary>
        [DataMember(Name = "food", IsRequired = true, EmitDefaultValue = true)]
        public IngredientFood Food { get; set; }
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", IsRequired = true, EmitDefaultValue = true)]
        public FoodSupermarketCategory Unit { get; set; }
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }
        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Gets or Sets IsHeader
        /// </summary>
        [DataMember(Name = "is_header", EmitDefaultValue = true)]
        public bool IsHeader { get; set; }
        /// <summary>
        /// Gets or Sets NoAmount
        /// </summary>
        [DataMember(Name = "no_amount", EmitDefaultValue = true)]
        public bool NoAmount { get; set; }
        /// <summary>
        /// Gets or Sets OriginalText
        /// </summary>
        [DataMember(Name = "original_text", EmitDefaultValue = true)]
        public string OriginalText { get; set; }
        /// <summary>
        /// Gets or Sets UsedInRecipes
        /// </summary>
        [DataMember(Name = "used_in_recipes", EmitDefaultValue = true)]
        public string UsedInRecipes { get; private set; }
        /// <summary>
        /// Returns false as UsedInRecipes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsedInRecipes()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeStepsInnerIngredientsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Food: ").Append(Food).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  IsHeader: ").Append(IsHeader).Append("\n");
            sb.Append("  NoAmount: ").Append(NoAmount).Append("\n");
            sb.Append("  OriginalText: ").Append(OriginalText).Append("\n");
            sb.Append("  UsedInRecipes: ").Append(UsedInRecipes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeStepsInnerIngredientsInner);
        }
        /// <summary>
        /// Returns true if RecipeStepsInnerIngredientsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeStepsInnerIngredientsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeStepsInnerIngredientsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Food == input.Food ||
                    (this.Food != null &&
                    this.Food.Equals(input.Food))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.IsHeader == input.IsHeader ||
                    this.IsHeader.Equals(input.IsHeader)
                ) && 
                (
                    this.NoAmount == input.NoAmount ||
                    this.NoAmount.Equals(input.NoAmount)
                ) && 
                (
                    this.OriginalText == input.OriginalText ||
                    (this.OriginalText != null &&
                    this.OriginalText.Equals(input.OriginalText))
                ) && 
                (
                    this.UsedInRecipes == input.UsedInRecipes ||
                    (this.UsedInRecipes != null &&
                    this.UsedInRecipes.Equals(input.UsedInRecipes))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Food != null)
                {
                    hashCode = (hashCode * 59) + this.Food.GetHashCode();
                }
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                hashCode = (hashCode * 59) + this.IsHeader.GetHashCode();
                hashCode = (hashCode * 59) + this.NoAmount.GetHashCode();
                if (this.OriginalText != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalText.GetHashCode();
                }
                if (this.UsedInRecipes != null)
                {
                    hashCode = (hashCode * 59) + this.UsedInRecipes.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Note (string) maxLength
            if (this.Note != null && this.Note.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Note, length must be less than 256.", new [] { "Note" });
            }
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            // OriginalText (string) maxLength
            if (this.OriginalText != null && this.OriginalText.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OriginalText, length must be less than 512.", new [] { "OriginalText" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingList
    /// </summary>
    [DataContract(Name = "ShoppingList")]
    public partial class ShoppingList : IEquatable<ShoppingList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShoppingList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingList" /> class.
        /// </summary>
        /// <param name="uuid">uuid.</param>
        /// <param name="note">note.</param>
        /// <param name="recipes">recipes (required).</param>
        /// <param name="entries">entries (required).</param>
        /// <param name="shared">shared (required).</param>
        /// <param name="finished">finished.</param>
        /// <param name="supermarket">supermarket (required).</param>
        public ShoppingList(Guid uuid = default(Guid), string note = default(string), List<ShoppingListRecipesInner> recipes = default(List<ShoppingListRecipesInner>), List<ShoppingListEntriesInner> entries = default(List<ShoppingListEntriesInner>), List<CustomFilterSharedInner> shared = default(List<CustomFilterSharedInner>), bool finished = default(bool), ShoppingListSupermarket supermarket = default(ShoppingListSupermarket))
        {
            // to ensure "recipes" is required (not null)
            if (recipes == null)
            {
                throw new ArgumentNullException("recipes is a required property for ShoppingList and cannot be null");
            }
            this.Recipes = recipes;
            // to ensure "entries" is required (not null)
            if (entries == null)
            {
                throw new ArgumentNullException("entries is a required property for ShoppingList and cannot be null");
            }
            this.Entries = entries;
            // to ensure "shared" is required (not null)
            if (shared == null)
            {
                throw new ArgumentNullException("shared is a required property for ShoppingList and cannot be null");
            }
            this.Shared = shared;
            // to ensure "supermarket" is required (not null)
            if (supermarket == null)
            {
                throw new ArgumentNullException("supermarket is a required property for ShoppingList and cannot be null");
            }
            this.Supermarket = supermarket;
            this.Uuid = uuid;
            this.Note = note;
            this.Finished = finished;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = true)]
        public Guid Uuid { get; set; }
        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }
        /// <summary>
        /// Gets or Sets Recipes
        /// </summary>
        [DataMember(Name = "recipes", IsRequired = true, EmitDefaultValue = true)]
        public List<ShoppingListRecipesInner> Recipes { get; set; }
        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [DataMember(Name = "entries", IsRequired = true, EmitDefaultValue = true)]
        public List<ShoppingListEntriesInner> Entries { get; set; }
        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomFilterSharedInner> Shared { get; set; }
        /// <summary>
        /// Gets or Sets Finished
        /// </summary>
        [DataMember(Name = "finished", EmitDefaultValue = true)]
        public bool Finished { get; set; }
        /// <summary>
        /// Gets or Sets Supermarket
        /// </summary>
        [DataMember(Name = "supermarket", IsRequired = true, EmitDefaultValue = true)]
        public ShoppingListSupermarket Supermarket { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Recipes: ").Append(Recipes).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Supermarket: ").Append(Supermarket).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingList);
        }
        /// <summary>
        /// Returns true if ShoppingList instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Recipes == input.Recipes ||
                    this.Recipes != null &&
                    input.Recipes != null &&
                    this.Recipes.SequenceEqual(input.Recipes)
                ) && 
                (
                    this.Entries == input.Entries ||
                    this.Entries != null &&
                    input.Entries != null &&
                    this.Entries.SequenceEqual(input.Entries)
                ) && 
                (
                    this.Shared == input.Shared ||
                    this.Shared != null &&
                    input.Shared != null &&
                    this.Shared.SequenceEqual(input.Shared)
                ) && 
                (
                    this.Finished == input.Finished ||
                    this.Finished.Equals(input.Finished)
                ) && 
                (
                    this.Supermarket == input.Supermarket ||
                    (this.Supermarket != null &&
                    this.Supermarket.Equals(input.Supermarket))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.Recipes != null)
                {
                    hashCode = (hashCode * 59) + this.Recipes.GetHashCode();
                }
                if (this.Entries != null)
                {
                    hashCode = (hashCode * 59) + this.Entries.GetHashCode();
                }
                if (this.Shared != null)
                {
                    hashCode = (hashCode * 59) + this.Shared.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Finished.GetHashCode();
                if (this.Supermarket != null)
                {
                    hashCode = (hashCode * 59) + this.Supermarket.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingListEntriesInner
    /// </summary>
    [DataContract(Name = "ShoppingList_entries_inner")]
    public partial class ShoppingListEntriesInner : IEquatable<ShoppingListEntriesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListEntriesInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShoppingListEntriesInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListEntriesInner" /> class.
        /// </summary>
        /// <param name="listRecipe">listRecipe.</param>
        /// <param name="food">food (required).</param>
        /// <param name="unit">unit.</param>
        /// <param name="ingredient">ingredient.</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="order">order.</param>
        /// <param name="_checked">_checked.</param>
        /// <param name="recipeMealplan">recipeMealplan.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="completedAt">completedAt.</param>
        /// <param name="delayUntil">delayUntil.</param>
        public ShoppingListEntriesInner(int? listRecipe = default(int?), IngredientFood food = default(IngredientFood), FoodSupermarketCategory unit = default(FoodSupermarketCategory), int? ingredient = default(int?), string amount = default(string), int order = default(int), bool _checked = default(bool), ShoppingListEntriesInnerRecipeMealplan recipeMealplan = default(ShoppingListEntriesInnerRecipeMealplan), ShoppingListEntriesInnerCreatedBy createdBy = default(ShoppingListEntriesInnerCreatedBy), DateTime? completedAt = default(DateTime?), DateTime? delayUntil = default(DateTime?))
        {
            // to ensure "food" is required (not null)
            if (food == null)
            {
                throw new ArgumentNullException("food is a required property for ShoppingListEntriesInner and cannot be null");
            }
            this.Food = food;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for ShoppingListEntriesInner and cannot be null");
            }
            this.Amount = amount;
            this.ListRecipe = listRecipe;
            this.Unit = unit;
            this.Ingredient = ingredient;
            this.Order = order;
            this.Checked = _checked;
            this.RecipeMealplan = recipeMealplan;
            this.CreatedBy = createdBy;
            this.CompletedAt = completedAt;
            this.DelayUntil = delayUntil;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ListRecipe
        /// </summary>
        [DataMember(Name = "list_recipe", EmitDefaultValue = true)]
        public int? ListRecipe { get; set; }
        /// <summary>
        /// Gets or Sets Food
        /// </summary>
        [DataMember(Name = "food", IsRequired = true, EmitDefaultValue = true)]
        public IngredientFood Food { get; set; }
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = true)]
        public FoodSupermarketCategory Unit { get; set; }
        /// <summary>
        /// Gets or Sets Ingredient
        /// </summary>
        [DataMember(Name = "ingredient", EmitDefaultValue = true)]
        public int? Ingredient { get; set; }
        /// <summary>
        /// Gets or Sets IngredientNote
        /// </summary>
        [DataMember(Name = "ingredient_note", EmitDefaultValue = true)]
        public string IngredientNote { get; private set; }
        /// <summary>
        /// Returns false as IngredientNote should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIngredientNote()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Gets or Sets Checked
        /// </summary>
        [DataMember(Name = "checked", EmitDefaultValue = true)]
        public bool Checked { get; set; }
        /// <summary>
        /// Gets or Sets RecipeMealplan
        /// </summary>
        [DataMember(Name = "recipe_mealplan", EmitDefaultValue = true)]
        public ShoppingListEntriesInnerRecipeMealplan RecipeMealplan { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public ShoppingListEntriesInnerCreatedBy CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name = "completed_at", EmitDefaultValue = true)]
        public DateTime? CompletedAt { get; set; }
        /// <summary>
        /// Gets or Sets DelayUntil
        /// </summary>
        [DataMember(Name = "delay_until", EmitDefaultValue = true)]
        public DateTime? DelayUntil { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingListEntriesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ListRecipe: ").Append(ListRecipe).Append("\n");
            sb.Append("  Food: ").Append(Food).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Ingredient: ").Append(Ingredient).Append("\n");
            sb.Append("  IngredientNote: ").Append(IngredientNote).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Checked: ").Append(Checked).Append("\n");
            sb.Append("  RecipeMealplan: ").Append(RecipeMealplan).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  DelayUntil: ").Append(DelayUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingListEntriesInner);
        }
        /// <summary>
        /// Returns true if ShoppingListEntriesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingListEntriesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingListEntriesInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ListRecipe == input.ListRecipe ||
                    (this.ListRecipe != null &&
                    this.ListRecipe.Equals(input.ListRecipe))
                ) && 
                (
                    this.Food == input.Food ||
                    (this.Food != null &&
                    this.Food.Equals(input.Food))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Ingredient == input.Ingredient ||
                    (this.Ingredient != null &&
                    this.Ingredient.Equals(input.Ingredient))
                ) && 
                (
                    this.IngredientNote == input.IngredientNote ||
                    (this.IngredientNote != null &&
                    this.IngredientNote.Equals(input.IngredientNote))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.Checked == input.Checked ||
                    this.Checked.Equals(input.Checked)
                ) && 
                (
                    this.RecipeMealplan == input.RecipeMealplan ||
                    (this.RecipeMealplan != null &&
                    this.RecipeMealplan.Equals(input.RecipeMealplan))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.DelayUntil == input.DelayUntil ||
                    (this.DelayUntil != null &&
                    this.DelayUntil.Equals(input.DelayUntil))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ListRecipe != null)
                {
                    hashCode = (hashCode * 59) + this.ListRecipe.GetHashCode();
                }
                if (this.Food != null)
                {
                    hashCode = (hashCode * 59) + this.Food.GetHashCode();
                }
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                if (this.Ingredient != null)
                {
                    hashCode = (hashCode * 59) + this.Ingredient.GetHashCode();
                }
                if (this.IngredientNote != null)
                {
                    hashCode = (hashCode * 59) + this.IngredientNote.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                hashCode = (hashCode * 59) + this.Checked.GetHashCode();
                if (this.RecipeMealplan != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeMealplan.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.CompletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedAt.GetHashCode();
                }
                if (this.DelayUntil != null)
                {
                    hashCode = (hashCode * 59) + this.DelayUntil.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingListEntriesInnerCreatedBy
    /// </summary>
    [DataContract(Name = "ShoppingList_entries_inner_created_by")]
    public partial class ShoppingListEntriesInnerCreatedBy : IEquatable<ShoppingListEntriesInnerCreatedBy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListEntriesInnerCreatedBy" /> class.
        /// </summary>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        public ShoppingListEntriesInnerCreatedBy(string firstName = default(string), string lastName = default(string))
        {
            this.FirstName = firstName;
            this.LastName = lastName;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
        /// </summary>
        /// <value>Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.</value>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; private set; }
        /// <summary>
        /// Returns false as Username should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsername()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = true)]
        public string DisplayName { get; private set; }
        /// <summary>
        /// Returns false as DisplayName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayName()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingListEntriesInnerCreatedBy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingListEntriesInnerCreatedBy);
        }
        /// <summary>
        /// Returns true if ShoppingListEntriesInnerCreatedBy instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingListEntriesInnerCreatedBy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingListEntriesInnerCreatedBy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 150.", new [] { "FirstName" });
            }
            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 150.", new [] { "LastName" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingListEntriesInnerRecipeMealplan
    /// </summary>
    [DataContract(Name = "ShoppingList_entries_inner_recipe_mealplan")]
    public partial class ShoppingListEntriesInnerRecipeMealplan : IEquatable<ShoppingListEntriesInnerRecipeMealplan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListEntriesInnerRecipeMealplan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShoppingListEntriesInnerRecipeMealplan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListEntriesInnerRecipeMealplan" /> class.
        /// </summary>
        /// <param name="recipe">recipe.</param>
        /// <param name="mealplan">mealplan.</param>
        /// <param name="servings">servings (required).</param>
        public ShoppingListEntriesInnerRecipeMealplan(int? recipe = default(int?), int? mealplan = default(int?), string servings = default(string))
        {
            // to ensure "servings" is required (not null)
            if (servings == null)
            {
                throw new ArgumentNullException("servings is a required property for ShoppingListEntriesInnerRecipeMealplan and cannot be null");
            }
            this.Servings = servings;
            this.Recipe = recipe;
            this.Mealplan = mealplan;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RecipeName
        /// </summary>
        [DataMember(Name = "recipe_name", EmitDefaultValue = true)]
        public string RecipeName { get; private set; }
        /// <summary>
        /// Returns false as RecipeName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; private set; }
        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", EmitDefaultValue = true)]
        public int? Recipe { get; set; }
        /// <summary>
        /// Gets or Sets Mealplan
        /// </summary>
        [DataMember(Name = "mealplan", EmitDefaultValue = true)]
        public int? Mealplan { get; set; }
        /// <summary>
        /// Gets or Sets Servings
        /// </summary>
        [DataMember(Name = "servings", IsRequired = true, EmitDefaultValue = true)]
        public string Servings { get; set; }
        /// <summary>
        /// Gets or Sets MealplanNote
        /// </summary>
        [DataMember(Name = "mealplan_note", EmitDefaultValue = true)]
        public string MealplanNote { get; private set; }
        /// <summary>
        /// Returns false as MealplanNote should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMealplanNote()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingListEntriesInnerRecipeMealplan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RecipeName: ").Append(RecipeName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  Mealplan: ").Append(Mealplan).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  MealplanNote: ").Append(MealplanNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingListEntriesInnerRecipeMealplan);
        }
        /// <summary>
        /// Returns true if ShoppingListEntriesInnerRecipeMealplan instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingListEntriesInnerRecipeMealplan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingListEntriesInnerRecipeMealplan input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.RecipeName == input.RecipeName ||
                    (this.RecipeName != null &&
                    this.RecipeName.Equals(input.RecipeName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Recipe == input.Recipe ||
                    (this.Recipe != null &&
                    this.Recipe.Equals(input.Recipe))
                ) && 
                (
                    this.Mealplan == input.Mealplan ||
                    (this.Mealplan != null &&
                    this.Mealplan.Equals(input.Mealplan))
                ) && 
                (
                    this.Servings == input.Servings ||
                    (this.Servings != null &&
                    this.Servings.Equals(input.Servings))
                ) && 
                (
                    this.MealplanNote == input.MealplanNote ||
                    (this.MealplanNote != null &&
                    this.MealplanNote.Equals(input.MealplanNote))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.RecipeName != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Recipe != null)
                {
                    hashCode = (hashCode * 59) + this.Recipe.GetHashCode();
                }
                if (this.Mealplan != null)
                {
                    hashCode = (hashCode * 59) + this.Mealplan.GetHashCode();
                }
                if (this.Servings != null)
                {
                    hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                }
                if (this.MealplanNote != null)
                {
                    hashCode = (hashCode * 59) + this.MealplanNote.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingListEntry
    /// </summary>
    [DataContract(Name = "ShoppingListEntry")]
    public partial class ShoppingListEntry : IEquatable<ShoppingListEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShoppingListEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListEntry" /> class.
        /// </summary>
        /// <param name="listRecipe">listRecipe.</param>
        /// <param name="food">food (required).</param>
        /// <param name="unit">unit.</param>
        /// <param name="ingredient">ingredient.</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="order">order.</param>
        /// <param name="_checked">_checked.</param>
        /// <param name="recipeMealplan">recipeMealplan.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="completedAt">completedAt.</param>
        /// <param name="delayUntil">delayUntil.</param>
        public ShoppingListEntry(int? listRecipe = default(int?), IngredientFood food = default(IngredientFood), FoodSupermarketCategory unit = default(FoodSupermarketCategory), int? ingredient = default(int?), string amount = default(string), int order = default(int), bool _checked = default(bool), ShoppingListEntriesInnerRecipeMealplan recipeMealplan = default(ShoppingListEntriesInnerRecipeMealplan), ShoppingListEntriesInnerCreatedBy createdBy = default(ShoppingListEntriesInnerCreatedBy), DateTime? completedAt = default(DateTime?), DateTime? delayUntil = default(DateTime?))
        {
            // to ensure "food" is required (not null)
            if (food == null)
            {
                throw new ArgumentNullException("food is a required property for ShoppingListEntry and cannot be null");
            }
            this.Food = food;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for ShoppingListEntry and cannot be null");
            }
            this.Amount = amount;
            this.ListRecipe = listRecipe;
            this.Unit = unit;
            this.Ingredient = ingredient;
            this.Order = order;
            this.Checked = _checked;
            this.RecipeMealplan = recipeMealplan;
            this.CreatedBy = createdBy;
            this.CompletedAt = completedAt;
            this.DelayUntil = delayUntil;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ListRecipe
        /// </summary>
        [DataMember(Name = "list_recipe", EmitDefaultValue = true)]
        public int? ListRecipe { get; set; }
        /// <summary>
        /// Gets or Sets Food
        /// </summary>
        [DataMember(Name = "food", IsRequired = true, EmitDefaultValue = true)]
        public IngredientFood Food { get; set; }
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = true)]
        public FoodSupermarketCategory Unit { get; set; }
        /// <summary>
        /// Gets or Sets Ingredient
        /// </summary>
        [DataMember(Name = "ingredient", EmitDefaultValue = true)]
        public int? Ingredient { get; set; }
        /// <summary>
        /// Gets or Sets IngredientNote
        /// </summary>
        [DataMember(Name = "ingredient_note", EmitDefaultValue = true)]
        public string IngredientNote { get; private set; }
        /// <summary>
        /// Returns false as IngredientNote should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIngredientNote()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Gets or Sets Checked
        /// </summary>
        [DataMember(Name = "checked", EmitDefaultValue = true)]
        public bool Checked { get; set; }
        /// <summary>
        /// Gets or Sets RecipeMealplan
        /// </summary>
        [DataMember(Name = "recipe_mealplan", EmitDefaultValue = true)]
        public ShoppingListEntriesInnerRecipeMealplan RecipeMealplan { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public ShoppingListEntriesInnerCreatedBy CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name = "completed_at", EmitDefaultValue = true)]
        public DateTime? CompletedAt { get; set; }
        /// <summary>
        /// Gets or Sets DelayUntil
        /// </summary>
        [DataMember(Name = "delay_until", EmitDefaultValue = true)]
        public DateTime? DelayUntil { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingListEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ListRecipe: ").Append(ListRecipe).Append("\n");
            sb.Append("  Food: ").Append(Food).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Ingredient: ").Append(Ingredient).Append("\n");
            sb.Append("  IngredientNote: ").Append(IngredientNote).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Checked: ").Append(Checked).Append("\n");
            sb.Append("  RecipeMealplan: ").Append(RecipeMealplan).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  DelayUntil: ").Append(DelayUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingListEntry);
        }
        /// <summary>
        /// Returns true if ShoppingListEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingListEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingListEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ListRecipe == input.ListRecipe ||
                    (this.ListRecipe != null &&
                    this.ListRecipe.Equals(input.ListRecipe))
                ) && 
                (
                    this.Food == input.Food ||
                    (this.Food != null &&
                    this.Food.Equals(input.Food))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Ingredient == input.Ingredient ||
                    (this.Ingredient != null &&
                    this.Ingredient.Equals(input.Ingredient))
                ) && 
                (
                    this.IngredientNote == input.IngredientNote ||
                    (this.IngredientNote != null &&
                    this.IngredientNote.Equals(input.IngredientNote))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.Checked == input.Checked ||
                    this.Checked.Equals(input.Checked)
                ) && 
                (
                    this.RecipeMealplan == input.RecipeMealplan ||
                    (this.RecipeMealplan != null &&
                    this.RecipeMealplan.Equals(input.RecipeMealplan))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.DelayUntil == input.DelayUntil ||
                    (this.DelayUntil != null &&
                    this.DelayUntil.Equals(input.DelayUntil))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ListRecipe != null)
                {
                    hashCode = (hashCode * 59) + this.ListRecipe.GetHashCode();
                }
                if (this.Food != null)
                {
                    hashCode = (hashCode * 59) + this.Food.GetHashCode();
                }
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                if (this.Ingredient != null)
                {
                    hashCode = (hashCode * 59) + this.Ingredient.GetHashCode();
                }
                if (this.IngredientNote != null)
                {
                    hashCode = (hashCode * 59) + this.IngredientNote.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                hashCode = (hashCode * 59) + this.Checked.GetHashCode();
                if (this.RecipeMealplan != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeMealplan.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.CompletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedAt.GetHashCode();
                }
                if (this.DelayUntil != null)
                {
                    hashCode = (hashCode * 59) + this.DelayUntil.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingListRecipe
    /// </summary>
    [DataContract(Name = "ShoppingListRecipe")]
    public partial class ShoppingListRecipe : IEquatable<ShoppingListRecipe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListRecipe" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShoppingListRecipe() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListRecipe" /> class.
        /// </summary>
        /// <param name="recipe">recipe.</param>
        /// <param name="mealplan">mealplan.</param>
        /// <param name="servings">servings (required).</param>
        public ShoppingListRecipe(int? recipe = default(int?), int? mealplan = default(int?), string servings = default(string))
        {
            // to ensure "servings" is required (not null)
            if (servings == null)
            {
                throw new ArgumentNullException("servings is a required property for ShoppingListRecipe and cannot be null");
            }
            this.Servings = servings;
            this.Recipe = recipe;
            this.Mealplan = mealplan;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RecipeName
        /// </summary>
        [DataMember(Name = "recipe_name", EmitDefaultValue = true)]
        public string RecipeName { get; private set; }
        /// <summary>
        /// Returns false as RecipeName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; private set; }
        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", EmitDefaultValue = true)]
        public int? Recipe { get; set; }
        /// <summary>
        /// Gets or Sets Mealplan
        /// </summary>
        [DataMember(Name = "mealplan", EmitDefaultValue = true)]
        public int? Mealplan { get; set; }
        /// <summary>
        /// Gets or Sets Servings
        /// </summary>
        [DataMember(Name = "servings", IsRequired = true, EmitDefaultValue = true)]
        public string Servings { get; set; }
        /// <summary>
        /// Gets or Sets MealplanNote
        /// </summary>
        [DataMember(Name = "mealplan_note", EmitDefaultValue = true)]
        public string MealplanNote { get; private set; }
        /// <summary>
        /// Returns false as MealplanNote should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMealplanNote()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingListRecipe {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RecipeName: ").Append(RecipeName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  Mealplan: ").Append(Mealplan).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  MealplanNote: ").Append(MealplanNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingListRecipe);
        }
        /// <summary>
        /// Returns true if ShoppingListRecipe instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingListRecipe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingListRecipe input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.RecipeName == input.RecipeName ||
                    (this.RecipeName != null &&
                    this.RecipeName.Equals(input.RecipeName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Recipe == input.Recipe ||
                    (this.Recipe != null &&
                    this.Recipe.Equals(input.Recipe))
                ) && 
                (
                    this.Mealplan == input.Mealplan ||
                    (this.Mealplan != null &&
                    this.Mealplan.Equals(input.Mealplan))
                ) && 
                (
                    this.Servings == input.Servings ||
                    (this.Servings != null &&
                    this.Servings.Equals(input.Servings))
                ) && 
                (
                    this.MealplanNote == input.MealplanNote ||
                    (this.MealplanNote != null &&
                    this.MealplanNote.Equals(input.MealplanNote))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.RecipeName != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Recipe != null)
                {
                    hashCode = (hashCode * 59) + this.Recipe.GetHashCode();
                }
                if (this.Mealplan != null)
                {
                    hashCode = (hashCode * 59) + this.Mealplan.GetHashCode();
                }
                if (this.Servings != null)
                {
                    hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                }
                if (this.MealplanNote != null)
                {
                    hashCode = (hashCode * 59) + this.MealplanNote.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingListRecipesInner
    /// </summary>
    [DataContract(Name = "ShoppingList_recipes_inner")]
    public partial class ShoppingListRecipesInner : IEquatable<ShoppingListRecipesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListRecipesInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShoppingListRecipesInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListRecipesInner" /> class.
        /// </summary>
        /// <param name="recipe">recipe.</param>
        /// <param name="mealplan">mealplan.</param>
        /// <param name="servings">servings (required).</param>
        public ShoppingListRecipesInner(int? recipe = default(int?), int? mealplan = default(int?), string servings = default(string))
        {
            // to ensure "servings" is required (not null)
            if (servings == null)
            {
                throw new ArgumentNullException("servings is a required property for ShoppingListRecipesInner and cannot be null");
            }
            this.Servings = servings;
            this.Recipe = recipe;
            this.Mealplan = mealplan;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RecipeName
        /// </summary>
        [DataMember(Name = "recipe_name", EmitDefaultValue = true)]
        public string RecipeName { get; private set; }
        /// <summary>
        /// Returns false as RecipeName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; private set; }
        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", EmitDefaultValue = true)]
        public int? Recipe { get; set; }
        /// <summary>
        /// Gets or Sets Mealplan
        /// </summary>
        [DataMember(Name = "mealplan", EmitDefaultValue = true)]
        public int? Mealplan { get; set; }
        /// <summary>
        /// Gets or Sets Servings
        /// </summary>
        [DataMember(Name = "servings", IsRequired = true, EmitDefaultValue = true)]
        public string Servings { get; set; }
        /// <summary>
        /// Gets or Sets MealplanNote
        /// </summary>
        [DataMember(Name = "mealplan_note", EmitDefaultValue = true)]
        public string MealplanNote { get; private set; }
        /// <summary>
        /// Returns false as MealplanNote should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMealplanNote()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingListRecipesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RecipeName: ").Append(RecipeName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  Mealplan: ").Append(Mealplan).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  MealplanNote: ").Append(MealplanNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingListRecipesInner);
        }
        /// <summary>
        /// Returns true if ShoppingListRecipesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingListRecipesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingListRecipesInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.RecipeName == input.RecipeName ||
                    (this.RecipeName != null &&
                    this.RecipeName.Equals(input.RecipeName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Recipe == input.Recipe ||
                    (this.Recipe != null &&
                    this.Recipe.Equals(input.Recipe))
                ) && 
                (
                    this.Mealplan == input.Mealplan ||
                    (this.Mealplan != null &&
                    this.Mealplan.Equals(input.Mealplan))
                ) && 
                (
                    this.Servings == input.Servings ||
                    (this.Servings != null &&
                    this.Servings.Equals(input.Servings))
                ) && 
                (
                    this.MealplanNote == input.MealplanNote ||
                    (this.MealplanNote != null &&
                    this.MealplanNote.Equals(input.MealplanNote))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.RecipeName != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Recipe != null)
                {
                    hashCode = (hashCode * 59) + this.Recipe.GetHashCode();
                }
                if (this.Mealplan != null)
                {
                    hashCode = (hashCode * 59) + this.Mealplan.GetHashCode();
                }
                if (this.Servings != null)
                {
                    hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                }
                if (this.MealplanNote != null)
                {
                    hashCode = (hashCode * 59) + this.MealplanNote.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingListSupermarket
    /// </summary>
    [DataContract(Name = "ShoppingList_supermarket")]
    public partial class ShoppingListSupermarket : IEquatable<ShoppingListSupermarket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListSupermarket" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShoppingListSupermarket() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListSupermarket" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        public ShoppingListSupermarket(string name = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ShoppingListSupermarket and cannot be null");
            }
            this.Name = name;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets CategoryToSupermarket
        /// </summary>
        [DataMember(Name = "category_to_supermarket", EmitDefaultValue = true)]
        public List<ShoppingListSupermarketCategoryToSupermarketInner> CategoryToSupermarket { get; private set; }
        /// <summary>
        /// Returns false as CategoryToSupermarket should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoryToSupermarket()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingListSupermarket {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CategoryToSupermarket: ").Append(CategoryToSupermarket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingListSupermarket);
        }
        /// <summary>
        /// Returns true if ShoppingListSupermarket instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingListSupermarket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingListSupermarket input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CategoryToSupermarket == input.CategoryToSupermarket ||
                    this.CategoryToSupermarket != null &&
                    input.CategoryToSupermarket != null &&
                    this.CategoryToSupermarket.SequenceEqual(input.CategoryToSupermarket)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CategoryToSupermarket != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryToSupermarket.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingListSupermarketCategoryToSupermarketInner
    /// </summary>
    [DataContract(Name = "ShoppingList_supermarket_category_to_supermarket_inner")]
    public partial class ShoppingListSupermarketCategoryToSupermarketInner : IEquatable<ShoppingListSupermarketCategoryToSupermarketInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListSupermarketCategoryToSupermarketInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShoppingListSupermarketCategoryToSupermarketInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListSupermarketCategoryToSupermarketInner" /> class.
        /// </summary>
        /// <param name="category">category (required).</param>
        /// <param name="supermarket">supermarket (required).</param>
        /// <param name="order">order.</param>
        public ShoppingListSupermarketCategoryToSupermarketInner(ShoppingListSupermarketCategoryToSupermarketInnerCategory category = default(ShoppingListSupermarketCategoryToSupermarketInnerCategory), int supermarket = default(int), int order = default(int))
        {
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for ShoppingListSupermarketCategoryToSupermarketInner and cannot be null");
            }
            this.Category = category;
            this.Supermarket = supermarket;
            this.Order = order;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public ShoppingListSupermarketCategoryToSupermarketInnerCategory Category { get; set; }
        /// <summary>
        /// Gets or Sets Supermarket
        /// </summary>
        [DataMember(Name = "supermarket", IsRequired = true, EmitDefaultValue = true)]
        public int Supermarket { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingListSupermarketCategoryToSupermarketInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Supermarket: ").Append(Supermarket).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingListSupermarketCategoryToSupermarketInner);
        }
        /// <summary>
        /// Returns true if ShoppingListSupermarketCategoryToSupermarketInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingListSupermarketCategoryToSupermarketInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingListSupermarketCategoryToSupermarketInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Supermarket == input.Supermarket ||
                    this.Supermarket.Equals(input.Supermarket)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Supermarket.GetHashCode();
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ShoppingListSupermarketCategoryToSupermarketInnerCategory
    /// </summary>
    [DataContract(Name = "ShoppingList_supermarket_category_to_supermarket_inner_category")]
    public partial class ShoppingListSupermarketCategoryToSupermarketInnerCategory : IEquatable<ShoppingListSupermarketCategoryToSupermarketInnerCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListSupermarketCategoryToSupermarketInnerCategory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShoppingListSupermarketCategoryToSupermarketInnerCategory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingListSupermarketCategoryToSupermarketInnerCategory" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        public ShoppingListSupermarketCategoryToSupermarketInnerCategory(string name = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ShoppingListSupermarketCategoryToSupermarketInnerCategory and cannot be null");
            }
            this.Name = name;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShoppingListSupermarketCategoryToSupermarketInnerCategory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingListSupermarketCategoryToSupermarketInnerCategory);
        }
        /// <summary>
        /// Returns true if ShoppingListSupermarketCategoryToSupermarketInnerCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingListSupermarketCategoryToSupermarketInnerCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingListSupermarketCategoryToSupermarketInnerCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Space
    /// </summary>
    [DataContract(Name = "Space")]
    public partial class Space : IEquatable<Space>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Space" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Space() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Space" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="message">message.</param>
        /// <param name="foodInherit">foodInherit (required).</param>
        /// <param name="showFacetCount">showFacetCount.</param>
        /// <param name="image">image.</param>
        public Space(string name = default(string), string message = default(string), List<FoodInheritFieldsInner> foodInherit = default(List<FoodInheritFieldsInner>), bool showFacetCount = default(bool), RecipeStepsInnerFile image = default(RecipeStepsInnerFile))
        {
            // to ensure "foodInherit" is required (not null)
            if (foodInherit == null)
            {
                throw new ArgumentNullException("foodInherit is a required property for Space and cannot be null");
            }
            this.FoodInherit = foodInherit;
            this.Name = name;
            this.Message = message;
            this.ShowFacetCount = showFacetCount;
            this.Image = image;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets MaxRecipes
        /// </summary>
        [DataMember(Name = "max_recipes", EmitDefaultValue = true)]
        public int MaxRecipes { get; private set; }
        /// <summary>
        /// Returns false as MaxRecipes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMaxRecipes()
        {
            return false;
        }
        /// <summary>
        /// Maximum file storage for space in MB. 0 for unlimited, -1 to disable file upload.
        /// </summary>
        /// <value>Maximum file storage for space in MB. 0 for unlimited, -1 to disable file upload.</value>
        [DataMember(Name = "max_file_storage_mb", EmitDefaultValue = true)]
        public int MaxFileStorageMb { get; private set; }
        /// <summary>
        /// Returns false as MaxFileStorageMb should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMaxFileStorageMb()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MaxUsers
        /// </summary>
        [DataMember(Name = "max_users", EmitDefaultValue = true)]
        public int MaxUsers { get; private set; }
        /// <summary>
        /// Returns false as MaxUsers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMaxUsers()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AllowSharing
        /// </summary>
        [DataMember(Name = "allow_sharing", EmitDefaultValue = true)]
        public bool AllowSharing { get; private set; }
        /// <summary>
        /// Returns false as AllowSharing should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllowSharing()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Demo
        /// </summary>
        [DataMember(Name = "demo", EmitDefaultValue = true)]
        public bool Demo { get; private set; }
        /// <summary>
        /// Returns false as Demo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDemo()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FoodInherit
        /// </summary>
        [DataMember(Name = "food_inherit", IsRequired = true, EmitDefaultValue = true)]
        public List<FoodInheritFieldsInner> FoodInherit { get; set; }
        /// <summary>
        /// Gets or Sets ShowFacetCount
        /// </summary>
        [DataMember(Name = "show_facet_count", EmitDefaultValue = true)]
        public bool ShowFacetCount { get; set; }
        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name = "user_count", EmitDefaultValue = true)]
        public string UserCount { get; private set; }
        /// <summary>
        /// Returns false as UserCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUserCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RecipeCount
        /// </summary>
        [DataMember(Name = "recipe_count", EmitDefaultValue = true)]
        public string RecipeCount { get; private set; }
        /// <summary>
        /// Returns false as RecipeCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipeCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FileSizeMb
        /// </summary>
        [DataMember(Name = "file_size_mb", EmitDefaultValue = true)]
        public string FileSizeMb { get; private set; }
        /// <summary>
        /// Returns false as FileSizeMb should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFileSizeMb()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public RecipeStepsInnerFile Image { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Space {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MaxRecipes: ").Append(MaxRecipes).Append("\n");
            sb.Append("  MaxFileStorageMb: ").Append(MaxFileStorageMb).Append("\n");
            sb.Append("  MaxUsers: ").Append(MaxUsers).Append("\n");
            sb.Append("  AllowSharing: ").Append(AllowSharing).Append("\n");
            sb.Append("  Demo: ").Append(Demo).Append("\n");
            sb.Append("  FoodInherit: ").Append(FoodInherit).Append("\n");
            sb.Append("  ShowFacetCount: ").Append(ShowFacetCount).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  RecipeCount: ").Append(RecipeCount).Append("\n");
            sb.Append("  FileSizeMb: ").Append(FileSizeMb).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Space);
        }
        /// <summary>
        /// Returns true if Space instances are equal
        /// </summary>
        /// <param name="input">Instance of Space to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Space input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.MaxRecipes == input.MaxRecipes ||
                    this.MaxRecipes.Equals(input.MaxRecipes)
                ) && 
                (
                    this.MaxFileStorageMb == input.MaxFileStorageMb ||
                    this.MaxFileStorageMb.Equals(input.MaxFileStorageMb)
                ) && 
                (
                    this.MaxUsers == input.MaxUsers ||
                    this.MaxUsers.Equals(input.MaxUsers)
                ) && 
                (
                    this.AllowSharing == input.AllowSharing ||
                    this.AllowSharing.Equals(input.AllowSharing)
                ) && 
                (
                    this.Demo == input.Demo ||
                    this.Demo.Equals(input.Demo)
                ) && 
                (
                    this.FoodInherit == input.FoodInherit ||
                    this.FoodInherit != null &&
                    input.FoodInherit != null &&
                    this.FoodInherit.SequenceEqual(input.FoodInherit)
                ) && 
                (
                    this.ShowFacetCount == input.ShowFacetCount ||
                    this.ShowFacetCount.Equals(input.ShowFacetCount)
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    (this.UserCount != null &&
                    this.UserCount.Equals(input.UserCount))
                ) && 
                (
                    this.RecipeCount == input.RecipeCount ||
                    (this.RecipeCount != null &&
                    this.RecipeCount.Equals(input.RecipeCount))
                ) && 
                (
                    this.FileSizeMb == input.FileSizeMb ||
                    (this.FileSizeMb != null &&
                    this.FileSizeMb.Equals(input.FileSizeMb))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxRecipes.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxFileStorageMb.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxUsers.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowSharing.GetHashCode();
                hashCode = (hashCode * 59) + this.Demo.GetHashCode();
                if (this.FoodInherit != null)
                {
                    hashCode = (hashCode * 59) + this.FoodInherit.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowFacetCount.GetHashCode();
                if (this.UserCount != null)
                {
                    hashCode = (hashCode * 59) + this.UserCount.GetHashCode();
                }
                if (this.RecipeCount != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeCount.GetHashCode();
                }
                if (this.FileSizeMb != null)
                {
                    hashCode = (hashCode * 59) + this.FileSizeMb.GetHashCode();
                }
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Message (string) maxLength
            if (this.Message != null && this.Message.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 512.", new [] { "Message" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Step
    /// </summary>
    [DataContract(Name = "Step")]
    public partial class Step : IEquatable<Step>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Step" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Step() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Step" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="instruction">instruction.</param>
        /// <param name="ingredients">ingredients (required).</param>
        /// <param name="time">time.</param>
        /// <param name="order">order.</param>
        /// <param name="showAsHeader">showAsHeader.</param>
        /// <param name="file">file.</param>
        /// <param name="stepRecipe">stepRecipe.</param>
        public Step(string name = default(string), string instruction = default(string), List<RecipeStepsInnerIngredientsInner> ingredients = default(List<RecipeStepsInnerIngredientsInner>), int time = default(int), int order = default(int), bool showAsHeader = default(bool), RecipeStepsInnerFile file = default(RecipeStepsInnerFile), int? stepRecipe = default(int?))
        {
            // to ensure "ingredients" is required (not null)
            if (ingredients == null)
            {
                throw new ArgumentNullException("ingredients is a required property for Step and cannot be null");
            }
            this.Ingredients = ingredients;
            this.Name = name;
            this.Instruction = instruction;
            this.Time = time;
            this.Order = order;
            this.ShowAsHeader = showAsHeader;
            this.File = file;
            this.StepRecipe = stepRecipe;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Instruction
        /// </summary>
        [DataMember(Name = "instruction", EmitDefaultValue = true)]
        public string Instruction { get; set; }
        /// <summary>
        /// Gets or Sets Ingredients
        /// </summary>
        [DataMember(Name = "ingredients", IsRequired = true, EmitDefaultValue = true)]
        public List<RecipeStepsInnerIngredientsInner> Ingredients { get; set; }
        /// <summary>
        /// Gets or Sets IngredientsMarkdown
        /// </summary>
        [DataMember(Name = "ingredients_markdown", EmitDefaultValue = true)]
        public string IngredientsMarkdown { get; private set; }
        /// <summary>
        /// Returns false as IngredientsMarkdown should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIngredientsMarkdown()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IngredientsVue
        /// </summary>
        [DataMember(Name = "ingredients_vue", EmitDefaultValue = true)]
        public string IngredientsVue { get; private set; }
        /// <summary>
        /// Returns false as IngredientsVue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIngredientsVue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", EmitDefaultValue = true)]
        public int Time { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Gets or Sets ShowAsHeader
        /// </summary>
        [DataMember(Name = "show_as_header", EmitDefaultValue = true)]
        public bool ShowAsHeader { get; set; }
        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = true)]
        public RecipeStepsInnerFile File { get; set; }
        /// <summary>
        /// Gets or Sets StepRecipe
        /// </summary>
        [DataMember(Name = "step_recipe", EmitDefaultValue = true)]
        public int? StepRecipe { get; set; }
        /// <summary>
        /// Gets or Sets StepRecipeData
        /// </summary>
        [DataMember(Name = "step_recipe_data", EmitDefaultValue = true)]
        public string StepRecipeData { get; private set; }
        /// <summary>
        /// Returns false as StepRecipeData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStepRecipeData()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Numrecipe
        /// </summary>
        [DataMember(Name = "numrecipe", EmitDefaultValue = true)]
        public string Numrecipe { get; private set; }
        /// <summary>
        /// Returns false as Numrecipe should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumrecipe()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Step {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Instruction: ").Append(Instruction).Append("\n");
            sb.Append("  Ingredients: ").Append(Ingredients).Append("\n");
            sb.Append("  IngredientsMarkdown: ").Append(IngredientsMarkdown).Append("\n");
            sb.Append("  IngredientsVue: ").Append(IngredientsVue).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  ShowAsHeader: ").Append(ShowAsHeader).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  StepRecipe: ").Append(StepRecipe).Append("\n");
            sb.Append("  StepRecipeData: ").Append(StepRecipeData).Append("\n");
            sb.Append("  Numrecipe: ").Append(Numrecipe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Step);
        }
        /// <summary>
        /// Returns true if Step instances are equal
        /// </summary>
        /// <param name="input">Instance of Step to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Step input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Instruction == input.Instruction ||
                    (this.Instruction != null &&
                    this.Instruction.Equals(input.Instruction))
                ) && 
                (
                    this.Ingredients == input.Ingredients ||
                    this.Ingredients != null &&
                    input.Ingredients != null &&
                    this.Ingredients.SequenceEqual(input.Ingredients)
                ) && 
                (
                    this.IngredientsMarkdown == input.IngredientsMarkdown ||
                    (this.IngredientsMarkdown != null &&
                    this.IngredientsMarkdown.Equals(input.IngredientsMarkdown))
                ) && 
                (
                    this.IngredientsVue == input.IngredientsVue ||
                    (this.IngredientsVue != null &&
                    this.IngredientsVue.Equals(input.IngredientsVue))
                ) && 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.ShowAsHeader == input.ShowAsHeader ||
                    this.ShowAsHeader.Equals(input.ShowAsHeader)
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.StepRecipe == input.StepRecipe ||
                    (this.StepRecipe != null &&
                    this.StepRecipe.Equals(input.StepRecipe))
                ) && 
                (
                    this.StepRecipeData == input.StepRecipeData ||
                    (this.StepRecipeData != null &&
                    this.StepRecipeData.Equals(input.StepRecipeData))
                ) && 
                (
                    this.Numrecipe == input.Numrecipe ||
                    (this.Numrecipe != null &&
                    this.Numrecipe.Equals(input.Numrecipe))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Instruction != null)
                {
                    hashCode = (hashCode * 59) + this.Instruction.GetHashCode();
                }
                if (this.Ingredients != null)
                {
                    hashCode = (hashCode * 59) + this.Ingredients.GetHashCode();
                }
                if (this.IngredientsMarkdown != null)
                {
                    hashCode = (hashCode * 59) + this.IngredientsMarkdown.GetHashCode();
                }
                if (this.IngredientsVue != null)
                {
                    hashCode = (hashCode * 59) + this.IngredientsVue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowAsHeader.GetHashCode();
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.StepRecipe != null)
                {
                    hashCode = (hashCode * 59) + this.StepRecipe.GetHashCode();
                }
                if (this.StepRecipeData != null)
                {
                    hashCode = (hashCode * 59) + this.StepRecipeData.GetHashCode();
                }
                if (this.Numrecipe != null)
                {
                    hashCode = (hashCode * 59) + this.Numrecipe.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Time (int) maximum
            if (this.Time > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Time, must be a value less than or equal to 2147483647.", new [] { "Time" });
            }
            // Time (int) minimum
            if (this.Time < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Time, must be a value greater than or equal to -2147483648.", new [] { "Time" });
            }
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Storage
    /// </summary>
    [DataContract(Name = "Storage")]
    public partial class Storage : IEquatable<Storage>, IValidatableObject
    {
        /// <summary>
        /// Defines Method
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum DB for value: DB
            /// </summary>
            [EnumMember(Value = "DB")]
            DB = 1,
            /// <summary>
            /// Enum NEXTCLOUD for value: NEXTCLOUD
            /// </summary>
            [EnumMember(Value = "NEXTCLOUD")]
            NEXTCLOUD = 2,
            /// <summary>
            /// Enum LOCAL for value: LOCAL
            /// </summary>
            [EnumMember(Value = "LOCAL")]
            LOCAL = 3
        }
        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = true)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Storage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Storage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Storage" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="method">method.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="token">token.</param>
        public Storage(string name = default(string), MethodEnum? method = default(MethodEnum?), string username = default(string), string password = default(string), string token = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Storage and cannot be null");
            }
            this.Name = name;
            this.Method = method;
            this.Username = username;
            this.Password = password;
            this.Token = token;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Storage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Storage);
        }
        /// <summary>
        /// Returns true if Storage instances are equal
        /// </summary>
        /// <param name="input">Instance of Storage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Storage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Method.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Username (string) maxLength
            if (this.Username != null && this.Username.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be less than 128.", new [] { "Username" });
            }
            // Password (string) maxLength
            if (this.Password != null && this.Password.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 128.", new [] { "Password" });
            }
            // Token (string) maxLength
            if (this.Token != null && this.Token.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Token, length must be less than 512.", new [] { "Token" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Supermarket
    /// </summary>
    [DataContract(Name = "Supermarket")]
    public partial class Supermarket : IEquatable<Supermarket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Supermarket" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Supermarket() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Supermarket" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        public Supermarket(string name = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Supermarket and cannot be null");
            }
            this.Name = name;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets CategoryToSupermarket
        /// </summary>
        [DataMember(Name = "category_to_supermarket", EmitDefaultValue = true)]
        public List<ShoppingListSupermarketCategoryToSupermarketInner> CategoryToSupermarket { get; private set; }
        /// <summary>
        /// Returns false as CategoryToSupermarket should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoryToSupermarket()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Supermarket {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CategoryToSupermarket: ").Append(CategoryToSupermarket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Supermarket);
        }
        /// <summary>
        /// Returns true if Supermarket instances are equal
        /// </summary>
        /// <param name="input">Instance of Supermarket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Supermarket input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CategoryToSupermarket == input.CategoryToSupermarket ||
                    this.CategoryToSupermarket != null &&
                    input.CategoryToSupermarket != null &&
                    this.CategoryToSupermarket.SequenceEqual(input.CategoryToSupermarket)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CategoryToSupermarket != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryToSupermarket.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// SupermarketCategory
    /// </summary>
    [DataContract(Name = "SupermarketCategory")]
    public partial class SupermarketCategory : IEquatable<SupermarketCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupermarketCategory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SupermarketCategory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupermarketCategory" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        public SupermarketCategory(string name = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SupermarketCategory and cannot be null");
            }
            this.Name = name;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupermarketCategory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupermarketCategory);
        }
        /// <summary>
        /// Returns true if SupermarketCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of SupermarketCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupermarketCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// SupermarketCategoryRelation
    /// </summary>
    [DataContract(Name = "SupermarketCategoryRelation")]
    public partial class SupermarketCategoryRelation : IEquatable<SupermarketCategoryRelation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupermarketCategoryRelation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SupermarketCategoryRelation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupermarketCategoryRelation" /> class.
        /// </summary>
        /// <param name="category">category (required).</param>
        /// <param name="supermarket">supermarket (required).</param>
        /// <param name="order">order.</param>
        public SupermarketCategoryRelation(ShoppingListSupermarketCategoryToSupermarketInnerCategory category = default(ShoppingListSupermarketCategoryToSupermarketInnerCategory), int supermarket = default(int), int order = default(int))
        {
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for SupermarketCategoryRelation and cannot be null");
            }
            this.Category = category;
            this.Supermarket = supermarket;
            this.Order = order;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public ShoppingListSupermarketCategoryToSupermarketInnerCategory Category { get; set; }
        /// <summary>
        /// Gets or Sets Supermarket
        /// </summary>
        [DataMember(Name = "supermarket", IsRequired = true, EmitDefaultValue = true)]
        public int Supermarket { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int Order { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupermarketCategoryRelation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Supermarket: ").Append(Supermarket).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupermarketCategoryRelation);
        }
        /// <summary>
        /// Returns true if SupermarketCategoryRelation instances are equal
        /// </summary>
        /// <param name="input">Instance of SupermarketCategoryRelation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupermarketCategoryRelation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Supermarket == input.Supermarket ||
                    this.Supermarket.Equals(input.Supermarket)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Supermarket.GetHashCode();
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Order (int) maximum
            if (this.Order > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }
            // Order (int) minimum
            if (this.Order < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Sync
    /// </summary>
    [DataContract(Name = "Sync")]
    public partial class Sync : IEquatable<Sync>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sync" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Sync() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Sync" /> class.
        /// </summary>
        /// <param name="storage">storage (required).</param>
        /// <param name="path">path.</param>
        /// <param name="active">active.</param>
        /// <param name="lastChecked">lastChecked.</param>
        public Sync(int storage = default(int), string path = default(string), bool active = default(bool), DateTime? lastChecked = default(DateTime?))
        {
            this.Storage = storage;
            this.Path = path;
            this.Active = active;
            this.LastChecked = lastChecked;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name = "storage", IsRequired = true, EmitDefaultValue = true)]
        public int Storage { get; set; }
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }
        /// <summary>
        /// Gets or Sets LastChecked
        /// </summary>
        [DataMember(Name = "last_checked", EmitDefaultValue = true)]
        public DateTime? LastChecked { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; private set; }
        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Sync {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  LastChecked: ").Append(LastChecked).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sync);
        }
        /// <summary>
        /// Returns true if Sync instances are equal
        /// </summary>
        /// <param name="input">Instance of Sync to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sync input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Storage == input.Storage ||
                    this.Storage.Equals(input.Storage)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.LastChecked == input.LastChecked ||
                    (this.LastChecked != null &&
                    this.LastChecked.Equals(input.LastChecked))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Storage.GetHashCode();
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.LastChecked != null)
                {
                    hashCode = (hashCode * 59) + this.LastChecked.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Path (string) maxLength
            if (this.Path != null && this.Path.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Path, length must be less than 512.", new [] { "Path" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// SyncLog
    /// </summary>
    [DataContract(Name = "SyncLog")]
    public partial class SyncLog : IEquatable<SyncLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SyncLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncLog" /> class.
        /// </summary>
        /// <param name="sync">sync (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="msg">msg.</param>
        public SyncLog(int sync = default(int), string status = default(string), string msg = default(string))
        {
            this.Sync = sync;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for SyncLog and cannot be null");
            }
            this.Status = status;
            this.Msg = msg;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Sync
        /// </summary>
        [DataMember(Name = "sync", IsRequired = true, EmitDefaultValue = true)]
        public int Sync { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [DataMember(Name = "msg", EmitDefaultValue = true)]
        public string Msg { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sync: ").Append(Sync).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyncLog);
        }
        /// <summary>
        /// Returns true if SyncLog instances are equal
        /// </summary>
        /// <param name="input">Instance of SyncLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Sync == input.Sync ||
                    this.Sync.Equals(input.Sync)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Sync.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Msg != null)
                {
                    hashCode = (hashCode * 59) + this.Msg.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Status (string) maxLength
            if (this.Status != null && this.Status.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be less than 32.", new [] { "Status" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// Unit
    /// </summary>
    [DataContract(Name = "Unit")]
    public partial class Unit : IEquatable<Unit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Unit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Unit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Unit" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        public Unit(string name = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Unit and cannot be null");
            }
            this.Name = name;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Unit {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Unit);
        }
        /// <summary>
        /// Returns true if Unit instances are equal
        /// </summary>
        /// <param name="input">Instance of Unit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Unit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract(Name = "User")]
    public partial class User : IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        public User(string firstName = default(string), string lastName = default(string))
        {
            this.FirstName = firstName;
            this.LastName = lastName;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
        /// </summary>
        /// <value>Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.</value>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; private set; }
        /// <summary>
        /// Returns false as Username should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsername()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = true)]
        public string DisplayName { get; private set; }
        /// <summary>
        /// Returns false as DisplayName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayName()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }
        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 150.", new [] { "FirstName" });
            }
            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 150.", new [] { "LastName" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// UserFile
    /// </summary>
    [DataContract(Name = "UserFile")]
    public partial class UserFile : IEquatable<UserFile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserFile" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="file">file (required).</param>
        public UserFile(string name = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UserFile and cannot be null");
            }
            this.Name = name;
            // to ensure "file" is required (not null)
            if (file == null)
            {
                throw new ArgumentNullException("file is a required property for UserFile and cannot be null");
            }
            this.File = file;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name = "file", IsRequired = true, EmitDefaultValue = true)]
        public System.IO.Stream File { get; set; }
        /// <summary>
        /// Gets or Sets FileDownload
        /// </summary>
        [DataMember(Name = "file_download", EmitDefaultValue = true)]
        public string FileDownload { get; private set; }
        /// <summary>
        /// Returns false as FileDownload should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFileDownload()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Preview
        /// </summary>
        [DataMember(Name = "preview", EmitDefaultValue = true)]
        public string Preview { get; private set; }
        /// <summary>
        /// Returns false as Preview should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePreview()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FileSizeKb
        /// </summary>
        [DataMember(Name = "file_size_kb", EmitDefaultValue = true)]
        public int FileSizeKb { get; private set; }
        /// <summary>
        /// Returns false as FileSizeKb should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFileSizeKb()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserFile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  FileDownload: ").Append(FileDownload).Append("\n");
            sb.Append("  Preview: ").Append(Preview).Append("\n");
            sb.Append("  FileSizeKb: ").Append(FileSizeKb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        
        public RecipeStepsInnerFile ToRecipeStepsInnerFile()
        {
            return new RecipeStepsInnerFile(Id, Name, FileDownload, Preview, FileSizeKb);
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserFile);
        }
        /// <summary>
        /// Returns true if UserFile instances are equal
        /// </summary>
        /// <param name="input">Instance of UserFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserFile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.FileDownload == input.FileDownload ||
                    (this.FileDownload != null &&
                    this.FileDownload.Equals(input.FileDownload))
                ) && 
                (
                    this.Preview == input.Preview ||
                    (this.Preview != null &&
                    this.Preview.Equals(input.Preview))
                ) && 
                (
                    this.FileSizeKb == input.FileSizeKb ||
                    this.FileSizeKb.Equals(input.FileSizeKb)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.FileDownload != null)
                {
                    hashCode = (hashCode * 59) + this.FileDownload.GetHashCode();
                }
                if (this.Preview != null)
                {
                    hashCode = (hashCode * 59) + this.Preview.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileSizeKb.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// UserPreference
    /// </summary>
    [DataContract(Name = "UserPreference")]
    public partial class UserPreference : IEquatable<UserPreference>, IValidatableObject
    {
        /// <summary>
        /// Defines Theme
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThemeEnum
        {
            /// <summary>
            /// Enum TANDOOR for value: TANDOOR
            /// </summary>
            [EnumMember(Value = "TANDOOR")]
            TANDOOR = 1,
            /// <summary>
            /// Enum BOOTSTRAP for value: BOOTSTRAP
            /// </summary>
            [EnumMember(Value = "BOOTSTRAP")]
            BOOTSTRAP = 2,
            /// <summary>
            /// Enum DARKLY for value: DARKLY
            /// </summary>
            [EnumMember(Value = "DARKLY")]
            DARKLY = 3,
            /// <summary>
            /// Enum FLATLY for value: FLATLY
            /// </summary>
            [EnumMember(Value = "FLATLY")]
            FLATLY = 4,
            /// <summary>
            /// Enum SUPERHERO for value: SUPERHERO
            /// </summary>
            [EnumMember(Value = "SUPERHERO")]
            SUPERHERO = 5
        }
        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name = "theme", EmitDefaultValue = true)]
        public ThemeEnum? Theme { get; set; }
        /// <summary>
        /// Defines NavColor
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NavColorEnum
        {
            /// <summary>
            /// Enum PRIMARY for value: PRIMARY
            /// </summary>
            [EnumMember(Value = "PRIMARY")]
            PRIMARY = 1,
            /// <summary>
            /// Enum SECONDARY for value: SECONDARY
            /// </summary>
            [EnumMember(Value = "SECONDARY")]
            SECONDARY = 2,
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 3,
            /// <summary>
            /// Enum INFO for value: INFO
            /// </summary>
            [EnumMember(Value = "INFO")]
            INFO = 4,
            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            [EnumMember(Value = "WARNING")]
            WARNING = 5,
            /// <summary>
            /// Enum DANGER for value: DANGER
            /// </summary>
            [EnumMember(Value = "DANGER")]
            DANGER = 6,
            /// <summary>
            /// Enum LIGHT for value: LIGHT
            /// </summary>
            [EnumMember(Value = "LIGHT")]
            LIGHT = 7,
            /// <summary>
            /// Enum DARK for value: DARK
            /// </summary>
            [EnumMember(Value = "DARK")]
            DARK = 8
        }
        /// <summary>
        /// Gets or Sets NavColor
        /// </summary>
        [DataMember(Name = "nav_color", EmitDefaultValue = true)]
        public NavColorEnum? NavColor { get; set; }
        /// <summary>
        /// Defines DefaultPage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultPageEnum
        {
            /// <summary>
            /// Enum SEARCH for value: SEARCH
            /// </summary>
            [EnumMember(Value = "SEARCH")]
            SEARCH = 1,
            /// <summary>
            /// Enum PLAN for value: PLAN
            /// </summary>
            [EnumMember(Value = "PLAN")]
            PLAN = 2,
            /// <summary>
            /// Enum BOOKS for value: BOOKS
            /// </summary>
            [EnumMember(Value = "BOOKS")]
            BOOKS = 3
        }
        /// <summary>
        /// Gets or Sets DefaultPage
        /// </summary>
        [DataMember(Name = "default_page", EmitDefaultValue = true)]
        public DefaultPageEnum? DefaultPage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserPreference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreference" /> class.
        /// </summary>
        /// <param name="user">user (required).</param>
        /// <param name="image">image.</param>
        /// <param name="theme">theme.</param>
        /// <param name="navColor">navColor.</param>
        /// <param name="defaultUnit">defaultUnit.</param>
        /// <param name="defaultPage">defaultPage.</param>
        /// <param name="useFractions">useFractions.</param>
        /// <param name="useKj">useKj.</param>
        /// <param name="planShare">planShare.</param>
        /// <param name="stickyNavbar">stickyNavbar.</param>
        /// <param name="ingredientDecimals">ingredientDecimals.</param>
        /// <param name="comments">comments.</param>
        /// <param name="shoppingAutoSync">shoppingAutoSync.</param>
        /// <param name="mealplanAutoaddShopping">mealplanAutoaddShopping.</param>
        /// <param name="defaultDelay">defaultDelay.</param>
        /// <param name="mealplanAutoincludeRelated">mealplanAutoincludeRelated.</param>
        /// <param name="mealplanAutoexcludeOnhand">mealplanAutoexcludeOnhand.</param>
        /// <param name="shoppingShare">shoppingShare.</param>
        /// <param name="shoppingRecentDays">shoppingRecentDays.</param>
        /// <param name="csvDelim">csvDelim.</param>
        /// <param name="csvPrefix">csvPrefix.</param>
        /// <param name="filterToSupermarket">filterToSupermarket.</param>
        /// <param name="shoppingAddOnhand">shoppingAddOnhand.</param>
        /// <param name="leftHanded">leftHanded.</param>
        public UserPreference(int user = default(int), RecipeStepsInnerFile image = default(RecipeStepsInnerFile), ThemeEnum? theme = default(ThemeEnum?), NavColorEnum? navColor = default(NavColorEnum?), string defaultUnit = default(string), DefaultPageEnum? defaultPage = default(DefaultPageEnum?), bool useFractions = default(bool), bool useKj = default(bool), List<CustomFilterSharedInner> planShare = default(List<CustomFilterSharedInner>), bool stickyNavbar = default(bool), int ingredientDecimals = default(int), bool comments = default(bool), int shoppingAutoSync = default(int), bool mealplanAutoaddShopping = default(bool), decimal defaultDelay = default(decimal), bool mealplanAutoincludeRelated = default(bool), bool mealplanAutoexcludeOnhand = default(bool), List<CustomFilterSharedInner> shoppingShare = default(List<CustomFilterSharedInner>), int shoppingRecentDays = default(int), string csvDelim = default(string), string csvPrefix = default(string), bool filterToSupermarket = default(bool), bool shoppingAddOnhand = default(bool), bool leftHanded = default(bool))
        {
            this.User = user;
            this.Image = image;
            this.Theme = theme;
            this.NavColor = navColor;
            this.DefaultUnit = defaultUnit;
            this.DefaultPage = defaultPage;
            this.UseFractions = useFractions;
            this.UseKj = useKj;
            this.PlanShare = planShare;
            this.StickyNavbar = stickyNavbar;
            this.IngredientDecimals = ingredientDecimals;
            this.Comments = comments;
            this.ShoppingAutoSync = shoppingAutoSync;
            this.MealplanAutoaddShopping = mealplanAutoaddShopping;
            this.DefaultDelay = defaultDelay;
            this.MealplanAutoincludeRelated = mealplanAutoincludeRelated;
            this.MealplanAutoexcludeOnhand = mealplanAutoexcludeOnhand;
            this.ShoppingShare = shoppingShare;
            this.ShoppingRecentDays = shoppingRecentDays;
            this.CsvDelim = csvDelim;
            this.CsvPrefix = csvPrefix;
            this.FilterToSupermarket = filterToSupermarket;
            this.ShoppingAddOnhand = shoppingAddOnhand;
            this.LeftHanded = leftHanded;
        }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public int User { get; set; }
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public RecipeStepsInnerFile Image { get; set; }
        /// <summary>
        /// Gets or Sets DefaultUnit
        /// </summary>
        [DataMember(Name = "default_unit", EmitDefaultValue = true)]
        public string DefaultUnit { get; set; }
        /// <summary>
        /// Gets or Sets UseFractions
        /// </summary>
        [DataMember(Name = "use_fractions", EmitDefaultValue = true)]
        public bool UseFractions { get; set; }
        /// <summary>
        /// Gets or Sets UseKj
        /// </summary>
        [DataMember(Name = "use_kj", EmitDefaultValue = true)]
        public bool UseKj { get; set; }
        /// <summary>
        /// Gets or Sets PlanShare
        /// </summary>
        [DataMember(Name = "plan_share", EmitDefaultValue = true)]
        public List<CustomFilterSharedInner> PlanShare { get; set; }
        /// <summary>
        /// Gets or Sets StickyNavbar
        /// </summary>
        [DataMember(Name = "sticky_navbar", EmitDefaultValue = true)]
        public bool StickyNavbar { get; set; }
        /// <summary>
        /// Gets or Sets IngredientDecimals
        /// </summary>
        [DataMember(Name = "ingredient_decimals", EmitDefaultValue = true)]
        public int IngredientDecimals { get; set; }
        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = true)]
        public bool Comments { get; set; }
        /// <summary>
        /// Gets or Sets ShoppingAutoSync
        /// </summary>
        [DataMember(Name = "shopping_auto_sync", EmitDefaultValue = true)]
        public int ShoppingAutoSync { get; set; }
        /// <summary>
        /// Gets or Sets MealplanAutoaddShopping
        /// </summary>
        [DataMember(Name = "mealplan_autoadd_shopping", EmitDefaultValue = true)]
        public bool MealplanAutoaddShopping { get; set; }
        /// <summary>
        /// Gets or Sets FoodInheritDefault
        /// </summary>
        [DataMember(Name = "food_inherit_default", EmitDefaultValue = true)]
        public string FoodInheritDefault { get; private set; }
        /// <summary>
        /// Returns false as FoodInheritDefault should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFoodInheritDefault()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DefaultDelay
        /// </summary>
        [DataMember(Name = "default_delay", EmitDefaultValue = true)]
        public decimal DefaultDelay { get; set; }
        /// <summary>
        /// Gets or Sets MealplanAutoincludeRelated
        /// </summary>
        [DataMember(Name = "mealplan_autoinclude_related", EmitDefaultValue = true)]
        public bool MealplanAutoincludeRelated { get; set; }
        /// <summary>
        /// Gets or Sets MealplanAutoexcludeOnhand
        /// </summary>
        [DataMember(Name = "mealplan_autoexclude_onhand", EmitDefaultValue = true)]
        public bool MealplanAutoexcludeOnhand { get; set; }
        /// <summary>
        /// Gets or Sets ShoppingShare
        /// </summary>
        [DataMember(Name = "shopping_share", EmitDefaultValue = true)]
        public List<CustomFilterSharedInner> ShoppingShare { get; set; }
        /// <summary>
        /// Gets or Sets ShoppingRecentDays
        /// </summary>
        [DataMember(Name = "shopping_recent_days", EmitDefaultValue = true)]
        public int ShoppingRecentDays { get; set; }
        /// <summary>
        /// Gets or Sets CsvDelim
        /// </summary>
        [DataMember(Name = "csv_delim", EmitDefaultValue = true)]
        public string CsvDelim { get; set; }
        /// <summary>
        /// Gets or Sets CsvPrefix
        /// </summary>
        [DataMember(Name = "csv_prefix", EmitDefaultValue = true)]
        public string CsvPrefix { get; set; }
        /// <summary>
        /// Gets or Sets FilterToSupermarket
        /// </summary>
        [DataMember(Name = "filter_to_supermarket", EmitDefaultValue = true)]
        public bool FilterToSupermarket { get; set; }
        /// <summary>
        /// Gets or Sets ShoppingAddOnhand
        /// </summary>
        [DataMember(Name = "shopping_add_onhand", EmitDefaultValue = true)]
        public bool ShoppingAddOnhand { get; set; }
        /// <summary>
        /// Gets or Sets LeftHanded
        /// </summary>
        [DataMember(Name = "left_handed", EmitDefaultValue = true)]
        public bool LeftHanded { get; set; }
        /// <summary>
        /// Gets or Sets FoodChildrenExist
        /// </summary>
        [DataMember(Name = "food_children_exist", EmitDefaultValue = true)]
        public string FoodChildrenExist { get; private set; }
        /// <summary>
        /// Returns false as FoodChildrenExist should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFoodChildrenExist()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserPreference {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  NavColor: ").Append(NavColor).Append("\n");
            sb.Append("  DefaultUnit: ").Append(DefaultUnit).Append("\n");
            sb.Append("  DefaultPage: ").Append(DefaultPage).Append("\n");
            sb.Append("  UseFractions: ").Append(UseFractions).Append("\n");
            sb.Append("  UseKj: ").Append(UseKj).Append("\n");
            sb.Append("  PlanShare: ").Append(PlanShare).Append("\n");
            sb.Append("  StickyNavbar: ").Append(StickyNavbar).Append("\n");
            sb.Append("  IngredientDecimals: ").Append(IngredientDecimals).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  ShoppingAutoSync: ").Append(ShoppingAutoSync).Append("\n");
            sb.Append("  MealplanAutoaddShopping: ").Append(MealplanAutoaddShopping).Append("\n");
            sb.Append("  FoodInheritDefault: ").Append(FoodInheritDefault).Append("\n");
            sb.Append("  DefaultDelay: ").Append(DefaultDelay).Append("\n");
            sb.Append("  MealplanAutoincludeRelated: ").Append(MealplanAutoincludeRelated).Append("\n");
            sb.Append("  MealplanAutoexcludeOnhand: ").Append(MealplanAutoexcludeOnhand).Append("\n");
            sb.Append("  ShoppingShare: ").Append(ShoppingShare).Append("\n");
            sb.Append("  ShoppingRecentDays: ").Append(ShoppingRecentDays).Append("\n");
            sb.Append("  CsvDelim: ").Append(CsvDelim).Append("\n");
            sb.Append("  CsvPrefix: ").Append(CsvPrefix).Append("\n");
            sb.Append("  FilterToSupermarket: ").Append(FilterToSupermarket).Append("\n");
            sb.Append("  ShoppingAddOnhand: ").Append(ShoppingAddOnhand).Append("\n");
            sb.Append("  LeftHanded: ").Append(LeftHanded).Append("\n");
            sb.Append("  FoodChildrenExist: ").Append(FoodChildrenExist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPreference);
        }
        /// <summary>
        /// Returns true if UserPreference instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPreference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPreference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.User == input.User ||
                    this.User.Equals(input.User)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Theme == input.Theme ||
                    this.Theme.Equals(input.Theme)
                ) && 
                (
                    this.NavColor == input.NavColor ||
                    this.NavColor.Equals(input.NavColor)
                ) && 
                (
                    this.DefaultUnit == input.DefaultUnit ||
                    (this.DefaultUnit != null &&
                    this.DefaultUnit.Equals(input.DefaultUnit))
                ) && 
                (
                    this.DefaultPage == input.DefaultPage ||
                    this.DefaultPage.Equals(input.DefaultPage)
                ) && 
                (
                    this.UseFractions == input.UseFractions ||
                    this.UseFractions.Equals(input.UseFractions)
                ) && 
                (
                    this.UseKj == input.UseKj ||
                    this.UseKj.Equals(input.UseKj)
                ) && 
                (
                    this.PlanShare == input.PlanShare ||
                    this.PlanShare != null &&
                    input.PlanShare != null &&
                    this.PlanShare.SequenceEqual(input.PlanShare)
                ) && 
                (
                    this.StickyNavbar == input.StickyNavbar ||
                    this.StickyNavbar.Equals(input.StickyNavbar)
                ) && 
                (
                    this.IngredientDecimals == input.IngredientDecimals ||
                    this.IngredientDecimals.Equals(input.IngredientDecimals)
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments.Equals(input.Comments)
                ) && 
                (
                    this.ShoppingAutoSync == input.ShoppingAutoSync ||
                    this.ShoppingAutoSync.Equals(input.ShoppingAutoSync)
                ) && 
                (
                    this.MealplanAutoaddShopping == input.MealplanAutoaddShopping ||
                    this.MealplanAutoaddShopping.Equals(input.MealplanAutoaddShopping)
                ) && 
                (
                    this.FoodInheritDefault == input.FoodInheritDefault ||
                    (this.FoodInheritDefault != null &&
                    this.FoodInheritDefault.Equals(input.FoodInheritDefault))
                ) && 
                (
                    this.DefaultDelay == input.DefaultDelay ||
                    this.DefaultDelay.Equals(input.DefaultDelay)
                ) && 
                (
                    this.MealplanAutoincludeRelated == input.MealplanAutoincludeRelated ||
                    this.MealplanAutoincludeRelated.Equals(input.MealplanAutoincludeRelated)
                ) && 
                (
                    this.MealplanAutoexcludeOnhand == input.MealplanAutoexcludeOnhand ||
                    this.MealplanAutoexcludeOnhand.Equals(input.MealplanAutoexcludeOnhand)
                ) && 
                (
                    this.ShoppingShare == input.ShoppingShare ||
                    this.ShoppingShare != null &&
                    input.ShoppingShare != null &&
                    this.ShoppingShare.SequenceEqual(input.ShoppingShare)
                ) && 
                (
                    this.ShoppingRecentDays == input.ShoppingRecentDays ||
                    this.ShoppingRecentDays.Equals(input.ShoppingRecentDays)
                ) && 
                (
                    this.CsvDelim == input.CsvDelim ||
                    (this.CsvDelim != null &&
                    this.CsvDelim.Equals(input.CsvDelim))
                ) && 
                (
                    this.CsvPrefix == input.CsvPrefix ||
                    (this.CsvPrefix != null &&
                    this.CsvPrefix.Equals(input.CsvPrefix))
                ) && 
                (
                    this.FilterToSupermarket == input.FilterToSupermarket ||
                    this.FilterToSupermarket.Equals(input.FilterToSupermarket)
                ) && 
                (
                    this.ShoppingAddOnhand == input.ShoppingAddOnhand ||
                    this.ShoppingAddOnhand.Equals(input.ShoppingAddOnhand)
                ) && 
                (
                    this.LeftHanded == input.LeftHanded ||
                    this.LeftHanded.Equals(input.LeftHanded)
                ) && 
                (
                    this.FoodChildrenExist == input.FoodChildrenExist ||
                    (this.FoodChildrenExist != null &&
                    this.FoodChildrenExist.Equals(input.FoodChildrenExist))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.User.GetHashCode();
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Theme.GetHashCode();
                hashCode = (hashCode * 59) + this.NavColor.GetHashCode();
                if (this.DefaultUnit != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultUnit.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultPage.GetHashCode();
                hashCode = (hashCode * 59) + this.UseFractions.GetHashCode();
                hashCode = (hashCode * 59) + this.UseKj.GetHashCode();
                if (this.PlanShare != null)
                {
                    hashCode = (hashCode * 59) + this.PlanShare.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StickyNavbar.GetHashCode();
                hashCode = (hashCode * 59) + this.IngredientDecimals.GetHashCode();
                hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                hashCode = (hashCode * 59) + this.ShoppingAutoSync.GetHashCode();
                hashCode = (hashCode * 59) + this.MealplanAutoaddShopping.GetHashCode();
                if (this.FoodInheritDefault != null)
                {
                    hashCode = (hashCode * 59) + this.FoodInheritDefault.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.MealplanAutoincludeRelated.GetHashCode();
                hashCode = (hashCode * 59) + this.MealplanAutoexcludeOnhand.GetHashCode();
                if (this.ShoppingShare != null)
                {
                    hashCode = (hashCode * 59) + this.ShoppingShare.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShoppingRecentDays.GetHashCode();
                if (this.CsvDelim != null)
                {
                    hashCode = (hashCode * 59) + this.CsvDelim.GetHashCode();
                }
                if (this.CsvPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.CsvPrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FilterToSupermarket.GetHashCode();
                hashCode = (hashCode * 59) + this.ShoppingAddOnhand.GetHashCode();
                hashCode = (hashCode * 59) + this.LeftHanded.GetHashCode();
                if (this.FoodChildrenExist != null)
                {
                    hashCode = (hashCode * 59) + this.FoodChildrenExist.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // DefaultUnit (string) maxLength
            if (this.DefaultUnit != null && this.DefaultUnit.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultUnit, length must be less than 32.", new [] { "DefaultUnit" });
            }
            // IngredientDecimals (int) maximum
            if (this.IngredientDecimals > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IngredientDecimals, must be a value less than or equal to 2147483647.", new [] { "IngredientDecimals" });
            }
            // IngredientDecimals (int) minimum
            if (this.IngredientDecimals < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IngredientDecimals, must be a value greater than or equal to -2147483648.", new [] { "IngredientDecimals" });
            }
            // ShoppingAutoSync (int) maximum
            if (this.ShoppingAutoSync > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShoppingAutoSync, must be a value less than or equal to 2147483647.", new [] { "ShoppingAutoSync" });
            }
            // ShoppingAutoSync (int) minimum
            if (this.ShoppingAutoSync < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShoppingAutoSync, must be a value greater than or equal to -2147483648.", new [] { "ShoppingAutoSync" });
            }
            // ShoppingRecentDays (int) maximum
            if (this.ShoppingRecentDays > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShoppingRecentDays, must be a value less than or equal to 2147483647.", new [] { "ShoppingRecentDays" });
            }
            // ShoppingRecentDays (int) minimum
            if (this.ShoppingRecentDays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShoppingRecentDays, must be a value greater than or equal to 0.", new [] { "ShoppingRecentDays" });
            }
            // CsvDelim (string) maxLength
            if (this.CsvDelim != null && this.CsvDelim.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CsvDelim, length must be less than 2.", new [] { "CsvDelim" });
            }
            // CsvPrefix (string) maxLength
            if (this.CsvPrefix != null && this.CsvPrefix.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CsvPrefix, length must be less than 10.", new [] { "CsvPrefix" });
            }
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// UserSpace
    /// </summary>
    [DataContract(Name = "UserSpace")]
    public partial class UserSpace : IEquatable<UserSpace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSpace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserSpace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSpace" /> class.
        /// </summary>
        /// <param name="user">user.</param>
        /// <param name="groups">groups (required).</param>
        /// <param name="active">active.</param>
        public UserSpace(ShoppingListEntriesInnerCreatedBy user = default(ShoppingListEntriesInnerCreatedBy), List<InviteLinkGroup> groups = default(List<InviteLinkGroup>), bool active = default(bool))
        {
            // to ensure "groups" is required (not null)
            if (groups == null)
            {
                throw new ArgumentNullException("groups is a required property for UserSpace and cannot be null");
            }
            this.Groups = groups;
            this.User = user;
            this.Active = active;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public ShoppingListEntriesInnerCreatedBy User { get; set; }
        /// <summary>
        /// Gets or Sets Space
        /// </summary>
        [DataMember(Name = "space", EmitDefaultValue = true)]
        public string Space { get; private set; }
        /// <summary>
        /// Returns false as Space should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSpace()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", IsRequired = true, EmitDefaultValue = true)]
        public List<InviteLinkGroup> Groups { get; set; }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; private set; }
        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSpace {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Space: ").Append(Space).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSpace);
        }
        /// <summary>
        /// Returns true if UserSpace instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSpace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSpace input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Space == input.Space ||
                    (this.Space != null &&
                    this.Space.Equals(input.Space))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Space != null)
                {
                    hashCode = (hashCode * 59) + this.Space.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * Django Recipes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace fetchkptncook.Model
{
    /// <summary>
    /// ViewLog
    /// </summary>
    [DataContract(Name = "ViewLog")]
    public partial class ViewLog : IEquatable<ViewLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ViewLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewLog" /> class.
        /// </summary>
        /// <param name="recipe">recipe (required).</param>
        public ViewLog(int recipe = default(int))
        {
            this.Recipe = recipe;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", IsRequired = true, EmitDefaultValue = true)]
        public int Recipe { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }
        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }
        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ViewLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ViewLog);
        }
        /// <summary>
        /// Returns true if ViewLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ViewLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViewLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Recipe == input.Recipe ||
                    this.Recipe.Equals(input.Recipe)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Recipe.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
